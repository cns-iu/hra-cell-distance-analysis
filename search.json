[
  {
    "objectID": "distance_analysis__lymphnode-codex-yale.html",
    "href": "distance_analysis__lymphnode-codex-yale.html",
    "title": "Distance Analysis: lymphnode-codex-yale",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"lymphnode-codex-yale\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: lymphnode-codex-yale"
    ]
  },
  {
    "objectID": "distance_analysis__lymphnode-codex-yale.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__lymphnode-codex-yale.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: lymphnode-codex-yale",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n26180.447514\n8865.939227\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n1\n15214.596774\n11441.217742\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n2\n7498.846154\n12306.583333\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n3\n26618.031142\n18349.024221\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n4\n8325.500000\n12150.222222\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 34\nLevel Three Cell Type: 29\nLevel Two Cell Type: 10\nLevel One Cell Type: 3\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: lymphnode-codex-yale"
    ]
  },
  {
    "objectID": "distance_analysis__lymphnode-codex-yale.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__lymphnode-codex-yale.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: lymphnode-codex-yale",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n26180.447514\n8865.939227\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n1\n15214.596774\n11441.217742\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n2\n7498.846154\n12306.583333\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n3\n26618.031142\n18349.024221\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n4\n8325.500000\n12150.222222\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset']\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nLN00560\nLN00560\n\n\n1\nLN00560\nLN00560\n\n\n2\nLN00560\nLN00560\n\n\n3\nLN00560\nLN00560\n\n\n4\nLN00560\nLN00560\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['LN00560' 'LN00837' 'LN22921' 'LN24336' 'LN27766']\nTotal number of unique regions: 5\n\nNumber of unique datasets per unique region:\nLN00560: 1\nLN00837: 1\nLN22921: 1\nLN24336: 1\nLN27766: 1",
    "crumbs": [
      "Distance Analysis: lymphnode-codex-yale"
    ]
  },
  {
    "objectID": "distance_analysis__lymphnode-codex-yale.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__lymphnode-codex-yale.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: lymphnode-codex-yale",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n26180.447514\n8865.939227\n0\n26183.569536\n8838.370861\n0\n27.744582\nLN00560\nendothelial cell\nLevel Three Cell Type\n\n\n1\n1297\n26171.400000\n8972.626667\n0\n26264.875000\n8904.781250\n0\n115.501412\nLN00560\nendothelial cell\nLevel Three Cell Type\n\n\n2\n3106\n26140.166667\n8974.675000\n0\n26054.031088\n8889.103627\n0\n121.415805\nLN00560\nendothelial cell\nLevel Three Cell Type\n\n\n3\n3497\n26051.509259\n8961.282407\n0\n26054.031088\n8889.103627\n0\n72.222822\nLN00560\nendothelial cell\nLevel Three Cell Type\n\n\n4\n49397\n26015.800000\n8832.882759\n0\n26054.031088\n8889.103627\n0\n67.988250\nLN00560\nendothelial cell\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Dataset']\n# df_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nLN00560\nLN00560\n\n\n1\nLN00560\nLN00560\n\n\n2\nLN00560\nLN00560\n\n\n3\nLN00560\nLN00560\n\n\n4\nLN00560\nLN00560\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['LN00560' 'LN00837' 'LN22921' 'LN24336' 'LN27766']\nTotal number of unique regions: 5\n\nNumber of unique datasets per unique region:\nLN00560: 1\nLN00837: 1\nLN22921: 1\nLN24336: 1\nLN27766: 1\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset']\n# df_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nLN00560\nLN00560\n\n\n1\nLN00560\nLN00560\n\n\n2\nLN00560\nLN00560\n\n\n3\nLN00560\nLN00560\n\n\n4\nLN00560\nLN00560\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n26180.447514\n8865.939227\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nLN00560\nLN00560\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n0\n26180.447514\n8865.939227\n0\n26183.569536\n8838.370861\n0\n27.744582\nLN00560\nendothelial cell\nLevel Three Cell Type\nLN00560\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n0\n26180.447514\n8865.939227\n0\n26183.569536\n8838.370861\n0\n27.744582\nLN00560\nendothelial cell\nLevel Three Cell Type\ndendritic cell:follicular\ndendritic cell\nmesenchymal cell\nLN00560",
    "crumbs": [
      "Distance Analysis: lymphnode-codex-yale"
    ]
  },
  {
    "objectID": "distance_analysis__lymphnode-codex-yale.html#node-analysis",
    "href": "distance_analysis__lymphnode-codex-yale.html#node-analysis",
    "title": "Distance Analysis: lymphnode-codex-yale",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: lymphnode-codex-yale"
    ]
  },
  {
    "objectID": "distance_analysis__lymphnode-codex-yale.html#distance-analysis",
    "href": "distance_analysis__lymphnode-codex-yale.html#distance-analysis",
    "title": "Distance Analysis: lymphnode-codex-yale",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nLN00560\nendothelial cell\nLevel One Cell Type\n86.248270\n78.322089\n4.875021\n199.999931\n\n\n1\nLN00560\nendothelial cell\nLevel Three Cell Type\n86.248270\n78.322089\n4.875021\n199.999931\n\n\n2\nLN00560\nendothelial cell\nLevel Two Cell Type\n86.248270\n78.322089\n4.875021\n199.999931\n\n\n3\nLN00837\nendothelial cell\nLevel One Cell Type\n65.648760\n55.365786\n6.102839\n199.990502\n\n\n4\nLN00837\nendothelial cell\nLevel Three Cell Type\n65.648760\n55.365786\n6.102839\n199.990502\n\n\n5\nLN00837\nendothelial cell\nLevel Two Cell Type\n65.648760\n55.365786\n6.102839\n199.990502\n\n\n6\nLN22921\nendothelial cell\nLevel One Cell Type\n69.028245\n58.886066\n4.797734\n199.999849\n\n\n7\nLN22921\nendothelial cell\nLevel Three Cell Type\n69.028245\n58.886066\n4.797734\n199.999849\n\n\n8\nLN22921\nendothelial cell\nLevel Two Cell Type\n69.028245\n58.886066\n4.797734\n199.999849\n\n\n9\nLN24336\nendothelial cell\nLevel One Cell Type\n62.287459\n51.618910\n4.235994\n199.999774\n\n\n10\nLN24336\nendothelial cell\nLevel Three Cell Type\n62.287459\n51.618910\n4.235994\n199.999774\n\n\n11\nLN24336\nendothelial cell\nLevel Two Cell Type\n62.287459\n51.618910\n4.235994\n199.999774\n\n\n12\nLN27766\nendothelial cell\nLevel One Cell Type\n48.661838\n37.794400\n5.664908\n199.999790\n\n\n13\nLN27766\nendothelial cell\nLevel Three Cell Type\n48.661838\n37.794400\n5.664908\n199.999790\n\n\n14\nLN27766\nendothelial cell\nLevel Two Cell Type\n48.661838\n37.794400\n5.664908\n199.999790\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nimmune cell\nLN00560\n86.230167\n78.283379\n4.875021\n199.999931\n\n\n1\nimmune cell\nLN00837\n65.658556\n55.426203\n6.102839\n199.990502\n\n\n2\nimmune cell\nLN22921\n69.098860\n58.969275\n4.797734\n199.999849\n\n\n3\nimmune cell\nLN24336\n62.325526\n51.657698\n4.235994\n199.999774\n\n\n4\nimmune cell\nLN27766\n48.323776\n37.625713\n5.664908\n199.999790\n\n\n5\nmesenchymal cell\nLN00560\n88.029798\n81.864293\n6.239511\n199.836667\n\n\n6\nmesenchymal cell\nLN00837\n64.156297\n47.402660\n9.376279\n199.972438\n\n\n7\nmesenchymal cell\nLN22921\n42.860136\n30.269759\n6.260871\n199.945312\n\n\n8\nmesenchymal cell\nLN24336\n45.284939\n34.253833\n7.974461\n199.351793\n\n\n9\nmesenchymal cell\nLN27766\n63.171914\n49.198156\n6.110041\n199.979704\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in LN00560:\n  Level One Cell Type  mean_distance\n1    mesenchymal cell      88.029798\n0         immune cell      86.230167\n\nBottom 5 cell types in LN00560:\n  Level One Cell Type  mean_distance\n1    mesenchymal cell      88.029798\n0         immune cell      86.230167\n\nTop 5 cell types in LN00837:\n  Level One Cell Type  mean_distance\n0         immune cell      65.658556\n1    mesenchymal cell      64.156297\n\nBottom 5 cell types in LN00837:\n  Level One Cell Type  mean_distance\n0         immune cell      65.658556\n1    mesenchymal cell      64.156297\n\nTop 5 cell types in LN22921:\n  Level One Cell Type  mean_distance\n0         immune cell      69.098860\n1    mesenchymal cell      42.860136\n\nBottom 5 cell types in LN22921:\n  Level One Cell Type  mean_distance\n0         immune cell      69.098860\n1    mesenchymal cell      42.860136\n\nTop 5 cell types in LN24336:\n  Level One Cell Type  mean_distance\n0         immune cell      62.325526\n1    mesenchymal cell      45.284939\n\nBottom 5 cell types in LN24336:\n  Level One Cell Type  mean_distance\n0         immune cell      62.325526\n1    mesenchymal cell      45.284939\n\nTop 5 cell types in LN27766:\n  Level One Cell Type  mean_distance\n1    mesenchymal cell      63.171914\n0         immune cell      48.323776\n\nBottom 5 cell types in LN27766:\n  Level One Cell Type  mean_distance\n1    mesenchymal cell      63.171914\n0         immune cell      48.323776\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in LN00560:\n  Level One Cell Type  median_distance\n1    mesenchymal cell        81.864293\n0         immune cell        78.283379\n\nBottom 5 cell types in LN00560:\n  Level One Cell Type  median_distance\n1    mesenchymal cell        81.864293\n0         immune cell        78.283379\n\nTop 5 cell types in LN00837:\n  Level One Cell Type  median_distance\n0         immune cell        55.426203\n1    mesenchymal cell        47.402660\n\nBottom 5 cell types in LN00837:\n  Level One Cell Type  median_distance\n0         immune cell        55.426203\n1    mesenchymal cell        47.402660\n\nTop 5 cell types in LN22921:\n  Level One Cell Type  median_distance\n0         immune cell        58.969275\n1    mesenchymal cell        30.269759\n\nBottom 5 cell types in LN22921:\n  Level One Cell Type  median_distance\n0         immune cell        58.969275\n1    mesenchymal cell        30.269759\n\nTop 5 cell types in LN24336:\n  Level One Cell Type  median_distance\n0         immune cell        51.657698\n1    mesenchymal cell        34.253833\n\nBottom 5 cell types in LN24336:\n  Level One Cell Type  median_distance\n0         immune cell        51.657698\n1    mesenchymal cell        34.253833\n\nTop 5 cell types in LN27766:\n  Level One Cell Type  median_distance\n1    mesenchymal cell        49.198156\n0         immune cell        37.625713\n\nBottom 5 cell types in LN27766:\n  Level One Cell Type  median_distance\n1    mesenchymal cell        49.198156\n0         immune cell        37.625713\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nLN00560        86.25  50.97    59.1\nLN00837        65.65  42.86    65.3\nLN22921        69.03  43.55    63.1\nLN24336        62.29  41.07    65.9\nLN27766        48.66  35.83    73.6\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nmesenchymal cell     65.39  48.18    73.7\nimmune cell          67.80  44.76    66.0\n\n\n\n# Define the standard region sequence for plots (Get all unique values in Unique Region column as a list.)\nregions = df_all_edges_with_cell_types['Unique Region'].unique().tolist()\nprint(\"\\nRegions in the data:\")\nprint(regions)\n\n\nRegions in the data:\n['LN00560', 'LN00837', 'LN22921', 'LN24336', 'LN27766']\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    font_size = 10\n    fig, axs = plt.subplots(5, 1, figsize=(10, 20)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nLN00560\n88.672883\n81.031234\n4.875021\n199.999931\n\n\n1\nb cell\nLN00837\n71.823837\n61.529348\n6.638355\n199.990502\n\n\n2\nb cell\nLN22921\n82.039046\n72.283854\n4.797734\n199.999849\n\n\n3\nb cell\nLN24336\n64.496210\n53.491989\n5.385425\n199.999276\n\n\n4\nb cell\nLN27766\n58.734683\n45.181006\n6.945505\n199.999790\n\n\n5\ndendritic cell\nLN00560\n69.328460\n57.716266\n6.239511\n199.990815\n\n\n6\ndendritic cell\nLN00837\n56.462073\n48.013498\n6.578968\n199.972438\n\n\n7\ndendritic cell\nLN22921\n73.651623\n60.772678\n7.006536\n199.967413\n\n\n8\ndendritic cell\nLN24336\n59.716750\n50.896772\n7.264940\n199.995753\n\n\n9\ndendritic cell\nLN27766\n40.751088\n31.531565\n7.060869\n199.936083\n\n\n10\nlymphoid cell\nLN00560\n87.916868\n81.987260\n6.472932\n199.985560\n\n\n11\nlymphoid cell\nLN00837\n47.074148\n39.426220\n6.102839\n199.566202\n\n\n12\nlymphoid cell\nLN22921\n66.159509\n52.261744\n5.680996\n199.945578\n\n\n13\nlymphoid cell\nLN24336\n71.342591\n58.007388\n6.837350\n199.999774\n\n\n14\nlymphoid cell\nLN27766\n52.863464\n34.486844\n6.130197\n199.989882\n\n\n15\nmacrophage\nLN00560\n78.607505\n68.799241\n7.336973\n199.994850\n\n\n16\nmacrophage\nLN00837\n56.992624\n50.840886\n9.008524\n199.753164\n\n\n17\nmacrophage\nLN22921\n54.901756\n47.901377\n6.583548\n199.929894\n\n\n18\nmacrophage\nLN24336\n79.116158\n67.811076\n7.957836\n199.937893\n\n\n19\nmacrophage\nLN27766\n51.519747\n48.035642\n7.765481\n197.595104\n\n\n20\nmast cell\nLN00560\n99.372310\n96.167629\n10.595659\n199.849460\n\n\n21\nmast cell\nLN00837\n65.670488\n55.672843\n10.448412\n197.309722\n\n\n22\nmast cell\nLN22921\n52.593234\n44.533122\n5.595661\n198.746019\n\n\n23\nmast cell\nLN24336\n85.567104\n74.870233\n9.498461\n199.956401\n\n\n24\nmast cell\nLN27766\n43.276579\n33.640270\n8.008464\n199.891157\n\n\n25\nmonocyte\nLN00560\n89.144747\n82.996331\n7.532715\n199.991027\n\n\n26\nmonocyte\nLN00837\n55.526799\n45.104939\n8.037716\n199.980528\n\n\n27\nmonocyte\nLN22921\n50.021763\n40.595156\n5.302953\n199.957450\n\n\n28\nmonocyte\nLN24336\n60.846991\n44.274679\n7.100671\n199.964176\n\n\n29\nmonocyte\nLN27766\n49.144810\n45.352857\n7.274465\n199.927731\n\n\n30\nmuscle cell\nLN00560\n86.522830\n80.072416\n7.366499\n199.827904\n\n\n31\nmuscle cell\nLN00837\n59.032529\n44.506487\n9.537860\n196.964611\n\n\n32\nmuscle cell\nLN22921\n39.150671\n28.447433\n6.260871\n199.593551\n\n\n33\nmuscle cell\nLN24336\n43.536294\n30.191094\n7.974461\n199.351793\n\n\n34\nmuscle cell\nLN27766\n62.912204\n48.334648\n6.110041\n199.979704\n\n\n35\nnatural killer cell\nLN00560\n86.771851\n79.778126\n6.896002\n199.981161\n\n\n36\nnatural killer cell\nLN00837\n57.099449\n50.561814\n7.570372\n199.852375\n\n\n37\nnatural killer cell\nLN22921\n57.361924\n51.657575\n6.314864\n199.963468\n\n\n38\nnatural killer cell\nLN24336\n85.475053\n75.480916\n6.704395\n199.995869\n\n\n39\nnatural killer cell\nLN27766\n35.518688\n30.995884\n5.664908\n199.029670\n\n\n40\nt cell\nLN00560\n86.289131\n78.881215\n5.603447\n199.999549\n\n\n41\nt cell\nLN00837\n64.029926\n54.434361\n6.556713\n199.971033\n\n\n42\nt cell\nLN22921\n60.493650\n53.470688\n5.481371\n199.996959\n\n\n43\nt cell\nLN24336\n56.612429\n47.942598\n4.235994\n199.997767\n\n\n44\nt cell\nLN27766\n40.031514\n32.772272\n5.864464\n199.874886\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in LN00560:\n   Level Two Cell Type  mean_distance\n4            mast cell      99.372310\n5             monocyte      89.144747\n0               b cell      88.672883\n2        lymphoid cell      87.916868\n7  natural killer cell      86.771851\n\nBottom 5 cell types in LN00560:\n   Level Two Cell Type  mean_distance\n7  natural killer cell      86.771851\n6          muscle cell      86.522830\n8               t cell      86.289131\n3           macrophage      78.607505\n1       dendritic cell      69.328460\n\nTop 5 cell types in LN00837:\n   Level Two Cell Type  mean_distance\n0               b cell      71.823837\n4            mast cell      65.670488\n8               t cell      64.029926\n6          muscle cell      59.032529\n7  natural killer cell      57.099449\n\nBottom 5 cell types in LN00837:\n   Level Two Cell Type  mean_distance\n7  natural killer cell      57.099449\n3           macrophage      56.992624\n1       dendritic cell      56.462073\n5             monocyte      55.526799\n2        lymphoid cell      47.074148\n\nTop 5 cell types in LN22921:\n   Level Two Cell Type  mean_distance\n0               b cell      82.039046\n1       dendritic cell      73.651623\n2        lymphoid cell      66.159509\n8               t cell      60.493650\n7  natural killer cell      57.361924\n\nBottom 5 cell types in LN22921:\n   Level Two Cell Type  mean_distance\n7  natural killer cell      57.361924\n3           macrophage      54.901756\n4            mast cell      52.593234\n5             monocyte      50.021763\n6          muscle cell      39.150671\n\nTop 5 cell types in LN24336:\n   Level Two Cell Type  mean_distance\n4            mast cell      85.567104\n7  natural killer cell      85.475053\n3           macrophage      79.116158\n2        lymphoid cell      71.342591\n0               b cell      64.496210\n\nBottom 5 cell types in LN24336:\n  Level Two Cell Type  mean_distance\n0              b cell      64.496210\n5            monocyte      60.846991\n1      dendritic cell      59.716750\n8              t cell      56.612429\n6         muscle cell      43.536294\n\nTop 5 cell types in LN27766:\n  Level Two Cell Type  mean_distance\n6         muscle cell      62.912204\n0              b cell      58.734683\n2       lymphoid cell      52.863464\n3          macrophage      51.519747\n5            monocyte      49.144810\n\nBottom 5 cell types in LN27766:\n   Level Two Cell Type  mean_distance\n5             monocyte      49.144810\n4            mast cell      43.276579\n1       dendritic cell      40.751088\n8               t cell      40.031514\n7  natural killer cell      35.518688\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in LN00560:\n  Level Two Cell Type  median_distance\n4           mast cell        96.167629\n5            monocyte        82.996331\n2       lymphoid cell        81.987260\n0              b cell        81.031234\n6         muscle cell        80.072416\n\nBottom 5 cell types in LN00560:\n   Level Two Cell Type  median_distance\n6          muscle cell        80.072416\n7  natural killer cell        79.778126\n8               t cell        78.881215\n3           macrophage        68.799241\n1       dendritic cell        57.716266\n\nTop 5 cell types in LN00837:\n   Level Two Cell Type  median_distance\n0               b cell        61.529348\n4            mast cell        55.672843\n8               t cell        54.434361\n3           macrophage        50.840886\n7  natural killer cell        50.561814\n\nBottom 5 cell types in LN00837:\n   Level Two Cell Type  median_distance\n7  natural killer cell        50.561814\n1       dendritic cell        48.013498\n5             monocyte        45.104939\n6          muscle cell        44.506487\n2        lymphoid cell        39.426220\n\nTop 5 cell types in LN22921:\n   Level Two Cell Type  median_distance\n0               b cell        72.283854\n1       dendritic cell        60.772678\n8               t cell        53.470688\n2        lymphoid cell        52.261744\n7  natural killer cell        51.657575\n\nBottom 5 cell types in LN22921:\n   Level Two Cell Type  median_distance\n7  natural killer cell        51.657575\n3           macrophage        47.901377\n4            mast cell        44.533122\n5             monocyte        40.595156\n6          muscle cell        28.447433\n\nTop 5 cell types in LN24336:\n   Level Two Cell Type  median_distance\n7  natural killer cell        75.480916\n4            mast cell        74.870233\n3           macrophage        67.811076\n2        lymphoid cell        58.007388\n0               b cell        53.491989\n\nBottom 5 cell types in LN24336:\n  Level Two Cell Type  median_distance\n0              b cell        53.491989\n1      dendritic cell        50.896772\n8              t cell        47.942598\n5            monocyte        44.274679\n6         muscle cell        30.191094\n\nTop 5 cell types in LN27766:\n  Level Two Cell Type  median_distance\n6         muscle cell        48.334648\n3          macrophage        48.035642\n5            monocyte        45.352857\n0              b cell        45.181006\n2       lymphoid cell        34.486844\n\nBottom 5 cell types in LN27766:\n   Level Two Cell Type  median_distance\n2        lymphoid cell        34.486844\n4            mast cell        33.640270\n8               t cell        32.772272\n1       dendritic cell        31.531565\n7  natural killer cell        30.995884\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nLN00560        86.25  50.97    59.1\nLN00837        65.65  42.86    65.3\nLN22921        69.03  43.55    63.1\nLN24336        62.29  41.07    65.9\nLN27766        48.66  35.83    73.6\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel Two Cell Type                      \nmuscle cell          65.17  48.20    74.0\nmast cell            54.53  40.09    73.5\nlymphoid cell        69.90  50.05    71.6\nmonocyte             57.09  39.95    70.0\ndendritic cell       62.58  43.15    69.0\nt cell               62.64  40.69    65.0\nb cell               74.12  47.83    64.5\nnatural killer cell  60.56  38.98    64.4\nmacrophage           60.91  38.83    63.7\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell:activated\nLN00560\n89.268466\n82.035282\n8.847019\n199.985969\n\n\n1\nb cell:activated\nLN00837\n103.892159\n103.148832\n10.202282\n199.981139\n\n\n2\nb cell:activated\nLN22921\n109.313037\n109.134587\n8.085613\n199.973049\n\n\n3\nb cell:activated\nLN24336\n78.439047\n66.929947\n7.599001\n199.996026\n\n\n4\nb cell:activated\nLN27766\n78.187423\n70.452448\n8.815551\n199.923293\n\n\n5\nb cell:germinal center\nLN00560\n110.025798\n109.326467\n8.953891\n199.992071\n\n\n6\nb cell:germinal center\nLN00837\n78.530974\n70.589407\n6.764925\n199.948612\n\n\n7\nb cell:germinal center\nLN22921\n126.062410\n132.087548\n8.704566\n199.997308\n\n\n8\nb cell:germinal center\nLN24336\n55.226407\n46.745157\n6.177177\n199.984885\n\n\n9\nb cell:germinal center\nLN27766\n38.146639\n31.915673\n6.971266\n199.976434\n\n\n10\nb cell:germinal center pre-plasmablast\nLN00560\n108.711157\n108.905779\n10.916243\n199.885291\n\n\n11\nb cell:germinal center pre-plasmablast\nLN00837\n83.001064\n73.750379\n10.423996\n198.874785\n\n\n12\nb cell:germinal center pre-plasmablast\nLN22921\n124.921662\n129.269694\n21.259508\n199.839116\n\n\n13\nb cell:germinal center pre-plasmablast\nLN24336\n49.903464\n44.611971\n9.241914\n199.310578\n\n\n14\nb cell:germinal center pre-plasmablast\nLN27766\n35.862025\n30.864602\n9.355446\n185.874318\n\n\n15\nb cell:interferon\nLN00560\n102.444714\n99.240528\n12.591493\n199.567126\n\n\n16\nb cell:interferon\nLN00837\n114.785742\n112.568316\n11.572951\n199.377967\n\n\n17\nb cell:interferon\nLN22921\n131.162456\n139.595461\n10.238354\n199.992291\n\n\n18\nb cell:interferon\nLN24336\n110.398002\n112.429843\n9.327697\n199.967757\n\n\n19\nb cell:interferon\nLN27766\n105.614725\n104.382767\n10.816878\n197.792760\n\n\n20\nb cell:memory\nLN00560\n102.444467\n100.377290\n4.875021\n199.999560\n\n\n21\nb cell:memory\nLN00837\n78.391621\n70.584824\n6.930883\n199.990502\n\n\n22\nb cell:memory\nLN22921\n79.602200\n69.989911\n4.797734\n199.999849\n\n\n23\nb cell:memory\nLN24336\n80.076569\n70.279767\n5.385425\n199.999276\n\n\n24\nb cell:memory\nLN27766\n63.402763\n51.599412\n7.332202\n199.999790\n\n\n25\nb cell:naive\nLN00560\n69.258328\n54.441120\n6.145788\n199.999931\n\n\n26\nb cell:naive\nLN00837\n76.218061\n67.309817\n8.581020\n199.947632\n\n\n27\nb cell:naive\nLN22921\n92.860766\n88.747737\n7.604196\n199.990872\n\n\n28\nb cell:naive\nLN24336\n59.469003\n50.735010\n6.191827\n199.997376\n\n\n29\nb cell:naive\nLN27766\n75.836945\n66.107927\n8.170217\n199.982514\n\n\n30\nb cell:pre-germinal center\nLN00560\n125.145570\n131.985475\n10.090936\n199.946647\n\n\n31\nb cell:pre-germinal center\nLN00837\n91.106536\n86.702315\n11.493943\n199.388265\n\n\n32\nb cell:pre-germinal center\nLN22921\n132.997491\n140.357258\n9.438865\n199.996039\n\n\n33\nb cell:pre-germinal center\nLN24336\n105.067771\n103.209786\n9.577587\n199.794374\n\n\n34\nb cell:pre-germinal center\nLN27766\n106.766845\n109.227324\n10.393205\n199.091629\n\n\n35\nb cell:proliferating\nLN00560\n74.076170\n61.983066\n6.553306\n199.999329\n\n\n36\nb cell:proliferating\nLN00837\n51.889082\n42.257876\n6.638355\n199.729762\n\n\n37\nb cell:proliferating\nLN22921\n85.020031\n73.684262\n5.545646\n199.994709\n\n\n38\nb cell:proliferating\nLN24336\n51.541644\n44.761244\n6.192560\n199.986801\n\n\n39\nb cell:proliferating\nLN27766\n37.535815\n31.282443\n6.945505\n199.958507\n\n\n40\ndendritic cell:conventional 1\nLN00560\n74.747687\n65.742189\n8.728357\n199.915652\n\n\n41\ndendritic cell:conventional 1\nLN00837\n56.373332\n49.048383\n10.157812\n195.342718\n\n\n42\ndendritic cell:conventional 1\nLN22921\n54.710012\n47.481574\n7.840607\n199.269117\n\n\n43\ndendritic cell:conventional 1\nLN24336\n120.905504\n124.830580\n9.217633\n199.995753\n\n\n44\ndendritic cell:conventional 1\nLN27766\n38.420549\n34.650392\n9.251431\n198.827691\n\n\n45\ndendritic cell:conventional 2\nLN00560\n68.057708\n57.691652\n7.978659\n199.949543\n\n\n46\ndendritic cell:conventional 2\nLN00837\n54.012741\n45.497958\n6.952205\n199.902788\n\n\n47\ndendritic cell:conventional 2\nLN22921\n48.714428\n41.297008\n7.880744\n199.807328\n\n\n48\ndendritic cell:conventional 2\nLN24336\n129.199183\n136.077984\n8.925008\n199.994250\n\n\n49\ndendritic cell:conventional 2\nLN27766\n50.585663\n45.848785\n9.638823\n196.531393\n\n\n50\ndendritic cell:follicular\nLN00560\n90.484649\n85.545859\n6.239511\n199.836667\n\n\n51\ndendritic cell:follicular\nLN00837\n68.051364\n50.274675\n9.376279\n199.972438\n\n\n52\ndendritic cell:follicular\nLN22921\n46.702944\n32.311309\n7.006536\n199.945312\n\n\n53\ndendritic cell:follicular\nLN24336\n46.933889\n37.744882\n8.222905\n198.852000\n\n\n54\ndendritic cell:follicular\nLN27766\n63.576654\n50.547417\n7.463081\n199.936083\n\n\n55\ndendritic cell:migratory\nLN00560\n74.874860\n65.090342\n8.664038\n199.904567\n\n\n56\ndendritic cell:migratory\nLN00837\n67.620372\n61.629700\n10.996842\n199.452052\n\n\n57\ndendritic cell:migratory\nLN22921\n63.298214\n56.380191\n10.370947\n194.049890\n\n\n58\ndendritic cell:migratory\nLN24336\n120.640773\n127.698045\n9.189187\n199.945018\n\n\n59\ndendritic cell:migratory\nLN27766\n43.524350\n37.308495\n10.455990\n163.623264\n\n\n60\ndendritic cell:plasmacytoid\nLN00560\n65.255968\n51.800420\n6.239585\n199.990815\n\n\n61\ndendritic cell:plasmacytoid\nLN00837\n54.379345\n47.567074\n6.578968\n198.465924\n\n\n62\ndendritic cell:plasmacytoid\nLN22921\n98.059750\n93.010721\n8.675605\n199.967413\n\n\n63\ndendritic cell:plasmacytoid\nLN24336\n53.708142\n48.208903\n7.264940\n199.760738\n\n\n64\ndendritic cell:plasmacytoid\nLN27766\n31.272411\n27.099603\n7.060869\n199.496027\n\n\n65\nlymphoid cell:innate\nLN00560\n87.916868\n81.987260\n6.472932\n199.985560\n\n\n66\nlymphoid cell:innate\nLN00837\n47.074148\n39.426220\n6.102839\n199.566202\n\n\n67\nlymphoid cell:innate\nLN22921\n66.159509\n52.261744\n5.680996\n199.945578\n\n\n68\nlymphoid cell:innate\nLN24336\n71.342591\n58.007388\n6.837350\n199.999774\n\n\n69\nlymphoid cell:innate\nLN27766\n52.863464\n34.486844\n6.130197\n199.989882\n\n\n70\nmacrophage\nLN00560\n78.607505\n68.799241\n7.336973\n199.994850\n\n\n71\nmacrophage\nLN00837\n56.992624\n50.840886\n9.008524\n199.753164\n\n\n72\nmacrophage\nLN22921\n54.901756\n47.901377\n6.583548\n199.929894\n\n\n73\nmacrophage\nLN24336\n79.116158\n67.811076\n7.957836\n199.937893\n\n\n74\nmacrophage\nLN27766\n51.519747\n48.035642\n7.765481\n197.595104\n\n\n75\nmast cell\nLN00560\n99.372310\n96.167629\n10.595659\n199.849460\n\n\n76\nmast cell\nLN00837\n65.670488\n55.672843\n10.448412\n197.309722\n\n\n77\nmast cell\nLN22921\n52.593234\n44.533122\n5.595661\n198.746019\n\n\n78\nmast cell\nLN24336\n85.567104\n74.870233\n9.498461\n199.956401\n\n\n79\nmast cell\nLN27766\n43.276579\n33.640270\n8.008464\n199.891157\n\n\n80\nmonocyte\nLN00560\n89.144747\n82.996331\n7.532715\n199.991027\n\n\n81\nmonocyte\nLN00837\n55.526799\n45.104939\n8.037716\n199.980528\n\n\n82\nmonocyte\nLN22921\n50.021763\n40.595156\n5.302953\n199.957450\n\n\n83\nmonocyte\nLN24336\n60.846991\n44.274679\n7.100671\n199.964176\n\n\n84\nmonocyte\nLN27766\n49.144810\n45.352857\n7.274465\n199.927731\n\n\n85\nmuscle cell:smooth\nLN00560\n86.522830\n80.072416\n7.366499\n199.827904\n\n\n86\nmuscle cell:smooth\nLN00837\n59.032529\n44.506487\n9.537860\n196.964611\n\n\n87\nmuscle cell:smooth\nLN22921\n39.150671\n28.447433\n6.260871\n199.593551\n\n\n88\nmuscle cell:smooth\nLN24336\n43.536294\n30.191094\n7.974461\n199.351793\n\n\n89\nmuscle cell:smooth\nLN27766\n62.912204\n48.334648\n6.110041\n199.979704\n\n\n90\nnatural killer cell\nLN00560\n86.771851\n79.778126\n6.896002\n199.981161\n\n\n91\nnatural killer cell\nLN00837\n57.099449\n50.561814\n7.570372\n199.852375\n\n\n92\nnatural killer cell\nLN22921\n57.361924\n51.657575\n6.314864\n199.963468\n\n\n93\nnatural killer cell\nLN24336\n85.475053\n75.480916\n6.704395\n199.995869\n\n\n94\nnatural killer cell\nLN27766\n35.518688\n30.995884\n5.664908\n199.029670\n\n\n95\nplasma cell\nLN00560\n72.331097\n59.404645\n7.521666\n199.951464\n\n\n96\nplasma cell\nLN00837\n44.038633\n35.479895\n6.715191\n199.593083\n\n\n97\nplasma cell\nLN22921\n57.740290\n52.704438\n6.326851\n199.734748\n\n\n98\nplasma cell\nLN24336\n46.465649\n41.440832\n6.788876\n199.974351\n\n\n99\nplasma cell\nLN27766\n71.756242\n57.171075\n7.824266\n199.998972\n\n\n100\nt cell:cd4+ alpha-beta effector\nLN00560\n95.993355\n91.765471\n6.121488\n199.999549\n\n\n101\nt cell:cd4+ alpha-beta effector\nLN00837\n84.232618\n72.495092\n9.560197\n199.960420\n\n\n102\nt cell:cd4+ alpha-beta effector\nLN22921\n59.880497\n51.975392\n5.481371\n199.966756\n\n\n103\nt cell:cd4+ alpha-beta effector\nLN24336\n49.530880\n41.003228\n4.235994\n199.994424\n\n\n104\nt cell:cd4+ alpha-beta effector\nLN27766\n38.377382\n30.867354\n7.735967\n199.330477\n\n\n105\nt cell:cd4+ alpha-beta naive thymus-derived\nLN00560\n78.090613\n68.183839\n6.663214\n199.996131\n\n\n106\nt cell:cd4+ alpha-beta naive thymus-derived\nLN00837\n65.922173\n58.227278\n7.790914\n199.942717\n\n\n107\nt cell:cd4+ alpha-beta naive thymus-derived\nLN22921\n65.158677\n57.901879\n6.411245\n199.952146\n\n\n108\nt cell:cd4+ alpha-beta naive thymus-derived\nLN24336\n63.160522\n53.431121\n6.536176\n199.997767\n\n\n109\nt cell:cd4+ alpha-beta naive thymus-derived\nLN27766\n51.208692\n41.425802\n8.157567\n199.874886\n\n\n110\nt cell:cd8+\nLN00560\n86.615013\n79.180151\n7.102615\n199.996365\n\n\n111\nt cell:cd8+\nLN00837\n55.437898\n46.240026\n6.556713\n199.971033\n\n\n112\nt cell:cd8+\nLN22921\n56.181049\n49.659042\n6.259795\n199.940448\n\n\n113\nt cell:cd8+\nLN24336\n55.152276\n48.343775\n6.651539\n199.966610\n\n\n114\nt cell:cd8+\nLN27766\n35.375142\n30.384688\n7.360558\n198.852391\n\n\n115\nt cell:cd8+ cd161+\nLN00560\n90.056320\n84.555500\n7.182956\n199.994788\n\n\n116\nt cell:cd8+ cd161+\nLN00837\n59.376177\n44.384574\n9.255595\n199.566477\n\n\n117\nt cell:cd8+ cd161+\nLN22921\n66.069266\n59.345402\n6.111516\n199.991352\n\n\n118\nt cell:cd8+ cd161+\nLN24336\n48.486466\n40.243374\n7.509943\n198.654975\n\n\n119\nt cell:cd8+ cd161+\nLN27766\n37.296980\n29.442390\n8.137273\n199.500140\n\n\n120\nt cell:follicular helper\nLN00560\n82.058488\n73.460999\n5.603447\n199.999450\n\n\n121\nt cell:follicular helper\nLN00837\n61.714580\n51.712027\n7.083180\n199.822547\n\n\n122\nt cell:follicular helper\nLN22921\n63.786746\n57.161618\n6.077661\n199.989836\n\n\n123\nt cell:follicular helper\nLN24336\n54.536331\n46.164723\n6.099143\n199.990253\n\n\n124\nt cell:follicular helper\nLN27766\n42.271050\n35.354972\n7.276333\n199.864371\n\n\n125\nt cell:mature natural killer\nLN00560\n96.336149\n93.203428\n9.809964\n199.942835\n\n\n126\nt cell:mature natural killer\nLN00837\n67.373921\n52.184751\n8.295802\n199.948155\n\n\n127\nt cell:mature natural killer\nLN22921\n54.308640\n46.321960\n7.835377\n199.907410\n\n\n128\nt cell:mature natural killer\nLN24336\n47.357061\n39.144706\n6.153474\n199.952564\n\n\n129\nt cell:mature natural killer\nLN27766\n44.643981\n32.162381\n7.923749\n199.151376\n\n\n130\nt cell:regulatory\nLN00560\n100.303430\n96.757788\n9.233340\n199.998294\n\n\n131\nt cell:regulatory\nLN00837\n77.401648\n68.048508\n8.143654\n199.771234\n\n\n132\nt cell:regulatory\nLN22921\n52.599146\n45.693505\n5.852943\n199.996959\n\n\n133\nt cell:regulatory\nLN24336\n56.138669\n47.849818\n7.000655\n199.993808\n\n\n134\nt cell:regulatory\nLN27766\n31.841954\n26.530015\n5.864464\n199.380478\n\n\n135\nt cell:tim3+\nLN00560\n90.805956\n84.536161\n7.447616\n199.922781\n\n\n136\nt cell:tim3+\nLN00837\n65.234680\n60.787009\n13.362004\n175.288619\n\n\n137\nt cell:tim3+\nLN22921\n51.362474\n44.746693\n8.064281\n197.946082\n\n\n138\nt cell:tim3+\nLN24336\n59.124041\n50.708968\n7.018645\n199.806968\n\n\n139\nt cell:tim3+\nLN27766\n29.328329\n24.992139\n8.628643\n169.319098\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in LN00560:\n                    Level Three Cell Type  mean_distance\n6              b cell:pre-germinal center     125.145570\n1                  b cell:germinal center     110.025798\n2  b cell:germinal center pre-plasmablast     108.711157\n3                       b cell:interferon     102.444714\n4                           b cell:memory     102.444467\n\nBottom 5 cell types in LN00560:\n            Level Three Cell Type  mean_distance\n7            b cell:proliferating      74.076170\n19                    plasma cell      72.331097\n5                    b cell:naive      69.258328\n9   dendritic cell:conventional 2      68.057708\n12    dendritic cell:plasmacytoid      65.255968\n\nTop 5 cell types in LN00837:\n                     Level Three Cell Type  mean_distance\n3                        b cell:interferon     114.785742\n0                         b cell:activated     103.892159\n6               b cell:pre-germinal center      91.106536\n20         t cell:cd4+ alpha-beta effector      84.232618\n2   b cell:germinal center pre-plasmablast      83.001064\n\nBottom 5 cell types in LN00837:\n            Level Three Cell Type  mean_distance\n12    dendritic cell:plasmacytoid      54.379345\n9   dendritic cell:conventional 2      54.012741\n7            b cell:proliferating      51.889082\n13           lymphoid cell:innate      47.074148\n19                    plasma cell      44.038633\n\nTop 5 cell types in LN22921:\n                    Level Three Cell Type  mean_distance\n6              b cell:pre-germinal center     132.997491\n3                       b cell:interferon     131.162456\n1                  b cell:germinal center     126.062410\n2  b cell:germinal center pre-plasmablast     124.921662\n0                        b cell:activated     109.313037\n\nBottom 5 cell types in LN22921:\n            Level Three Cell Type  mean_distance\n27                   t cell:tim3+      51.362474\n16                       monocyte      50.021763\n9   dendritic cell:conventional 2      48.714428\n10      dendritic cell:follicular      46.702944\n17             muscle cell:smooth      39.150671\n\nTop 5 cell types in LN24336:\n            Level Three Cell Type  mean_distance\n9   dendritic cell:conventional 2     129.199183\n8   dendritic cell:conventional 1     120.905504\n11       dendritic cell:migratory     120.640773\n3               b cell:interferon     110.398002\n6      b cell:pre-germinal center     105.067771\n\nBottom 5 cell types in LN24336:\n            Level Three Cell Type  mean_distance\n23             t cell:cd8+ cd161+      48.486466\n25  t cell:mature natural killer       47.357061\n10      dendritic cell:follicular      46.933889\n19                    plasma cell      46.465649\n17             muscle cell:smooth      43.536294\n\nTop 5 cell types in LN27766:\n         Level Three Cell Type  mean_distance\n6   b cell:pre-germinal center     106.766845\n3            b cell:interferon     105.614725\n0             b cell:activated      78.187423\n5                 b cell:naive      75.836945\n19                 plasma cell      71.756242\n\nBottom 5 cell types in LN27766:\n          Level Three Cell Type  mean_distance\n18          natural killer cell      35.518688\n22                  t cell:cd8+      35.375142\n26            t cell:regulatory      31.841954\n12  dendritic cell:plasmacytoid      31.272411\n27                 t cell:tim3+      29.328329\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in LN00560:\n                    Level Three Cell Type  median_distance\n6              b cell:pre-germinal center       131.985475\n1                  b cell:germinal center       109.326467\n2  b cell:germinal center pre-plasmablast       108.905779\n4                           b cell:memory       100.377290\n3                       b cell:interferon        99.240528\n\nBottom 5 cell types in LN00560:\n            Level Three Cell Type  median_distance\n7            b cell:proliferating        61.983066\n19                    plasma cell        59.404645\n9   dendritic cell:conventional 2        57.691652\n5                    b cell:naive        54.441120\n12    dendritic cell:plasmacytoid        51.800420\n\nTop 5 cell types in LN00837:\n                     Level Three Cell Type  median_distance\n3                        b cell:interferon       112.568316\n0                         b cell:activated       103.148832\n6               b cell:pre-germinal center        86.702315\n2   b cell:germinal center pre-plasmablast        73.750379\n20         t cell:cd4+ alpha-beta effector        72.495092\n\nBottom 5 cell types in LN00837:\n   Level Three Cell Type  median_distance\n17    muscle cell:smooth        44.506487\n23    t cell:cd8+ cd161+        44.384574\n7   b cell:proliferating        42.257876\n13  lymphoid cell:innate        39.426220\n19           plasma cell        35.479895\n\nTop 5 cell types in LN22921:\n                    Level Three Cell Type  median_distance\n6              b cell:pre-germinal center       140.357258\n3                       b cell:interferon       139.595461\n1                  b cell:germinal center       132.087548\n2  b cell:germinal center pre-plasmablast       129.269694\n0                        b cell:activated       109.134587\n\nBottom 5 cell types in LN22921:\n            Level Three Cell Type  median_distance\n15                      mast cell        44.533122\n9   dendritic cell:conventional 2        41.297008\n16                       monocyte        40.595156\n10      dendritic cell:follicular        32.311309\n17             muscle cell:smooth        28.447433\n\nTop 5 cell types in LN24336:\n            Level Three Cell Type  median_distance\n9   dendritic cell:conventional 2       136.077984\n11       dendritic cell:migratory       127.698045\n8   dendritic cell:conventional 1       124.830580\n3               b cell:interferon       112.429843\n6      b cell:pre-germinal center       103.209786\n\nBottom 5 cell types in LN24336:\n              Level Three Cell Type  median_distance\n20  t cell:cd4+ alpha-beta effector        41.003228\n23               t cell:cd8+ cd161+        40.243374\n25    t cell:mature natural killer         39.144706\n10        dendritic cell:follicular        37.744882\n17               muscle cell:smooth        30.191094\n\nTop 5 cell types in LN27766:\n         Level Three Cell Type  median_distance\n6   b cell:pre-germinal center       109.227324\n3            b cell:interferon       104.382767\n0             b cell:activated        70.452448\n5                 b cell:naive        66.107927\n19                 plasma cell        57.171075\n\nBottom 5 cell types in LN27766:\n          Level Three Cell Type  median_distance\n22                  t cell:cd8+        30.384688\n23           t cell:cd8+ cd161+        29.442390\n12  dendritic cell:plasmacytoid        27.099603\n26            t cell:regulatory        26.530015\n27                 t cell:tim3+        24.992139\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nLN00560        86.25  50.97    59.1\nLN00837        65.65  42.86    65.3\nLN22921        69.03  43.55    63.1\nLN24336        62.29  41.07    65.9\nLN27766        48.66  35.83    73.6\n\nCell Type Variability Analysis (sorted by CV):\n                                               mean    std  CV (%)\nLevel Three Cell Type                                             \nmuscle cell:smooth                            65.17  48.20    74.0\nmast cell                                     54.53  40.09    73.5\ndendritic cell:follicular                     65.68  48.16    73.3\nlymphoid cell:innate                          69.90  50.05    71.6\nt cell:mature natural killer                  54.65  39.02    71.4\nt cell:regulatory                             55.45  39.00    70.3\nb cell:germinal center                        70.57  49.44    70.1\nmonocyte                                      57.09  39.95    70.0\nb cell:proliferating                          65.55  45.77    69.8\ndendritic cell:conventional 2                 66.62  45.99    69.0\ndendritic cell:plasmacytoid                   59.26  40.45    68.3\nt cell:cd4+ alpha-beta effector               68.30  45.44    66.5\nt cell:cd8+                                   61.29  40.36    65.9\nt cell:cd8+ cd161+                            66.32  42.96    64.8\nnatural killer cell                           60.56  38.98    64.4\ndendritic cell:conventional 1                 74.03  47.68    64.4\nt cell:tim3+                                  69.06  44.31    64.2\nb cell:naive                                  71.23  45.65    64.1\nmacrophage                                    60.91  38.83    63.7\nb cell:germinal center pre-plasmablast        52.90  33.19    62.7\ndendritic cell:migratory                      80.92  50.55    62.5\nt cell:follicular helper                      63.41  39.65    62.5\nt cell:cd4+ alpha-beta naive thymus-derived   64.99  40.45    62.2\nplasma cell                                   54.58  33.43    61.2\nb cell:memory                                 82.07  49.33    60.1\nb cell:activated                              87.40  49.44    56.6\nb cell:interferon                            115.91  51.01    44.0\nb cell:pre-germinal center                   124.16  48.98    39.4\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.",
    "crumbs": [
      "Distance Analysis: lymphnode-codex-yale"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html",
    "href": "data_processing__convert_to_cde_format.html",
    "title": "Data Processing: Convert to CDE Format",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport scanpy as sc\nimport shutil\n\npd.set_option('display.max_columns', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\norig_filedir = \"data-original\"\ndest_filedir = \"data-processed-nodes\"\n# Function to load your data\ndef load_data(path):\n    data = pd.read_csv(path)\n    return data\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")\ndef get_hubmap_uuid(hubmap_id):\n    # Construct the API URL\n    base_url = \"https://entity.api.hubmapconsortium.org/entities/\"\n    url = base_url + hubmap_id\n\n    try:\n        # Send GET request to the API\n        response = requests.get(url)\n        \n        # Check if the request was successful\n        response.raise_for_status()\n        \n        # Parse the JSON response\n        data = response.json()\n        \n        # Extract the UUID\n        uuid = data.get(\"uuid\")\n        \n        if uuid:\n            return uuid\n        else:\n            return \"UUID not found in the response\"\n    \n    except requests.RequestException as e:\n        return f\"An error occurred: {str(e)}\"\nprint(len(os.listdir(os.path.join(basepath, orig_filedir))), os.listdir(os.path.join(basepath, orig_filedir)))\n\n14 ['bonemarrow-codex-chop', 'colon-cycif-sorgerlab', 'colon-xenium-stanford', 'esophagus-codex-stanford', 'intestine-codex-stanford', 'lung-codex-urmc', 'lymphnode-codex-yale', 'maternalfetalinterface-mibitof-stanford', 'oralcavity-codex-czi', 'pancreas-geomx-ufl', 'skin-celldive-ge', 'skin-confocal-sorgerlab', 'spleen-codex-ufl', 'tonsil-codex-stanford']\n# Create destination directory. Overwrite if it exists.\nif os.path.exists(os.path.join(basepath, dest_filedir)):\n    shutil.rmtree(os.path.join(basepath, dest_filedir))\n    print(f\"Directory '{dest_filedir}' already exists and has been removed. New directory will be created.\")\nelse:\n    print(f\"Directory '{dest_filedir}' does not exist and will be created.\")\nos.makedirs(os.path.join(basepath, dest_filedir), exist_ok=False)\n\nDirectory 'data-processed-nodes' already exists and has been removed. New directory will be created.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#intestine-codex-stanford",
    "href": "data_processing__convert_to_cde_format.html#intestine-codex-stanford",
    "title": "Data Processing: Convert to CDE Format",
    "section": "intestine-codex-stanford",
    "text": "intestine-codex-stanford\n\ndataset_name = \"intestine-codex-stanford\"\n\nraw_filepath = os.path.join(basepath, orig_filedir, dataset_name, \"23_09_CODEX_HuBMAP_alldata_Dryad_merged.csv\")\n\ndata_new = load_data(raw_filepath)\n\n# Filename to HuBMAP ID mapping.\nmapping_file = os.path.join(basepath, orig_filedir, dataset_name, \"filename-to-hubmap-mapping.csv\")\nmapping_df = load_data(mapping_file)\n\n# Convert the mapping dataframe to dictionary. Key is Filename and value is HuBMAP ID.\nfilename_to_id = dict(zip(mapping_df[\"Filename\"], mapping_df[\"HuBMAP ID\"]))\n\n# Store types of unique regions before splitting\n# column is \"unique_region\"\nunique_regions = data_new[\"unique_region\"].unique()\n\ndata_new.rename(columns={\"cell_type\": \"Cell Type\"}, inplace=True)\n\n# Store types of cell before splitting\ncell_types = data_new[\"Cell Type\"].unique()\nprint(cell_types)\n\n# Take the column 'unique_region' to split from the actual column names of data frame\ncolumn_to_split = \"unique_region\"\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor label in unique_regions:\n    # If label contains \"extra-nodes\" then skip.\n    if \"extra\" in label:\n        continue\n\n    # Create another sub data frame using the value for the value of the column each time\n    df_label = data_new[data_new[column_to_split] == label]\n\n    df_Region_1 = df_label[[\"x\", \"y\", \"Cell Type\"]]\n\n    # Calculate μm per px\n    micro_per_pixel = 0.37742\n    scale = micro_per_pixel  # to convert given pixel in micro meter unit\n    df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n    df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n\n    label_clean = label.replace(\"-\", \"_\")\n    label_clean = label_clean.replace(\" \", \"\")\n    # Write to the file using pandas to_csv\n    df_Region_1.to_csv(f\"{target_dir}/{label_clean}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n    # Generate dataset.json file for HRAPoP. Get the UUID for the HuBMAP ID from Entity API.\n    id = \"https://entity.api.hubmapconsortium.org/entities/\" + get_hubmap_uuid(filename_to_id[f\"{label_clean}-nodes\"])\n    dataset_json = {\n        \"@id\": id\n    }\n\n    with open(f\"{target_dir}/{label_clean}-dataset.json\", \"w\") as f:\n        json.dump(dataset_json, f, indent=4)\n\n['NK' 'Enterocyte' 'MUC1+ Enterocyte' 'TA' 'CD66+ Enterocyte' 'Paneth'\n 'Smooth muscle' 'M1 Macrophage' 'Goblet' 'Neuroendocrine'\n 'CD57+ Enterocyte' 'Lymphatic' 'CD8+ T' 'DC' 'M2 Macrophage' 'B'\n 'Neutrophil' 'Endothelial' 'Cycling TA' 'Plasma' 'CD4+ T cell' 'Stroma'\n 'Nerve' 'ICC' 'CD7+ Immune']\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/intestine-codex-stanford' created successfully.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#tonsil-codex-stanford",
    "href": "data_processing__convert_to_cde_format.html#tonsil-codex-stanford",
    "title": "Data Processing: Convert to CDE Format",
    "section": "tonsil-codex-stanford",
    "text": "tonsil-codex-stanford\n\ndataset_name = \"tonsil-codex-stanford\"\n\nraw_filepath = os.path.join(basepath, orig_filedir, dataset_name, \"BE_Tonsil_l3_dryad.csv\")\n\ndata_new = load_data(raw_filepath)\n\n# Store types of unique regions before splitting\n# column is \"unique_region\"\nunique_regions = data_new[\"sample_name\"].unique()\n\ndata_new.rename(columns={\"cell_type\": \"Cell Type\"}, inplace=True)\n\n# Store types of cell before splitting\ncell_types = data_new[\"Cell Type\"].unique()\nprint(cell_types)\n\n# Take the column 'unique_region' to split from the actual column names of data frame\ncolumn_to_split = \"sample_name\"\n\nfor label in unique_regions:\n    # Create another sub data frame using the value for the value of the column each time\n    if label == \"tonsil\":\n        df_label = data_new[data_new[column_to_split] == label]\n\n        df_Region_1 = df_label[[\"x\", \"y\", \"Cell Type\"]]\n\n        # Calculate μm per px\n        micro_per_pixel = 0.377  \n        scale = micro_per_pixel  # to convert given pixel in micro meter unit\n        df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n        df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n\n        target_dir = os.path.join(basepath, dest_filedir, dataset_name)\n        create_directory(target_dir)\n        label_clean = label.replace(\"-\", \"_\")\n        label_clean = label_clean.replace(\" \", \"\")\n        # Write to the file using pandas to_csv\n        df_Region_1.to_csv(f\"{target_dir}/{label_clean}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n['Innate' 'PDPN' 'Endothelial' 'B' 'T' 'Squamous_epithelial' 'Stroma'\n 'SmoothMuscle' 'Plasma' 'Nerve' 'Glandular_epi' 'Secretory_epithelial'\n 'Paneth']\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/tonsil-codex-stanford' created successfully.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#esophagus-codex-stanford",
    "href": "data_processing__convert_to_cde_format.html#esophagus-codex-stanford",
    "title": "Data Processing: Convert to CDE Format",
    "section": "esophagus-codex-stanford",
    "text": "esophagus-codex-stanford\n\ndataset_name = \"esophagus-codex-stanford\"\n\nraw_filepath = os.path.join(basepath, orig_filedir, dataset_name, \"BE_Tonsil_l3_dryad.csv\")\n\ndata_new = load_data(raw_filepath)\n\n# Store types of unique regions before splitting\n# column is \"unique_region\"\nunique_regions = data_new[\"sample_name\"].unique()\n\ndata_new.rename(columns={\"cell_type\": \"Cell Type\"}, inplace=True)\n\n# Store types of cell before splitting\ncell_types = data_new[\"Cell Type\"].unique()\nprint(cell_types)\n\n# Take the column 'unique_region' to split from the actual column names of data frame\ncolumn_to_split = \"sample_name\"\n\nfor label in unique_regions:\n    # Create another sub data frame using the value for the value of the column each time\n    if label == \"Barretts Esophagus\":\n        df_label = data_new[data_new[column_to_split] == label]\n\n        df_Region_1 = df_label[[\"x\", \"y\", \"Cell Type\"]]\n\n        # Calculate μm per px\n        micro_per_pixel = 0.377  \n        scale = micro_per_pixel  # to convert given pixel in micro meter unit\n        df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n        df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n\n        target_dir = os.path.join(basepath, dest_filedir, dataset_name)\n        create_directory(target_dir)\n        \n        # Write to the file using pandas to_csv\n        df_Region_1.to_csv(f\"{target_dir}/esophagus-nodes.csv\", index=False, header=True, mode=\"w\")\n\n['Innate' 'PDPN' 'Endothelial' 'B' 'T' 'Squamous_epithelial' 'Stroma'\n 'SmoothMuscle' 'Plasma' 'Nerve' 'Glandular_epi' 'Secretory_epithelial'\n 'Paneth']\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/esophagus-codex-stanford' created successfully.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#colon-cycif-sorgerlab",
    "href": "data_processing__convert_to_cde_format.html#colon-cycif-sorgerlab",
    "title": "Data Processing: Convert to CDE Format",
    "section": "colon-cycif-sorgerlab",
    "text": "colon-cycif-sorgerlab\n\ndataset_name = \"colon-cycif-sorgerlab\"\n\nraw_filedir = os.path.join(basepath, orig_filedir, dataset_name)\n\n# Preprocess to merge CT labels.\n# List of filenames\nfilenames = [\n    \"Reg_Celltype_CRC01002.csv\", \"Reg_Celltype_CRC01007.csv\", \"Reg_Celltype_CRC01014.csv\", \n    \"Reg_Celltype_CRC01020.csv\", \"Reg_Celltype_CRC01025.csv\", \"Reg_Celltype_CRC01029.csv\", \n    \"Reg_Celltype_CRC01034.csv\", \"Reg_Celltype_CRC01039.csv\", \"Reg_Celltype_CRC01044.csv\", \n    \"Reg_Celltype_CRC01049.csv\", \"Reg_Celltype_CRC01050.csv\", \"Reg_Celltype_CRC01051.csv\", \n    \"Reg_Celltype_CRC01052.csv\", \"Reg_Celltype_CRC01054.csv\", \"Reg_Celltype_CRC01059.csv\", \n    \"Reg_Celltype_CRC01064.csv\", \"Reg_Celltype_CRC01069.csv\", \"Reg_Celltype_CRC01074.csv\", \n    \"Reg_Celltype_CRC01078.csv\", \"Reg_Celltype_CRC01084.csv\", \"Reg_Celltype_CRC01086.csv\", \n    \"Reg_Celltype_CRC01091.csv\", \"Reg_Celltype_CRC01097.csv\", \"Reg_Celltype_CRC01102.csv\", \n    \"Reg_Celltype_CRC01106.csv\"\n]\n\n# Read CSV files, add filename column, and combine\ndf_list = []\nfor filename in filenames:\n    df = pd.read_csv(os.path.join(raw_filedir, filename))\n    # Extract CRCXXXXX part from the filename\n    crc_code = filename.split('.')[0].split('_')[2]\n    df['Layer'] = crc_code\n    df_list.append(df)\n\ncombined_df = pd.concat(df_list, ignore_index=True)\n\n# Read Celltype_reference_table.csv\nref_df = pd.read_csv(os.path.join(raw_filedir, \"Celltype_reference_table.csv\"))\n\n# Create a dictionary for mapping NewType to Name and Category\nref_dict = ref_df.set_index('NewType')[['Name', 'Category']].to_dict('index')\n\n# Add new columns \"Cell Type\" and \"Category\" to the combined csv file\ncombined_df['Cell Type'] = combined_df['NewType'].map(lambda x: ref_dict.get(x, {}).get('Name', ''))\ncombined_df['Category'] = combined_df['NewType'].map(lambda x: ref_dict.get(x, {}).get('Category', ''))\n\ncombined_df.rename(columns={\"Xr\": \"x\", \"Yr\": \"y\"}, inplace=True)\n\ndata_new = combined_df \n\nunique_regions = data_new[\"Layer\"].unique()\n\ncell_types = data_new[\"Cell Type\"].unique()\nprint(cell_types)\n\ncolumn_to_split = \"Layer\"\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor label in unique_regions:\n    # Create another sub data frame using the value for the value of the column each time\n    df_label = data_new[data_new[column_to_split] == label]\n\n    df_Region_1 = df_label[[\"x\", \"y\", \"Cell Type\"]]\n\n    # Calculate μm per px\n    micro_per_pixel = 0.65\n    scale = micro_per_pixel  # to convert given pixel in micro meter unit\n    df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n    df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n\n    # Write to the file using pandas to_csv\n    df_Region_1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n    # Generate dataset.json file for HRAPoP. Paper DOI: https://doi.org/10.1016/j.cell.2022.12.028\n    id = f\"https://doi.org/10.1016/j.cell.2022.12.028#{label}\"\n    dataset_json = {\n        \"@id\": id\n    }\n\n    with open(f\"{target_dir}/{label}-dataset.json\", \"w\") as f:\n        json.dump(dataset_json, f, indent=4)\n\n['Other' 'PDL1+ Macrophage' 'Tumor/Epithelial' 'Lymphocyte(III)' 'Treg'\n 'Endothelial' 'Muscle/Fibroblast' 'Tc cell' 'PDL1+ Tumor/Epithelial'\n 'Macrophage(IV)' 'B cells' 'PD1+ Tc' 'Macrophage(III)' 'DN Lymphocyte'\n 'DP Lymphocyte' 'T helper' 'Macrophage(II)' 'Macrophage(I)'\n 'Ki67+ Tumor/Epithelial' 'PD1+ T helper' 'PDL1+ lymphocyte']\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/colon-cycif-sorgerlab' created successfully.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#colon-xenium-stanford",
    "href": "data_processing__convert_to_cde_format.html#colon-xenium-stanford",
    "title": "Data Processing: Convert to CDE Format",
    "section": "colon-xenium-stanford",
    "text": "colon-xenium-stanford\n\ndataset_name = \"colon-xenium-stanford\"\n\nraw_filepath = os.path.join(basepath, orig_filedir, dataset_name, \"xenium_polyp_29sections.txt\")\n\ndata_new = pd.read_csv(raw_filepath, sep='\\t')\n\n# Store types of unique regions before splitting\n# column is \"unique_region\"\nunique_regions = data_new[\"layer\"].unique()\n\ndata_new.rename(columns={\"cell_type\": \"Cell Type\", \"x_align\": \"x\", \"y_align\": \"y\"}, inplace=True)\n\n# Store types of cell before splitting\ncell_types = data_new[\"Cell Type\"].unique()\nprint(cell_types)\n\n# Take the column 'unique_region' to split from the actual column names of data frame\ncolumn_to_split = \"layer\"\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor label in unique_regions:\n    # Create another sub data frame using the value for the value of the column each time\n    df_label = data_new[data_new[column_to_split] == label]\n\n    df_Region_1 = df_label[[\"x\", \"y\", \"Cell Type\"]]\n\n    # Write to the file using pandas to_csv\n    df_Region_1.to_csv(f\"{target_dir}/layer_{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n['Immature Goblet' 'Tuft' 'TA1' 'CD4+' 'Pericytes' 'Macrophages'\n 'CyclingTA' 'Cancer Associated Fibroblasts' 'Best4+ Enterocytes' 'Stem'\n 'CD8+' 'Endothelial' 'TA2' 'Myofibroblasts/Smooth Muscle 3'\n 'Unknown_lowcount' 'Myofibroblasts/Smooth Muscle 1' 'Crypt Fibroblasts 3'\n 'Crypt Fibroblasts 1' 'Glia' 'Crypt Fibroblasts 4' 'Adipocytes' 'Plasma'\n 'GC' 'Mast' 'Enteroendocrine' 'Tregs' 'Lymphatic endothelial cells'\n 'Goblet' 'Immature Enterocytes' 'Enterocyte Progenitors' 'Enterocytes'\n 'Myofibroblasts/Smooth Muscle 2' 'Naive T' 'Villus Fibroblasts WNT5B+'\n 'Naive B' 'Neurons' 'Memory B' 'Crypt Fibroblasts 2' 'ILCs' 'Unknown'\n 'DC']\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/colon-xenium-stanford' created successfully.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#lymphnode-codex-yale",
    "href": "data_processing__convert_to_cde_format.html#lymphnode-codex-yale",
    "title": "Data Processing: Convert to CDE Format",
    "section": "lymphnode-codex-yale",
    "text": "lymphnode-codex-yale\n\ndataset_name = \"lymphnode-codex-yale\"\n\nraw_filedir = os.path.join(basepath, orig_filedir, dataset_name)\n\nct = set()\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor raw_filename in os.listdir(raw_filedir):\n    data_new = load_data(os.path.join(raw_filedir, raw_filename))\n\n    data_new.rename(columns={\"celltype\": \"Cell Type\"}, inplace=True)\n\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].apply(lambda x: x.replace('Endo', 'Endothelial'))\n\n    cell_types = data_new[\"Cell Type\"].unique()\n    \n    for i in cell_types:\n        ct.add(i)\n\n    df_Region_1 = data_new[[\"x\", \"y\", \"Cell Type\"]]\n    \n    # Write to the file using pandas to_csv\n    label = raw_filename.split(\".\")[0].split(\"_\")[0]\n    df_Region_1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\nprint(ct)\n\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/lymphnode-codex-yale' created successfully.\n{'DC_CCR7+', 'B_plasma', 'Mast', 'T_CD8+_cytotoxic', 'Macrophages_M2', 'T_CD8+_naive', 'DC_pDC', 'VSMC', 'T_CD4+_TfH_GC', 'B_GC_DZ', 'B_naive', 'B_GC_LZ', 'T_CD4+', 'DC_cDC1', 'NK', 'B_mem', 'T_CD4+_naive', 'B_preGC', 'B_IFN', 'B_activated', 'T_CD4+_TfH', 'B_GC_prePB', 'Monocytes', 'NKT', 'Endothelial', 'T_CD8+_CD161+', 'T_TfR', 'T_TIM3+', 'DC_cDC2', 'FDC', 'T_Treg', 'Macrophages_M1', 'B_Cycling', 'ILC'}",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#maternalfetalinterface-mibitof-stanford",
    "href": "data_processing__convert_to_cde_format.html#maternalfetalinterface-mibitof-stanford",
    "title": "Data Processing: Convert to CDE Format",
    "section": "maternalfetalinterface-mibitof-stanford",
    "text": "maternalfetalinterface-mibitof-stanford\n\ndataset_name = \"maternalfetalinterface-mibitof-stanford\"\n\nraw_filepath = os.path.join(basepath, orig_filedir, dataset_name, \"Supplementary_table_3_single_cells_updated.csv\")\n\ndata = load_data(raw_filepath)\n\ndata_new = data[data['overlap_decidua'] == 1.0]\n\n# Store types of unique regions before splitting\n# column is \"unique_region\"\nunique_regions = data_new[\"Point\"].unique()\n\ndata_new.rename(columns={'centroid0': 'x', 'centroid1': 'y', 'lineage': 'Cell Type' }, inplace=True)\n\n# Store types of cell before splitting\ncell_types = data_new[\"Cell Type\"].unique()\nprint(cell_types)\n\n# Take the column 'unique_region' to split from the actual column names of data frame\ncolumn_to_split = \"Point\"\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor label in unique_regions:\n    # Create another sub data frame using the value for the value of the column each time\n    df_label = data_new[data_new[column_to_split] == label]\n\n    df_Region_1 = df_label[[\"x\", \"y\", \"Cell Type\"]]\n\n    # Calculate μm per px\n    micro_per_pixel = 0.391\n    scale = micro_per_pixel  # to convert given pixel in micro meter unit\n    df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n    df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n\n    # Write to the file using pandas to_csv\n    df_Region_1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n['Mac2a' 'other' 'NK1' 'Fibroblasts' 'NKT' 'Endothelial' 'Myofibroblasts'\n 'Mac1a' 'EVT1a' 'Mac1b' 'CD8T' 'EVT1b' 'Mac2c' 'NK2' 'muscle' 'NK3'\n 'EVT2' 'Mac2b' 'DC' 'Glandular' 'CD4T' 'EVT1c' 'NK4' 'Mast' 'Treg'\n 'Placental_Mac']\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/maternalfetalinterface-mibitof-stanford' created successfully.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#oralcavity-codex-czi",
    "href": "data_processing__convert_to_cde_format.html#oralcavity-codex-czi",
    "title": "Data Processing: Convert to CDE Format",
    "section": "oralcavity-codex-czi",
    "text": "oralcavity-codex-czi\n\ndataset_name = \"oralcavity-codex-czi\"\n\nraw_filedir = os.path.join(basepath, orig_filedir, dataset_name)\n\nct = set()\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor raw_filename in os.listdir(raw_filedir):\n    data_new = load_data(os.path.join(raw_filedir, raw_filename))\n\n    data_new.rename(columns={\"TACIT\": \"Cell Type\"}, inplace=True)\n    data_new.rename(columns={\"X\": \"x\"}, inplace=True)\n    data_new.rename(columns={\"Y\": \"y\"}, inplace=True)\n\n    # If \"Cell Type\" contains \"VECs\", replace with \"Endothelial (Vascular)\". Else if, \"Cell Type\" contains \"VEC\", replace with \"Endothelial (Vascular)\"\n    # Else if \"Cell Type\" contains \"Endothelial Cells\", replace with \"Endothelial (Vascular)\". Else, keep the same.\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('VECs', 'Vascular Endothelial Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('VEC', 'Vascular Endothelial Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Endothelial Cells', 'Vascular Endothelial Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('LECs', 'Lymphatic Endothelial Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Melanocyte', 'Melanocytes')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('B cells', 'B Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('B Cell', 'B Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('NK cells', 'NK Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Merkel cells', 'Merkel Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Neutrophil', 'Neutrophils')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Fibroblast', 'Fibroblasts')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('DC cells', 'Dendritic Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Myoepithelial', 'Myoepithelial Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Ductal Epithelial  Cells', 'Ductal Epithelial Cells')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('myfibroblast', 'myofibroblast')\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].replace('Myfibroblast', 'myofibroblast')\n\n    cell_types = data_new[\"Cell Type\"].unique()\n\n    for i in cell_types:\n        ct.add(i)\n\n    df_Region_1 = data_new[[\"x\", \"y\", \"Cell Type\"]]\n\n    # Calculate μm per px\n    micro_per_pixel = 0.5   # This is the pixel size but no need to scale since data is already given in micrometers.\n    scale = micro_per_pixel  # to convert given pixel in micro meter unit\n    df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n    df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n\n    # Write to the file using pandas to_csv\n    label = raw_filename.split(\".\")[0]\n    df_Region_1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\nprint(ct)\n\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/oralcavity-codex-czi' already exists.\n{'Others', 'Melanocytes', 'myofibroblast', 'Plasma Cells', 'Skeletal Myocytes', 'Suprabasal Keratinocytes', 'Dendritic Cells', 'Macrophage', 'Vascular Endothelial Cells', 'CD8 T Cells', 'Monocyte-Macrophage', 'Glial/Neuron', 'Basal Keratincytes', 'Ducts', 'B Cells', 'Epithelial', 'Tc', 'Lymphatic Endothelial Cells', 'Adipocytes', 'Myoepithelial Cells', 'Neutrophils', 'Acinar Cells', 'Lymphatic Vascular Cells', 'DP', 'Mural Cells', 'CD4 T Cells', 'gd T Cells', 'VEC Progen', 'Ionocytes', 'Langerhans Cells', 'Fibroblasts', 'Th', 'Acini', 'Mast Cells', 'Merkel Cells', 'NK Cells', 'Ductal Epithelial Cells', 'Keratinocyte', 'Treg'}",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#pancreas-geomx-ufl",
    "href": "data_processing__convert_to_cde_format.html#pancreas-geomx-ufl",
    "title": "Data Processing: Convert to CDE Format",
    "section": "pancreas-geomx-ufl",
    "text": "pancreas-geomx-ufl\n\ndataset_name = \"pancreas-geomx-ufl\"\n\n# Loop through all csv files in the directory \"vccf-data-original/unpublished/pancreas-geomx-ufl/original-unprocessed/\".\n# For each file, read it into a pandas dataframe and print the first few rows.\nfor file in os.listdir(os.path.join(basepath, orig_filedir, dataset_name, \"original-unprocessed\")):\n    if file.endswith(\".csv\"):\n        # read csv. Coordinates are in micrometers.\n        data = pd.read_csv(os.path.join(basepath, orig_filedir, dataset_name, \"original-unprocessed\", file))\n\n        # Rename column CD3134 with CD31/34\n        data = data.rename(columns={\"CD3134\": \"CD31/34\"})\n        # Replace \"Negative\" with \"-\" and \"Positive\" with \"+\" in column \"Insulin\"\n        data[\"Insulin\"] = data[\"Insulin\"].replace(\"Negative\", \"Insulin-\")\n        data[\"Insulin\"] = data[\"Insulin\"].replace(\"Positive\", \"Insulin+\")\n\n        # Replace \"Negative\" with \"-\" and \"Positive\" with \"+\" in column \"PanCK\"\n        data[\"PanCK\"] = data[\"PanCK\"].replace(\"Negative\", \"PanCK-\")\n        data[\"PanCK\"] = data[\"PanCK\"].replace(\"Positive\", \"PanCK+\")\n\n        # Replace \"Negative\" with \"-\" and \"Positive\" with \"+\" in column \"CD31/34\"\n        data[\"CD31/34\"] = data[\"CD31/34\"].replace(\"Negative\", \"CD31/34-\")\n        data[\"CD31/34\"] = data[\"CD31/34\"].replace(\"Positive\", \"CD31/34+\")\n\n        # Merge columns \"Insulin\", \"PanCK\" and \"CD31/34\" into a new column \"CellType\"\n        data[\"CellType\"] = data[\"Insulin\"] + \" \" + data[\"PanCK\"] + \" \" + data[\"CD31/34\"]\n\n        # drop columns \"Insulin\", \"PanCK\" and \"CD31/34\"\n        data = data.drop(columns=[\"Insulin\", \"PanCK\", \"CD31/34\"])\n\n        # Replace markers with cell types.\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin- PanCK- CD31/34+\", \"Endothelial\")\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin- PanCK+ CD31/34-\", \"Ductal cell\")\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin+ PanCK- CD31/34-\", \"Beta cell\")\n\n        # Replace all other marker combinations with \"unknown\"\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin+ PanCK+ CD31/34-\", \"unknown\")\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin- PanCK+ CD31/34+\", \"unknown\")\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin+ PanCK- CD31/34+\", \"unknown\")\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin- PanCK- CD31/34-\", \"unknown\")\n        data[\"CellType\"] = data[\"CellType\"].replace(\"Insulin+ PanCK+ CD31/34+\", \"unknown\")\n\n        # Rename Cell X Coordinate to x, Cell Y Coordinate to y, and CellType to Cell Type.\n        data = data.rename(columns={\"xcoord\": \"x\", \"ycoord\": \"y\", \"CellType\": \"Cell Type\"})\n\n        # Save the new dataframe to a new csv file.\n        data.to_csv(os.path.join(basepath, orig_filedir, dataset_name, \"cell-type-annotated\", file), index=False)\n\nraw_filedir = os.path.join(basepath, orig_filedir, dataset_name, \"cell-type-annotated\")\n\nct = set()\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor raw_filename in os.listdir(raw_filedir):\n    data_new = load_data(os.path.join(raw_filedir, raw_filename))\n    cell_types = data_new[\"Cell Type\"].unique()\n    for i in cell_types:\n        ct.add(i)\n    df_Region_1 = data_new[[\"x\", \"y\", \"Cell Type\"]]\n    # Write to the file using pandas to_csv\n    label = raw_filename.split(\".\")[0].split(\"_\")[0]\n    df_Region_1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\nprint(ct)\n\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/pancreas-geomx-ufl' created successfully.\n{'Beta cell', 'Ductal cell', 'unknown', 'Endothelial'}",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#skin-celldive-ge",
    "href": "data_processing__convert_to_cde_format.html#skin-celldive-ge",
    "title": "Data Processing: Convert to CDE Format",
    "section": "skin-celldive-ge",
    "text": "skin-celldive-ge\n\ndataset_name = \"skin-celldive-ge\"\n\nraw_filedir = os.path.join(basepath, orig_filedir, dataset_name, \"regions\")\n\n# Filename to HuBMAP ID dictionary.\n# This is used to map the filename to the HuBMAP ID. Source: https://www.biorxiv.org/content/10.1101/2023.10.05.560733v2 \nfilename_to_id = {\n    \"region_1\": \"HBM732.FZVZ.656\",\n    \"region_2\": \"HBM747.SPWK.779\",\n    \"region_3\": \"HBM398.NCVN.256\",\n    \"region_4\": \"HBM746.VTDZ.959\",\n    \"region_5\": \"HBM875.SBHJ.939\",\n    \"region_6\": \"HBM867.NMXL.794\", # Excluded in original analysis\n    \"region_7\": \"HBM666.JCGS.862\",\n    \"region_8\": \"HBM592.JGSQ.253\",\n    \"region_9\": \"HBM494.XDQW.356\",\n    \"region_10\": \"HBM238.ZKPC.934\",\n    \"region_11\": \"HBM975.FVCG.922\",\n    \"region_12\": \"HBM674.XQFQ.364\", # Excluded in original analysis\n}\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nct = set()\nfor region in os.listdir(raw_filedir):\n    # Exclude regions 6 and 12 as they were excluded in the original analysis.\n    if region == \"region_6\" or region == \"region_12\":\n        continue\n\n    raw_filename = os.path.join(raw_filedir, region, \"centroids.csv\")\n\n    data_new = pd.read_csv(raw_filename)\n\n    data_new.rename(columns={\"cell_type\": \"Cell Type\"}, inplace=True)\n    data_new.rename(columns={\"X\": \"x\"}, inplace=True)\n    data_new.rename(columns={\"Y\": \"y\"}, inplace=True)\n    data_new.rename(columns={\"Z\": \"z\"}, inplace=True)\n\n    # For consistency. Note that all endothelial cells in this dataset are blood endothelial\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].apply(lambda x: x.replace('CD31', 'Endothelial'))\n\n    # Drop \"skin\" coordinates.\n    data_new = data_new[data_new['Cell Type'] != 'Skin']\n\n    cell_types = data_new[\"Cell Type\"].unique()\n    for i in cell_types:\n        ct.add(i)\n    df_Region_1 = data_new[[\"x\", \"y\", \"z\", \"Cell Type\"]]\n\n    # Calculate μm per px\n    micro_per_pixel = 1  \n    scale = micro_per_pixel  # to convert given pixel in micro meter unit\n    df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n    df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n    df_Region_1[\"z\"] = scale * df_Region_1[\"z\"]\n\n    # Write to the file using pandas to_csv\n    df_Region_1.to_csv(f\"{target_dir}/{region}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n    # Generate dataset.json file for HRAPoP. Get the UUID for the HuBMAP ID from Entity API.\n    id = \"https://entity.api.hubmapconsortium.org/entities/\" + get_hubmap_uuid(filename_to_id[region])\n    dataset_json = {\n        \"@id\": id\n    }\n\n    with open(f\"{target_dir}/{region}-dataset.json\", \"w\") as f:\n        json.dump(dataset_json, f, indent=4)\nprint(ct)\n\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/skin-celldive-ge' created successfully.\n{'KI67', 'Endothelial', 'P53', 'DDB2', 'CD68', 'T-Reg', 'T-Killer', 'T-Helper'}",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#skin-confocal-sorgerlab",
    "href": "data_processing__convert_to_cde_format.html#skin-confocal-sorgerlab",
    "title": "Data Processing: Convert to CDE Format",
    "section": "skin-confocal-sorgerlab",
    "text": "skin-confocal-sorgerlab\n\ndataset_name = \"skin-confocal-sorgerlab\"\n\nraw_filedir = os.path.join(basepath, orig_filedir, dataset_name)\n\nct = set()\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor raw_filename in os.listdir(raw_filedir):\n\n    data_new = load_data(os.path.join(raw_filedir, raw_filename))\n\n    data_new.rename(columns={\"phenotype\": \"Cell Type\", \"X_centroid\": \"x\", \"Y_centroid\": \"y\", \"Z_centroid\": \"z\"}, inplace=True)\n\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].apply(lambda x: x.replace('endothelial', 'Endothelial'))\n\n    cell_types = data_new[\"Cell Type\"].unique()\n\n    for i in cell_types:\n        ct.add(i)\n\n    df_Region_1 = data_new[[\"x\", \"y\", \"z\", \"Cell Type\"]]\n    \n    # Write to the file using pandas to_csv\n    label = raw_filename.split(\".\")[0]\n\n    df_Region_1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n    # Generate dataset.json file for HRAPoP. Paper DOI: https://doi.org/10.1101/2023.11.10.566670\n    id = f\"https://doi.org/10.1101/2023.11.10.566670#{label}\"\n    dataset_json = {\n        \"@id\": id\n    }\n\n    with open(f\"{target_dir}/{label}-dataset.json\", \"w\") as f:\n        json.dump(dataset_json, f, indent=4)\n\nprint(ct)\n\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/skin-confocal-sorgerlab' created successfully.\n{'Unknown', 'Dendritic cells', 'Tumor', 'Endothelial', 'Macrophage', 'Other Immune', 'B cells', 'Myeloid', 'Tissue T', 'Langerhan cells', 'CD11B+ CD11C- cells', 'CD8 T', 'CD4 T', 'keratinocytes', 'T reg'}",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#spleen-codex-ufl",
    "href": "data_processing__convert_to_cde_format.html#spleen-codex-ufl",
    "title": "Data Processing: Convert to CDE Format",
    "section": "spleen-codex-ufl",
    "text": "spleen-codex-ufl\n\ndataset_name = \"spleen-codex-ufl\"\nct = set()\nraw_filedir = os.path.join(basepath, orig_filedir, dataset_name)\n\n# Filename to HuBMAP ID dictionary.\n# This is used to map the filename to the HuBMAP ID. Source: https://www.biorxiv.org/content/10.1101/2023.10.05.560733v2 \nfilename_to_id = {\n    \"FSLD\": \"HBM342.FSLD.938\",\n    \"KSFB\": \"HBM556.KSFB.592\",\n    \"NGPL\": \"HBM568.NGPL.345\",\n    \"PBVN\": \"HBM825.PBVN.284\",\n    \"PKHL\": \"HBM389.PKHL.936\",\n    \"XXCD\": \"HBM772.XXCD.697\",\n}\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor raw_filename in os.listdir(raw_filedir):\n\n    data_new = pd.read_csv(os.path.join(raw_filedir, raw_filename), sep=';')\n\n    data_new.rename(columns={\"celltypes_folBcombined\": \"Cell Type\"}, inplace=True)\n\n    # For consistency. Note that all endothelial cells in this dataset are blood endothelial\n    data_new[\"Cell Type\"] = data_new[\"Cell Type\"].apply(lambda x: x.replace('Blood endothelial', 'blood endothelial'))\n\n    cell_types = data_new[\"Cell Type\"].unique()\n    \n    # Add all elements in cell_types list to teh ct set\n    for i in cell_types:\n        ct.add(i)\n\n    df_Region_1 = data_new[[\"x\", \"y\", \"Cell Type\"]]\n\n    # Calculate μm per px\n    micro_per_pixel = 0.377  \n    scale = micro_per_pixel  # to convert given pixel in micro meter unit\n    df_Region_1[\"x\"] = scale * df_Region_1[\"x\"]\n    df_Region_1[\"y\"] = scale * df_Region_1[\"y\"]\n\n    # Find the most negative value in each column\n    shift_x = abs(df_Region_1['x'].min())\n    shift_y = abs(df_Region_1['y'].min())\n\n    # Shift all values in the columns to be positive\n    df_Region_1['x'] = df_Region_1['x'] + shift_x\n    df_Region_1['y'] = df_Region_1['y'] + shift_y\n    \n    # Write to the file using pandas to_csv\n    label = raw_filename.split('.')[0]\n    df_Region_1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\n    # Generate dataset.json file for HRAPoP. Get the UUID for the HuBMAP ID from Entity API.\n    id = \"https://entity.api.hubmapconsortium.org/entities/\" + get_hubmap_uuid(filename_to_id[label])\n    dataset_json = {\n        \"@id\": id\n    }\n\n    with open(f\"{target_dir}/{label}-dataset.json\", \"w\") as f:\n        json.dump(dataset_json, f, indent=4)\n    \nprint(ct)\n\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/spleen-codex-ufl' created successfully.\n{'Myeloid cells', 'Sinusoidal cells', 'CD8 Memory T cells', 'Macrophages', 'indistinct', 'B cells, red pulp', 'Ki67 proliferating', 'Fol B cells', 'blood endothelial', 'Neutrophils/Monocytes', 'Podoplanin', 'CD4 Memory T cells'}",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#lung-codex-urmc",
    "href": "data_processing__convert_to_cde_format.html#lung-codex-urmc",
    "title": "Data Processing: Convert to CDE Format",
    "section": "lung-codex-urmc",
    "text": "lung-codex-urmc\n\ndataset_name = \"lung-codex-urmc\"\n\n# Process D265 Dataset.\n# Read the h5ad file\n# Specify your input and output file paths\nh5ad_path = os.path.join(basepath, orig_filedir, dataset_name, \"D265_final_annotated.h5ad\")\noutput_csv_path = os.path.join(basepath, orig_filedir, dataset_name, \"D265_final_annotated_cells.csv\")\n\nprint(f\"Reading file: {h5ad_path}\")\nadata = sc.read_h5ad(h5ad_path)\n\n# Initialize dictionary to store the data\ndata_dict = {}\n\n# Extract spatial coordinates and split into x, y\nif 'spatial' in adata.obsm_keys():\n    spatial_coords = adata.obsm['spatial']\n    data_dict['x'] = spatial_coords[:, 0]\n    data_dict['y'] = spatial_coords[:, 1]\nelse:\n    raise KeyError(\"'spatial' coordinates not found in obsm\")\n\n# Extract cell type calls from obs\nif 'cell_type_calls' in adata.obs:\n    data_dict['Cell Type'] = adata.obs['cell_type_calls'].tolist()\nelse:\n    raise KeyError(\"'cell_type_calls' column not found in obs\")\n\n# Extract ontology mappings from uns\nif 'ontology_mappings' in adata.uns:\n    # Create a mapping dictionary from uns data\n    data_dict['Cell Ontology ID'] = adata.uns['ontology_mappings'][\"D265_ont_1\"].tolist()\n    data_dict['Cell Ontology ID_2'] = adata.uns['ontology_mappings'][\"D265_ont_2\"].tolist()\n \nelse:\n    raise KeyError(\"'ontology_mappings' not found in uns\")\n\n# Create DataFrame\ndf = pd.DataFrame(data_dict)\n# In D265 dataset, remove space in Cell Type column where value is ENDO_1.\ndf['Cell Type'] = df['Cell Type'].replace(' ENDO_1', 'ENDO_1')\ndf['Cell Type'] = df['Cell Type'].replace(' macrophage', 'macrophage')\n\n# Save to CSV\ndf.to_csv(output_csv_path, index=False)\nprint(f\"\\nData successfully saved to: {output_csv_path}\")\n\ndel adata\ndel df\ndel data_dict\n\n# Process D115 Dataset.\n# Read the h5ad file\n# Specify your input and output file paths\nh5ad_path = os.path.join(basepath, orig_filedir, dataset_name, \"D115_final_annotated.h5ad\")\noutput_csv_path = os.path.join(basepath, orig_filedir, dataset_name, \"D115_final_annotated_cells.csv\")\n\nprint(f\"Reading file: {h5ad_path}\")\nadata = sc.read_h5ad(h5ad_path)\n\n# Initialize dictionary to store the data\ndata_dict = {}\n\n# Extract spatial coordinates and split into x, y\nif 'spatial' in adata.obsm_keys():\n    spatial_coords = adata.obsm['spatial']\n    data_dict['x'] = spatial_coords[:, 0]\n    data_dict['y'] = spatial_coords[:, 1]\nelse:\n    raise KeyError(\"'spatial' coordinates not found in obsm\")\n\n# Extract cell type calls from obs\nif 'cell_type_calls' in adata.obs:\n    data_dict['Cell Type'] = adata.obs['cell_type_calls'].tolist()\nelse:\n    raise KeyError(\"'cell_type_calls' column not found in obs\")\n\n# Extract ontology mappings from uns\nif 'ontology_mappings' in adata.uns:\n    # Create a mapping dictionary from uns data\n    # Note: Adjust this based on the actual structure of your ontology_mappings\n    data_dict['Cell Ontology ID'] = adata.uns['ontology_mappings'][\"D115_ont_1\"].tolist()\n    data_dict['Cell Ontology ID_2'] = adata.uns['ontology_mappings'][\"D115_ont_2\"].tolist()\n\nelse:\n    raise KeyError(\"'ontology_mappings' not found in uns\")\n\n# Create DataFrame\ndf = pd.DataFrame(data_dict)\n\n# Save to CSV\ndf.to_csv(output_csv_path, index=False)\nprint(f\"\\nData successfully saved to: {output_csv_path}\")\n\ndel adata\ndel df\ndel data_dict\n\n# Replace cell type names with cell labels from crosswalk file and generate cell-nodes files for both datasets. \n# Read D265 csv file.\ndf1 = pd.read_csv(os.path.join(basepath, orig_filedir, dataset_name, \"D265_final_annotated_cells.csv\"))\n\n# Drop duplicate rows in D265. Check if any duplicate rows.\ndf1 = df1.drop_duplicates(subset=['x', 'y', 'Cell Type'])\n\n# # Read crosswalk file.\n# crosswalk = pd.read_csv(os.path.join(basepath, orig_filedir, dataset_name, \"extras\", \"combined_unique_ct_list_with_cl_labels.csv\"))\n# # Keep unique rows in crosswalk file. Check uniqueness based on Cell Type.\n# crosswalk = crosswalk.drop_duplicates(subset=['Cell Type'])\n\n# # For each row in D265, replace Cell Type with the corresponding CL Label from crosswalk file. In case of no match, keep the original Cell Type. \n# # In case the Cell Type matches but the CL Label field in the crosswalk file is empty, keep the original Cell Type.\n# df1 = pd.merge(df1, crosswalk, on='Cell Type', how='left')\n# df1['Cell Type'] = np.where(df1['CL Label'].isnull(), df1['Cell Type'], df1['CL Label'])\n# df1 = df1.drop(columns=['CL Label'])\n\n# Drop Cell Ontology ID and Cell Ontology ID_2 columns.\ndf1 = df1.drop(columns=['Cell Ontology ID', 'Cell Ontology ID_2'])\n\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nlabel = \"D265-LLL-7A7-12\"\n# Save the updated D265 csv file.\ndf1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\nid = f\"https://entity.api.hubmapconsortium.org/entities/0f1ddcb41a484adbda759c0c79097a02#{label}\"\n\ndataset_json = {\n    \"@id\": id\n}\n\nwith open(f\"{target_dir}/{label}-dataset.json\", \"w\") as f:\n    json.dump(dataset_json, f, indent=4)\n\ndel df1\n# Replace cell type names with cell labels from crosswalk file and generate cell-nodes files for both datasets. \n\n# Read D115 csv file.\ndf1 = pd.read_csv(os.path.join(basepath, orig_filedir, dataset_name, \"D115_final_annotated_cells.csv\"))\n\n# Drop duplicate rows in D115. Check if any duplicate rows. If true, print them.\ndf1 = df1.drop_duplicates(subset=['x', 'y', 'Cell Type'])\n\n# # Read crosswalk file.\n# crosswalk = pd.read_csv(os.path.join(basepath, orig_filedir, dataset_name, \"extras\", \"combined_unique_ct_list_with_cl_labels.csv\"))\n# # Keep unique rows in crosswalk file. Check uniqueness based on Cell Type.\n# crosswalk = crosswalk.drop_duplicates(subset=['Cell Type'])\n\n# # For each row in D115, replace Cell Type with the corresponding CL Label from crosswalk file. In case of no match, keep the original Cell Type. \n# # In case the Cell Type matches but the CL Label field in the crosswalk file is empty, keep the original Cell Type.\n# df1 = pd.merge(df1, crosswalk, on='Cell Type', how='left')\n# df1['Cell Type'] = np.where(df1['CL Label'].isnull(), df1['Cell Type'], df1['CL Label'])\n# df1 = df1.drop(columns=['CL Label'])\n\n# Drop Cell Ontology ID and Cell Ontology ID_2 columns.\ndf1 = df1.drop(columns=['Cell Ontology ID', 'Cell Ontology ID_2'])\n\nlabel = \"D115-RLL-10A3-40\"\n# Save the updated D115 csv file.\ndf1.to_csv(f\"{target_dir}/{label}-nodes.csv\", index=False, header=True, mode=\"w\")\n\nid = f\"https://entity.api.hubmapconsortium.org/entities/0f1ddcb41a484adbda759c0c79097a02#{label}\"\n\ndataset_json = {\n    \"@id\": id\n}\n\nwith open(f\"{target_dir}/{label}-dataset.json\", \"w\") as f:\n    json.dump(dataset_json, f, indent=4)\n\n# Print the unique cell types in both datasets combined.\nunique_cell_types = pd.concat([df1['Cell Type'], df1['Cell Type']]).unique()\nprint(unique_cell_types)\n\nReading file: /u/yashjain/hra-cell-distance-analysis/data/data-original/lung-codex-urmc/D265_final_annotated.h5ad\n\nData successfully saved to: /u/yashjain/hra-cell-distance-analysis/data/data-original/lung-codex-urmc/D265_final_annotated_cells.csv\nReading file: /u/yashjain/hra-cell-distance-analysis/data/data-original/lung-codex-urmc/D115_final_annotated.h5ad\n\nData successfully saved to: /u/yashjain/hra-cell-distance-analysis/data/data-original/lung-codex-urmc/D115_final_annotated_cells.csv\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/lung-codex-urmc' created successfully.\n['CD4_+_Tcell/macrophage' 'CD8+_T_cell_1' 'macrophage_3' 'ENDO_1'\n 'ENDO_CD8+_T_Cell' 'CD4+_T_cell_1' 'Lung_Epithelial_1' 'CAP_ENDO'\n 'macrophage_CD1c+_myeloidDC' 'ENDO_SMC' 'Endo_p'\n 'Lung_Epithelil_2_CD4+_T_cell' 'AT2_2' 'AT2_1' 'CD8+_T_cell_2'\n 'macrophage_2' 'macrophage_p' 'CD4+_T_cell_2' 'AT2_p' 'SMC_2' 'SMC_1'\n 'CD8+_T_cell_3' 'B_cell_1' 'Lung_Epithelial_p' 'CD8+_T_cell_CD_4+_T_cell'\n 'Lung_Epithelial_4' 'UNK_5_ambiguous' 'UNK_1_APC' 'CD4+_T_cell_3'\n 'B_cell_macrophage_p?' 'UNK_3_(col1a1-driven_cluster)'\n 'Lymphatic_Endothelium' 'UNK_4_(col1a1_driven_cluster)']",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "data_processing__convert_to_cde_format.html#bonemarrow-codex-chop",
    "href": "data_processing__convert_to_cde_format.html#bonemarrow-codex-chop",
    "title": "Data Processing: Convert to CDE Format",
    "section": "bonemarrow-codex-chop",
    "text": "bonemarrow-codex-chop\n\ndataset_name = \"bonemarrow-codex-chop\"\n\nmetadata1 = pd.read_csv(os.path.join(basepath, orig_filedir, dataset_name, \"AML_NSM_RefMap_Seurat_v2_seurat_metadata.csv\"))\n\nmetadata2 = pd.read_csv(os.path.join(basepath, orig_filedir, dataset_name, \"Normal_Bone_Marrow_CODEX_Atlas_Seurat_v2_seurat_metadata.csv\"))\n\n# Extract x, y coords, cell type, and filename from metadata1 into a new dataframe.\nmetadata1['x'] = metadata1['x.coord']\nmetadata1['y'] = metadata1['y.coord']\nmetadata1['Cell Type'] = metadata1['classified_cluster_anno_l2']\nmetadata1['filename'] = metadata1['orig.ident']\nmetadata1 = metadata1[['x', 'y', 'Cell Type', 'filename']]\n\n# Extract x, y coords, cell type, and filename from metadata2 into a new dataframe.\nmetadata2['x'] = metadata2['x.coord']\nmetadata2['y'] = metadata2['y.coord']\nmetadata2['Cell Type'] = metadata2['cluster_anno_l2']\nmetadata2['filename'] = metadata2['orig.ident']\nmetadata2 = metadata2[['x', 'y', 'Cell Type', 'filename']]\n\n# Merge metadata1 and metadata2.\ndata_merged = pd.concat([metadata1, metadata2], axis=0)\ndata_merged = data_merged.reset_index(drop=True)\n\n# Remove \"_CODEX_Mesmer\" from filename.\ndata_merged['filename'] = data_merged['filename'].str.replace('_CODEX_Mesmer', '')\n\n# Write data_merged to a csv file.\ndata_merged.to_csv(os.path.join(basepath, orig_filedir, dataset_name, \"data_merged.csv\"), index=False)\n\n# Print unique cell types in the data_merged dataframe.\nprint(data_merged['Cell Type'].unique())\n\n# Iterate over unique values in data_merged column filename and write each subset to a csv file in vccf-data-cell-nodes/published/bonemarrow-codex-chop directory. Drop filename column.\ntarget_dir = os.path.join(basepath, dest_filedir, dataset_name)\ncreate_directory(target_dir)\n\nfor filename in data_merged['filename'].unique():\n    data_subset = data_merged[data_merged['filename'] == filename]\n    data_subset = data_subset.drop(columns=['filename'])\n    data_subset.to_csv(f'{target_dir}/{filename}-nodes.csv', index=False)\n\n['Erythroid' 'B-Cells' 'AEC' 'Early Myeloid Progenitor' 'SEC'\n 'Intermediate Myeloid' 'Mature Myeloid' 'CD8+ T-Cell' 'Plasma Cells'\n 'Erythroblast' 'Adipocyte' 'Monocytes' 'Adipo-MSC' 'Endosteal'\n 'THY1+ MSC' 'CD4+ T-Cell' 'GMP/Myeloblast' 'GATA1pos_Mks'\n 'Immature_B_Cell' 'Macrophages' 'SPINK2+ HSPC' 'pDC'\n 'Non-Classical Monocyte' 'GATA1neg_Mks' 'HSPC' 'VSMC' 'GMP'\n 'MEP/Early Erythroblast' 'CLP' 'CD34+ CD61+' 'HSC' 'NPM1 Mutant Blast'\n 'Schwann Cells' 'Artifact' 'Undetermined' 'Autofluorescent'\n 'CD44+ Undetermined']\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes/bonemarrow-codex-chop' created successfully.\n\n\n\n# Print final message\nprint(\"All datasets processed and saved.\")\n\nAll datasets processed and saved.",
    "crumbs": [
      "Data Processing: Convert to CDE Format"
    ]
  },
  {
    "objectID": "distance_analysis__skin-celldive-ge.html",
    "href": "distance_analysis__skin-celldive-ge.html",
    "title": "Distance Analysis: skin-celldive-ge",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"skin-celldive-ge\" \ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: skin-celldive-ge"
    ]
  },
  {
    "objectID": "distance_analysis__skin-celldive-ge.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__skin-celldive-ge.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: skin-celldive-ge",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nz\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n188.500\n342.500\n10.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n1\n136.600\n161.400\n20.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n2\n437.500\n363.500\n20.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n3\n203.500\n512.000\n20.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n4\n155.579\n204.895\n0.0\nT-Helper\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 8\nLevel Three Cell Type: 8\nLevel Two Cell Type: 4\nLevel One Cell Type: 3\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: skin-celldive-ge"
    ]
  },
  {
    "objectID": "distance_analysis__skin-celldive-ge.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__skin-celldive-ge.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: skin-celldive-ge",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nz\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n188.500\n342.500\n10.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n1\n136.600\n161.400\n20.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n2\n437.500\n363.500\n20.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n3\n203.500\n512.000\n20.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n4\n155.579\n204.895\n0.0\nT-Helper\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset']\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nregion_1\nregion_1\n\n\n1\nregion_1\nregion_1\n\n\n2\nregion_1\nregion_1\n\n\n3\nregion_1\nregion_1\n\n\n4\nregion_1\nregion_1\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['region_1' 'region_10' 'region_11' 'region_2' 'region_3' 'region_4'\n 'region_5' 'region_7' 'region_8' 'region_9']\nTotal number of unique regions: 10\n\nNumber of unique datasets per unique region:\nregion_1: 1\nregion_10: 1\nregion_11: 1\nregion_2: 1\nregion_3: 1\nregion_4: 1\nregion_5: 1\nregion_7: 1\nregion_8: 1\nregion_9: 1",
    "crumbs": [
      "Distance Analysis: skin-celldive-ge"
    ]
  },
  {
    "objectID": "distance_analysis__skin-celldive-ge.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__skin-celldive-ge.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: skin-celldive-ge",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n188.500\n342.500\n10.0\n198.4000\n341.800\n10.0\n9.924717\nregion_1\nendothelial cell\nLevel Three Cell Type\n\n\n1\n4\n155.579\n204.895\n0.0\n156.5000\n201.500\n1.0\n3.657084\nregion_1\nendothelial cell\nLevel Three Cell Type\n\n\n2\n5\n107.500\n223.500\n0.0\n95.6667\n215.667\n1.0\n14.226134\nregion_1\nendothelial cell\nLevel Three Cell Type\n\n\n3\n6\n180.593\n226.519\n0.0\n191.1670\n226.667\n1.0\n10.622212\nregion_1\nendothelial cell\nLevel Three Cell Type\n\n\n4\n7\n188.500\n226.778\n0.0\n191.1670\n226.667\n1.0\n2.850475\nregion_1\nendothelial cell\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Dataset']\n# df_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nregion_1\nregion_1\n\n\n1\nregion_1\nregion_1\n\n\n2\nregion_1\nregion_1\n\n\n3\nregion_1\nregion_1\n\n\n4\nregion_1\nregion_1\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['region_1' 'region_10' 'region_11' 'region_2' 'region_3' 'region_4'\n 'region_5' 'region_7' 'region_8' 'region_9']\nTotal number of unique regions: 10\n\nNumber of unique datasets per unique region:\nregion_1: 1\nregion_10: 1\nregion_11: 1\nregion_2: 1\nregion_3: 1\nregion_4: 1\nregion_5: 1\nregion_7: 1\nregion_8: 1\nregion_9: 1\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset']\n# df_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nregion_1\nregion_1\n\n\n1\nregion_1\nregion_1\n\n\n2\nregion_1\nregion_1\n\n\n3\nregion_1\nregion_1\n\n\n4\nregion_1\nregion_1\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nz\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n188.5\n342.5\n10.0\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nregion_1\nregion_1\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n0\n188.5\n342.5\n10.0\n198.4\n341.8\n10.0\n9.924717\nregion_1\nendothelial cell\nLevel Three Cell Type\nregion_1\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n0\n188.5\n342.5\n10.0\n198.4\n341.8\n10.0\n9.924717\nregion_1\nendothelial cell\nLevel Three Cell Type\nt cell:cd8+\nt cell\nimmune cell\nregion_1",
    "crumbs": [
      "Distance Analysis: skin-celldive-ge"
    ]
  },
  {
    "objectID": "distance_analysis__skin-celldive-ge.html#node-analysis",
    "href": "distance_analysis__skin-celldive-ge.html#node-analysis",
    "title": "Distance Analysis: skin-celldive-ge",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: skin-celldive-ge"
    ]
  },
  {
    "objectID": "distance_analysis__skin-celldive-ge.html#distance-analysis",
    "href": "distance_analysis__skin-celldive-ge.html#distance-analysis",
    "title": "Distance Analysis: skin-celldive-ge",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nregion_1\nendothelial cell\nLevel One Cell Type\n10.339891\n9.627938\n0.321218\n35.549790\n\n\n1\nregion_1\nendothelial cell\nLevel Three Cell Type\n10.339891\n9.627938\n0.321218\n35.549790\n\n\n2\nregion_1\nendothelial cell\nLevel Two Cell Type\n10.339891\n9.627938\n0.321218\n35.549790\n\n\n3\nregion_10\nendothelial cell\nLevel One Cell Type\n11.731047\n10.629954\n0.500000\n52.648323\n\n\n4\nregion_10\nendothelial cell\nLevel Three Cell Type\n11.731047\n10.629954\n0.500000\n52.648323\n\n\n5\nregion_10\nendothelial cell\nLevel Two Cell Type\n11.731047\n10.629954\n0.500000\n52.648323\n\n\n6\nregion_11\nendothelial cell\nLevel One Cell Type\n11.084870\n9.023278\n0.457433\n61.572358\n\n\n7\nregion_11\nendothelial cell\nLevel Three Cell Type\n11.084870\n9.023278\n0.457433\n61.572358\n\n\n8\nregion_11\nendothelial cell\nLevel Two Cell Type\n11.084870\n9.023278\n0.457433\n61.572358\n\n\n9\nregion_2\nendothelial cell\nLevel One Cell Type\n11.321866\n8.963334\n0.000000\n63.424592\n\n\n10\nregion_2\nendothelial cell\nLevel Three Cell Type\n11.321866\n8.963334\n0.000000\n63.424592\n\n\n11\nregion_2\nendothelial cell\nLevel Two Cell Type\n11.321866\n8.963334\n0.000000\n63.424592\n\n\n12\nregion_3\nendothelial cell\nLevel One Cell Type\n9.743145\n8.308900\n0.264401\n82.592541\n\n\n13\nregion_3\nendothelial cell\nLevel Three Cell Type\n9.743145\n8.308900\n0.264401\n82.592541\n\n\n14\nregion_3\nendothelial cell\nLevel Two Cell Type\n9.743145\n8.308900\n0.264401\n82.592541\n\n\n15\nregion_4\nendothelial cell\nLevel One Cell Type\n8.399101\n7.280110\n0.000000\n60.328360\n\n\n16\nregion_4\nendothelial cell\nLevel Three Cell Type\n8.399101\n7.280110\n0.000000\n60.328360\n\n\n17\nregion_4\nendothelial cell\nLevel Two Cell Type\n8.399101\n7.280110\n0.000000\n60.328360\n\n\n18\nregion_5\nendothelial cell\nLevel One Cell Type\n13.177577\n8.661502\n0.377260\n128.413083\n\n\n19\nregion_5\nendothelial cell\nLevel Three Cell Type\n13.177577\n8.661502\n0.377260\n128.413083\n\n\n20\nregion_5\nendothelial cell\nLevel Two Cell Type\n13.177577\n8.661502\n0.377260\n128.413083\n\n\n21\nregion_7\nendothelial cell\nLevel One Cell Type\n11.388868\n9.381152\n0.137033\n58.771590\n\n\n22\nregion_7\nendothelial cell\nLevel Three Cell Type\n11.388868\n9.381152\n0.137033\n58.771590\n\n\n23\nregion_7\nendothelial cell\nLevel Two Cell Type\n11.388868\n9.381152\n0.137033\n58.771590\n\n\n24\nregion_8\nendothelial cell\nLevel One Cell Type\n14.008464\n7.565769\n0.590302\n84.945093\n\n\n25\nregion_8\nendothelial cell\nLevel Three Cell Type\n14.008464\n7.565769\n0.590302\n84.945093\n\n\n26\nregion_8\nendothelial cell\nLevel Two Cell Type\n14.008464\n7.565769\n0.590302\n84.945093\n\n\n27\nregion_9\nendothelial cell\nLevel One Cell Type\n8.917597\n8.011655\n0.000000\n82.574584\n\n\n28\nregion_9\nendothelial cell\nLevel Three Cell Type\n8.917597\n8.011655\n0.000000\n82.574584\n\n\n29\nregion_9\nendothelial cell\nLevel Two Cell Type\n8.917597\n8.011655\n0.000000\n82.574584\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nregion_1\n10.942273\n10.290975\n0.725522\n30.013880\n\n\n1\nepithelial cell\nregion_10\n12.361319\n11.790882\n0.707107\n30.695997\n\n\n2\nepithelial cell\nregion_11\n10.196528\n8.800049\n0.500000\n61.164532\n\n\n3\nepithelial cell\nregion_2\n10.745935\n9.035553\n0.017000\n59.438487\n\n\n4\nepithelial cell\nregion_3\n10.267738\n9.600986\n0.756604\n34.270687\n\n\n5\nepithelial cell\nregion_4\n8.793482\n8.015610\n0.157318\n41.847939\n\n\n6\nepithelial cell\nregion_5\n15.737377\n11.491433\n0.443152\n81.273438\n\n\n7\nepithelial cell\nregion_7\n12.058310\n11.410651\n1.008021\n37.367765\n\n\n8\nepithelial cell\nregion_8\n9.839488\n7.435609\n1.840557\n72.194326\n\n\n9\nepithelial cell\nregion_9\n9.762396\n9.006318\n1.027511\n82.574584\n\n\n10\nimmune cell\nregion_1\n9.444458\n8.216023\n0.321218\n35.549790\n\n\n11\nimmune cell\nregion_10\n11.165366\n9.002613\n0.500000\n52.648323\n\n\n12\nimmune cell\nregion_11\n12.004633\n9.287078\n0.457433\n61.572358\n\n\n13\nimmune cell\nregion_2\n11.998585\n8.811683\n0.000000\n63.424592\n\n\n14\nimmune cell\nregion_3\n9.391895\n7.059130\n0.264401\n82.592541\n\n\n15\nimmune cell\nregion_4\n8.140628\n6.722525\n0.000000\n60.328360\n\n\n16\nimmune cell\nregion_5\n9.762993\n5.837830\n0.377260\n128.413083\n\n\n17\nimmune cell\nregion_7\n10.933319\n7.632169\n0.137033\n58.771590\n\n\n18\nimmune cell\nregion_8\n14.755313\n7.585450\n0.590302\n84.945093\n\n\n19\nimmune cell\nregion_9\n7.853201\n6.483046\n0.000000\n80.493224\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in region_1:\n  Level One Cell Type  mean_distance\n0     epithelial cell      10.942273\n1         immune cell       9.444458\n\nBottom 5 cell types in region_1:\n  Level One Cell Type  mean_distance\n0     epithelial cell      10.942273\n1         immune cell       9.444458\n\nTop 5 cell types in region_10:\n  Level One Cell Type  mean_distance\n0     epithelial cell      12.361319\n1         immune cell      11.165366\n\nBottom 5 cell types in region_10:\n  Level One Cell Type  mean_distance\n0     epithelial cell      12.361319\n1         immune cell      11.165366\n\nTop 5 cell types in region_11:\n  Level One Cell Type  mean_distance\n1         immune cell      12.004633\n0     epithelial cell      10.196528\n\nBottom 5 cell types in region_11:\n  Level One Cell Type  mean_distance\n1         immune cell      12.004633\n0     epithelial cell      10.196528\n\nTop 5 cell types in region_2:\n  Level One Cell Type  mean_distance\n1         immune cell      11.998585\n0     epithelial cell      10.745935\n\nBottom 5 cell types in region_2:\n  Level One Cell Type  mean_distance\n1         immune cell      11.998585\n0     epithelial cell      10.745935\n\nTop 5 cell types in region_3:\n  Level One Cell Type  mean_distance\n0     epithelial cell      10.267738\n1         immune cell       9.391895\n\nBottom 5 cell types in region_3:\n  Level One Cell Type  mean_distance\n0     epithelial cell      10.267738\n1         immune cell       9.391895\n\nTop 5 cell types in region_4:\n  Level One Cell Type  mean_distance\n0     epithelial cell       8.793482\n1         immune cell       8.140628\n\nBottom 5 cell types in region_4:\n  Level One Cell Type  mean_distance\n0     epithelial cell       8.793482\n1         immune cell       8.140628\n\nTop 5 cell types in region_5:\n  Level One Cell Type  mean_distance\n0     epithelial cell      15.737377\n1         immune cell       9.762993\n\nBottom 5 cell types in region_5:\n  Level One Cell Type  mean_distance\n0     epithelial cell      15.737377\n1         immune cell       9.762993\n\nTop 5 cell types in region_7:\n  Level One Cell Type  mean_distance\n0     epithelial cell      12.058310\n1         immune cell      10.933319\n\nBottom 5 cell types in region_7:\n  Level One Cell Type  mean_distance\n0     epithelial cell      12.058310\n1         immune cell      10.933319\n\nTop 5 cell types in region_8:\n  Level One Cell Type  mean_distance\n1         immune cell      14.755313\n0     epithelial cell       9.839488\n\nBottom 5 cell types in region_8:\n  Level One Cell Type  mean_distance\n1         immune cell      14.755313\n0     epithelial cell       9.839488\n\nTop 5 cell types in region_9:\n  Level One Cell Type  mean_distance\n0     epithelial cell       9.762396\n1         immune cell       7.853201\n\nBottom 5 cell types in region_9:\n  Level One Cell Type  mean_distance\n0     epithelial cell       9.762396\n1         immune cell       7.853201\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in region_1:\n  Level One Cell Type  median_distance\n0     epithelial cell        10.290975\n1         immune cell         8.216023\n\nBottom 5 cell types in region_1:\n  Level One Cell Type  median_distance\n0     epithelial cell        10.290975\n1         immune cell         8.216023\n\nTop 5 cell types in region_10:\n  Level One Cell Type  median_distance\n0     epithelial cell        11.790882\n1         immune cell         9.002613\n\nBottom 5 cell types in region_10:\n  Level One Cell Type  median_distance\n0     epithelial cell        11.790882\n1         immune cell         9.002613\n\nTop 5 cell types in region_11:\n  Level One Cell Type  median_distance\n1         immune cell         9.287078\n0     epithelial cell         8.800049\n\nBottom 5 cell types in region_11:\n  Level One Cell Type  median_distance\n1         immune cell         9.287078\n0     epithelial cell         8.800049\n\nTop 5 cell types in region_2:\n  Level One Cell Type  median_distance\n0     epithelial cell         9.035553\n1         immune cell         8.811683\n\nBottom 5 cell types in region_2:\n  Level One Cell Type  median_distance\n0     epithelial cell         9.035553\n1         immune cell         8.811683\n\nTop 5 cell types in region_3:\n  Level One Cell Type  median_distance\n0     epithelial cell         9.600986\n1         immune cell         7.059130\n\nBottom 5 cell types in region_3:\n  Level One Cell Type  median_distance\n0     epithelial cell         9.600986\n1         immune cell         7.059130\n\nTop 5 cell types in region_4:\n  Level One Cell Type  median_distance\n0     epithelial cell         8.015610\n1         immune cell         6.722525\n\nBottom 5 cell types in region_4:\n  Level One Cell Type  median_distance\n0     epithelial cell         8.015610\n1         immune cell         6.722525\n\nTop 5 cell types in region_5:\n  Level One Cell Type  median_distance\n0     epithelial cell        11.491433\n1         immune cell         5.837830\n\nBottom 5 cell types in region_5:\n  Level One Cell Type  median_distance\n0     epithelial cell        11.491433\n1         immune cell         5.837830\n\nTop 5 cell types in region_7:\n  Level One Cell Type  median_distance\n0     epithelial cell        11.410651\n1         immune cell         7.632169\n\nBottom 5 cell types in region_7:\n  Level One Cell Type  median_distance\n0     epithelial cell        11.410651\n1         immune cell         7.632169\n\nTop 5 cell types in region_8:\n  Level One Cell Type  median_distance\n1         immune cell         7.585450\n0     epithelial cell         7.435609\n\nBottom 5 cell types in region_8:\n  Level One Cell Type  median_distance\n1         immune cell         7.585450\n0     epithelial cell         7.435609\n\nTop 5 cell types in region_9:\n  Level One Cell Type  median_distance\n0     epithelial cell         9.006318\n1         immune cell         6.483046\n\nBottom 5 cell types in region_9:\n  Level One Cell Type  median_distance\n0     epithelial cell         9.006318\n1         immune cell         6.483046\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nregion_1       10.34   5.68    54.9\nregion_10      11.73   6.71    57.2\nregion_11      11.08   8.25    74.5\nregion_2       11.32   8.83    78.0\nregion_3        9.74   7.16    73.5\nregion_4        8.40   5.68    67.6\nregion_5       13.18  13.21   100.2\nregion_7       11.39   8.19    71.9\nregion_8       14.01  14.89   106.3\nregion_9        8.92   5.78    64.8\n\nCell Type Variability Analysis (sorted by CV):\n                      mean   std  CV (%)\nLevel One Cell Type                     \nimmune cell          10.17  9.66    95.0\nepithelial cell      11.33  8.04    71.0\n\n\n\n# Define the standard region sequence for plots (Get all unique values in Unique Region column as a list.)\nregions = df_all_edges_with_cell_types['Unique Region'].unique().tolist()\n\n# Custom sort to handle region_X format\ndef region_sort_key(region_name):\n    # Extract the number after 'region_'\n    number = int(region_name.split('_')[1])\n    return number\n\nregions = sorted(regions, key=region_sort_key)\nprint(\"\\nRegions in the data:\")\nprint(regions)\n\n\nRegions in the data:\n['region_1', 'region_2', 'region_3', 'region_4', 'region_5', 'region_7', 'region_8', 'region_9', 'region_10', 'region_11']\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(10, 1, figsize=(10, 20)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nkeratinocyte\nregion_1\n10.942273\n10.290975\n0.725522\n30.013880\n\n\n1\nkeratinocyte\nregion_10\n12.361319\n11.790882\n0.707107\n30.695997\n\n\n2\nkeratinocyte\nregion_11\n10.196528\n8.800049\n0.500000\n61.164532\n\n\n3\nkeratinocyte\nregion_2\n10.745935\n9.035553\n0.017000\n59.438487\n\n\n4\nkeratinocyte\nregion_3\n10.267738\n9.600986\n0.756604\n34.270687\n\n\n5\nkeratinocyte\nregion_4\n8.793482\n8.015610\n0.157318\n41.847939\n\n\n6\nkeratinocyte\nregion_5\n15.737377\n11.491433\n0.443152\n81.273438\n\n\n7\nkeratinocyte\nregion_7\n12.058310\n11.410651\n1.008021\n37.367765\n\n\n8\nkeratinocyte\nregion_8\n9.839488\n7.435609\n1.840557\n72.194326\n\n\n9\nkeratinocyte\nregion_9\n9.762396\n9.006318\n1.027511\n82.574584\n\n\n10\nmacrophage\nregion_1\n12.153733\n11.313708\n1.373964\n33.791712\n\n\n11\nmacrophage\nregion_10\n13.729961\n11.883401\n0.943280\n37.168535\n\n\n12\nmacrophage\nregion_11\n13.436212\n13.851233\n2.692582\n35.541722\n\n\n13\nmacrophage\nregion_2\n9.360803\n8.807030\n0.000000\n25.428822\n\n\n14\nmacrophage\nregion_3\n15.824493\n10.586142\n2.624839\n82.592541\n\n\n15\nmacrophage\nregion_4\n10.673730\n7.864254\n0.707107\n60.328360\n\n\n16\nmacrophage\nregion_5\n18.030333\n10.868533\n1.105341\n128.413083\n\n\n17\nmacrophage\nregion_7\n12.524120\n9.291776\n1.000000\n42.750272\n\n\n18\nmacrophage\nregion_8\n21.218305\n10.655786\n1.794931\n84.945093\n\n\n19\nmacrophage\nregion_9\n9.206533\n7.681363\n0.833600\n57.864155\n\n\n20\nt cell\nregion_1\n8.851605\n7.679430\n0.321218\n35.549790\n\n\n21\nt cell\nregion_10\n10.834249\n8.697919\n0.500000\n52.648323\n\n\n22\nt cell\nregion_11\n11.911482\n9.146366\n0.457433\n61.572358\n\n\n23\nt cell\nregion_2\n12.195435\n8.816336\n0.000000\n63.424592\n\n\n24\nt cell\nregion_3\n8.925282\n6.864764\n0.264401\n64.822835\n\n\n25\nt cell\nregion_4\n7.970098\n6.587342\n0.000000\n50.231347\n\n\n26\nt cell\nregion_5\n8.817685\n5.475750\n0.377260\n73.084812\n\n\n27\nt cell\nregion_7\n10.763346\n7.423672\n0.137033\n58.771590\n\n\n28\nt cell\nregion_8\n14.409407\n7.497366\n0.590302\n79.711982\n\n\n29\nt cell\nregion_9\n7.712074\n6.400335\n0.000000\n80.493224\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in region_1:\n  Level Two Cell Type  mean_distance\n1          macrophage      12.153733\n0        keratinocyte      10.942273\n2              t cell       8.851605\n\nBottom 5 cell types in region_1:\n  Level Two Cell Type  mean_distance\n1          macrophage      12.153733\n0        keratinocyte      10.942273\n2              t cell       8.851605\n\nTop 5 cell types in region_10:\n  Level Two Cell Type  mean_distance\n1          macrophage      13.729961\n0        keratinocyte      12.361319\n2              t cell      10.834249\n\nBottom 5 cell types in region_10:\n  Level Two Cell Type  mean_distance\n1          macrophage      13.729961\n0        keratinocyte      12.361319\n2              t cell      10.834249\n\nTop 5 cell types in region_11:\n  Level Two Cell Type  mean_distance\n1          macrophage      13.436212\n2              t cell      11.911482\n0        keratinocyte      10.196528\n\nBottom 5 cell types in region_11:\n  Level Two Cell Type  mean_distance\n1          macrophage      13.436212\n2              t cell      11.911482\n0        keratinocyte      10.196528\n\nTop 5 cell types in region_2:\n  Level Two Cell Type  mean_distance\n2              t cell      12.195435\n0        keratinocyte      10.745935\n1          macrophage       9.360803\n\nBottom 5 cell types in region_2:\n  Level Two Cell Type  mean_distance\n2              t cell      12.195435\n0        keratinocyte      10.745935\n1          macrophage       9.360803\n\nTop 5 cell types in region_3:\n  Level Two Cell Type  mean_distance\n1          macrophage      15.824493\n0        keratinocyte      10.267738\n2              t cell       8.925282\n\nBottom 5 cell types in region_3:\n  Level Two Cell Type  mean_distance\n1          macrophage      15.824493\n0        keratinocyte      10.267738\n2              t cell       8.925282\n\nTop 5 cell types in region_4:\n  Level Two Cell Type  mean_distance\n1          macrophage      10.673730\n0        keratinocyte       8.793482\n2              t cell       7.970098\n\nBottom 5 cell types in region_4:\n  Level Two Cell Type  mean_distance\n1          macrophage      10.673730\n0        keratinocyte       8.793482\n2              t cell       7.970098\n\nTop 5 cell types in region_5:\n  Level Two Cell Type  mean_distance\n1          macrophage      18.030333\n0        keratinocyte      15.737377\n2              t cell       8.817685\n\nBottom 5 cell types in region_5:\n  Level Two Cell Type  mean_distance\n1          macrophage      18.030333\n0        keratinocyte      15.737377\n2              t cell       8.817685\n\nTop 5 cell types in region_7:\n  Level Two Cell Type  mean_distance\n1          macrophage      12.524120\n0        keratinocyte      12.058310\n2              t cell      10.763346\n\nBottom 5 cell types in region_7:\n  Level Two Cell Type  mean_distance\n1          macrophage      12.524120\n0        keratinocyte      12.058310\n2              t cell      10.763346\n\nTop 5 cell types in region_8:\n  Level Two Cell Type  mean_distance\n1          macrophage      21.218305\n2              t cell      14.409407\n0        keratinocyte       9.839488\n\nBottom 5 cell types in region_8:\n  Level Two Cell Type  mean_distance\n1          macrophage      21.218305\n2              t cell      14.409407\n0        keratinocyte       9.839488\n\nTop 5 cell types in region_9:\n  Level Two Cell Type  mean_distance\n0        keratinocyte       9.762396\n1          macrophage       9.206533\n2              t cell       7.712074\n\nBottom 5 cell types in region_9:\n  Level Two Cell Type  mean_distance\n0        keratinocyte       9.762396\n1          macrophage       9.206533\n2              t cell       7.712074\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in region_1:\n  Level Two Cell Type  median_distance\n1          macrophage        11.313708\n0        keratinocyte        10.290975\n2              t cell         7.679430\n\nBottom 5 cell types in region_1:\n  Level Two Cell Type  median_distance\n1          macrophage        11.313708\n0        keratinocyte        10.290975\n2              t cell         7.679430\n\nTop 5 cell types in region_10:\n  Level Two Cell Type  median_distance\n1          macrophage        11.883401\n0        keratinocyte        11.790882\n2              t cell         8.697919\n\nBottom 5 cell types in region_10:\n  Level Two Cell Type  median_distance\n1          macrophage        11.883401\n0        keratinocyte        11.790882\n2              t cell         8.697919\n\nTop 5 cell types in region_11:\n  Level Two Cell Type  median_distance\n1          macrophage        13.851233\n2              t cell         9.146366\n0        keratinocyte         8.800049\n\nBottom 5 cell types in region_11:\n  Level Two Cell Type  median_distance\n1          macrophage        13.851233\n2              t cell         9.146366\n0        keratinocyte         8.800049\n\nTop 5 cell types in region_2:\n  Level Two Cell Type  median_distance\n0        keratinocyte         9.035553\n2              t cell         8.816336\n1          macrophage         8.807030\n\nBottom 5 cell types in region_2:\n  Level Two Cell Type  median_distance\n0        keratinocyte         9.035553\n2              t cell         8.816336\n1          macrophage         8.807030\n\nTop 5 cell types in region_3:\n  Level Two Cell Type  median_distance\n1          macrophage        10.586142\n0        keratinocyte         9.600986\n2              t cell         6.864764\n\nBottom 5 cell types in region_3:\n  Level Two Cell Type  median_distance\n1          macrophage        10.586142\n0        keratinocyte         9.600986\n2              t cell         6.864764\n\nTop 5 cell types in region_4:\n  Level Two Cell Type  median_distance\n0        keratinocyte         8.015610\n1          macrophage         7.864254\n2              t cell         6.587342\n\nBottom 5 cell types in region_4:\n  Level Two Cell Type  median_distance\n0        keratinocyte         8.015610\n1          macrophage         7.864254\n2              t cell         6.587342\n\nTop 5 cell types in region_5:\n  Level Two Cell Type  median_distance\n0        keratinocyte        11.491433\n1          macrophage        10.868533\n2              t cell         5.475750\n\nBottom 5 cell types in region_5:\n  Level Two Cell Type  median_distance\n0        keratinocyte        11.491433\n1          macrophage        10.868533\n2              t cell         5.475750\n\nTop 5 cell types in region_7:\n  Level Two Cell Type  median_distance\n0        keratinocyte        11.410651\n1          macrophage         9.291776\n2              t cell         7.423672\n\nBottom 5 cell types in region_7:\n  Level Two Cell Type  median_distance\n0        keratinocyte        11.410651\n1          macrophage         9.291776\n2              t cell         7.423672\n\nTop 5 cell types in region_8:\n  Level Two Cell Type  median_distance\n1          macrophage        10.655786\n2              t cell         7.497366\n0        keratinocyte         7.435609\n\nBottom 5 cell types in region_8:\n  Level Two Cell Type  median_distance\n1          macrophage        10.655786\n2              t cell         7.497366\n0        keratinocyte         7.435609\n\nTop 5 cell types in region_9:\n  Level Two Cell Type  median_distance\n0        keratinocyte         9.006318\n1          macrophage         7.681363\n2              t cell         6.400335\n\nBottom 5 cell types in region_9:\n  Level Two Cell Type  median_distance\n0        keratinocyte         9.006318\n1          macrophage         7.681363\n2              t cell         6.400335\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nregion_1       10.34   5.68    54.9\nregion_10      11.73   6.71    57.2\nregion_11      11.08   8.25    74.5\nregion_2       11.32   8.83    78.0\nregion_3        9.74   7.16    73.5\nregion_4        8.40   5.68    67.6\nregion_5       13.18  13.21   100.2\nregion_7       11.39   8.19    71.9\nregion_8       14.01  14.89   106.3\nregion_9        8.92   5.78    64.8\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel Two Cell Type                      \nmacrophage           13.14  13.03    99.2\nt cell                9.90   9.24    93.3\nkeratinocyte         11.33   8.04    71.0\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nkeratinocyte:ddb2+\nregion_1\n10.886045\n10.001243\n1.255159\n26.832704\n\n\n1\nkeratinocyte:ddb2+\nregion_10\n11.629010\n11.056795\n0.707107\n27.110916\n\n\n2\nkeratinocyte:ddb2+\nregion_11\n10.904713\n9.290249\n0.500000\n61.164532\n\n\n3\nkeratinocyte:ddb2+\nregion_2\n9.904681\n8.860067\n0.225471\n40.017169\n\n\n4\nkeratinocyte:ddb2+\nregion_3\n9.982988\n9.486833\n1.085756\n27.698531\n\n\n5\nkeratinocyte:ddb2+\nregion_4\n8.325188\n7.424621\n0.236174\n39.442424\n\n\n6\nkeratinocyte:ddb2+\nregion_5\n16.566213\n12.103718\n0.515830\n81.273438\n\n\n7\nkeratinocyte:ddb2+\nregion_7\n11.048429\n10.779681\n1.704540\n29.504403\n\n\n8\nkeratinocyte:ddb2+\nregion_8\n9.996099\n7.452943\n2.340808\n72.081273\n\n\n9\nkeratinocyte:ddb2+\nregion_9\n9.230936\n8.503737\n1.072485\n65.549106\n\n\n10\nkeratinocyte:ki67+ proliferating\nregion_1\n11.107341\n10.514693\n1.043427\n30.013880\n\n\n11\nkeratinocyte:ki67+ proliferating\nregion_10\n12.695907\n12.298586\n1.414214\n30.695997\n\n\n12\nkeratinocyte:ki67+ proliferating\nregion_11\n8.990549\n8.309499\n1.000000\n48.869088\n\n\n13\nkeratinocyte:ki67+ proliferating\nregion_2\n11.038204\n9.240767\n0.017000\n59.438487\n\n\n14\nkeratinocyte:ki67+ proliferating\nregion_3\n11.058889\n10.331021\n1.582487\n34.270687\n\n\n15\nkeratinocyte:ki67+ proliferating\nregion_4\n8.975061\n8.276537\n0.157318\n41.847939\n\n\n16\nkeratinocyte:ki67+ proliferating\nregion_5\n12.655427\n10.068849\n0.610227\n66.225392\n\n\n17\nkeratinocyte:ki67+ proliferating\nregion_7\n12.502275\n11.833625\n1.008021\n37.367765\n\n\n18\nkeratinocyte:ki67+ proliferating\nregion_8\n10.643492\n7.849747\n1.840557\n32.494578\n\n\n19\nkeratinocyte:ki67+ proliferating\nregion_9\n10.018056\n9.308546\n1.027511\n37.067506\n\n\n20\nkeratinocyte:p53+\nregion_1\n9.158517\n8.938114\n0.725522\n27.715064\n\n\n21\nkeratinocyte:p53+\nregion_10\n11.131305\n9.739514\n2.091030\n30.468399\n\n\n22\nkeratinocyte:p53+\nregion_11\n8.154073\n8.066404\n1.813728\n18.301502\n\n\n23\nkeratinocyte:p53+\nregion_2\n8.990985\n7.118084\n2.137080\n48.503450\n\n\n24\nkeratinocyte:p53+\nregion_3\n8.552662\n8.046103\n0.756604\n23.221158\n\n\n25\nkeratinocyte:p53+\nregion_4\n9.004084\n7.899297\n0.262206\n30.389862\n\n\n26\nkeratinocyte:p53+\nregion_5\n18.590460\n13.883794\n0.443152\n81.273438\n\n\n27\nkeratinocyte:p53+\nregion_7\n9.813049\n8.377985\n1.187188\n29.756854\n\n\n28\nkeratinocyte:p53+\nregion_8\n9.087552\n7.159545\n2.103227\n72.194326\n\n\n29\nkeratinocyte:p53+\nregion_9\n10.087026\n8.807506\n1.717842\n82.574584\n\n\n30\nmacrophage\nregion_1\n12.153733\n11.313708\n1.373964\n33.791712\n\n\n31\nmacrophage\nregion_10\n13.729961\n11.883401\n0.943280\n37.168535\n\n\n32\nmacrophage\nregion_11\n13.436212\n13.851233\n2.692582\n35.541722\n\n\n33\nmacrophage\nregion_2\n9.360803\n8.807030\n0.000000\n25.428822\n\n\n34\nmacrophage\nregion_3\n15.824493\n10.586142\n2.624839\n82.592541\n\n\n35\nmacrophage\nregion_4\n10.673730\n7.864254\n0.707107\n60.328360\n\n\n36\nmacrophage\nregion_5\n18.030333\n10.868533\n1.105341\n128.413083\n\n\n37\nmacrophage\nregion_7\n12.524120\n9.291776\n1.000000\n42.750272\n\n\n38\nmacrophage\nregion_8\n21.218305\n10.655786\n1.794931\n84.945093\n\n\n39\nmacrophage\nregion_9\n9.206533\n7.681363\n0.833600\n57.864155\n\n\n40\nt cell:cd4+\nregion_1\n8.869032\n7.679430\n0.321218\n35.549790\n\n\n41\nt cell:cd4+\nregion_10\n10.829794\n8.514538\n0.500000\n43.185110\n\n\n42\nt cell:cd4+\nregion_11\n12.440926\n9.661269\n0.457433\n61.572358\n\n\n43\nt cell:cd4+\nregion_2\n12.332629\n8.831761\n0.000000\n63.424592\n\n\n44\nt cell:cd4+\nregion_3\n9.109696\n6.992530\n0.264401\n64.822835\n\n\n45\nt cell:cd4+\nregion_4\n8.072624\n6.564481\n0.000000\n42.837025\n\n\n46\nt cell:cd4+\nregion_5\n8.658396\n5.342218\n0.377260\n73.084812\n\n\n47\nt cell:cd4+\nregion_7\n11.133925\n7.529053\n0.137033\n58.771590\n\n\n48\nt cell:cd4+\nregion_8\n14.456483\n7.528339\n0.590302\n79.711982\n\n\n49\nt cell:cd4+\nregion_9\n7.732470\n6.392814\n0.000000\n80.493224\n\n\n50\nt cell:cd8+\nregion_1\n8.244478\n8.892451\n3.640055\n11.552955\n\n\n51\nt cell:cd8+\nregion_10\n7.954718\n7.856321\n1.675344\n13.143165\n\n\n52\nt cell:cd8+\nregion_11\n6.451790\n4.291658\n1.500000\n22.426085\n\n\n53\nt cell:cd8+\nregion_2\n7.394594\n6.544165\n0.275278\n19.435705\n\n\n54\nt cell:cd8+\nregion_3\n5.435333\n4.130929\n1.581139\n12.654643\n\n\n55\nt cell:cd8+\nregion_4\n7.850566\n6.707015\n0.677197\n50.231347\n\n\n56\nt cell:cd8+\nregion_5\n8.027796\n6.068425\n1.270120\n48.840852\n\n\n57\nt cell:cd8+\nregion_7\n8.015370\n5.935751\n2.058033\n38.971945\n\n\n58\nt cell:cd8+\nregion_8\n11.123286\n6.025874\n1.311488\n28.376927\n\n\n59\nt cell:cd8+\nregion_9\n6.739554\n6.994015\n2.087387\n11.492606\n\n\n60\nt cell:regulatory\nregion_1\n8.787226\n7.174825\n0.500000\n24.083189\n\n\n61\nt cell:regulatory\nregion_10\n11.312539\n9.433981\n0.500000\n52.648323\n\n\n62\nt cell:regulatory\nregion_11\n7.093294\n5.994383\n1.383224\n37.513331\n\n\n63\nt cell:regulatory\nregion_2\n11.383476\n11.280465\n3.814076\n22.121709\n\n\n64\nt cell:regulatory\nregion_3\n8.460577\n6.972035\n1.118034\n28.164694\n\n\n65\nt cell:regulatory\nregion_4\n7.487842\n6.726198\n0.435259\n25.976812\n\n\n66\nt cell:regulatory\nregion_5\n10.382237\n7.335038\n1.140175\n55.273500\n\n\n67\nt cell:regulatory\nregion_7\n7.311479\n6.963491\n1.311488\n22.916485\n\n\n68\nt cell:regulatory\nregion_8\n14.454051\n6.118109\n1.414214\n53.684262\n\n\n69\nt cell:regulatory\nregion_9\n7.522635\n6.563314\n2.061553\n28.242256\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in region_1:\n              Level Three Cell Type  mean_distance\n3                        macrophage      12.153733\n1  keratinocyte:ki67+ proliferating      11.107341\n0                keratinocyte:ddb2+      10.886045\n2                keratinocyte:p53+        9.158517\n4                       t cell:cd4+       8.869032\n\nBottom 5 cell types in region_1:\n  Level Three Cell Type  mean_distance\n0    keratinocyte:ddb2+      10.886045\n2    keratinocyte:p53+        9.158517\n4           t cell:cd4+       8.869032\n6     t cell:regulatory       8.787226\n5           t cell:cd8+       8.244478\n\nTop 5 cell types in region_10:\n              Level Three Cell Type  mean_distance\n3                        macrophage      13.729961\n1  keratinocyte:ki67+ proliferating      12.695907\n0                keratinocyte:ddb2+      11.629010\n6                 t cell:regulatory      11.312539\n2                keratinocyte:p53+       11.131305\n\nBottom 5 cell types in region_10:\n  Level Three Cell Type  mean_distance\n0    keratinocyte:ddb2+      11.629010\n6     t cell:regulatory      11.312539\n2    keratinocyte:p53+       11.131305\n4           t cell:cd4+      10.829794\n5           t cell:cd8+       7.954718\n\nTop 5 cell types in region_11:\n              Level Three Cell Type  mean_distance\n3                        macrophage      13.436212\n4                       t cell:cd4+      12.440926\n0                keratinocyte:ddb2+      10.904713\n1  keratinocyte:ki67+ proliferating       8.990549\n2                keratinocyte:p53+        8.154073\n\nBottom 5 cell types in region_11:\n              Level Three Cell Type  mean_distance\n0                keratinocyte:ddb2+      10.904713\n1  keratinocyte:ki67+ proliferating       8.990549\n2                keratinocyte:p53+        8.154073\n6                 t cell:regulatory       7.093294\n5                       t cell:cd8+       6.451790\n\nTop 5 cell types in region_2:\n              Level Three Cell Type  mean_distance\n4                       t cell:cd4+      12.332629\n6                 t cell:regulatory      11.383476\n1  keratinocyte:ki67+ proliferating      11.038204\n0                keratinocyte:ddb2+       9.904681\n3                        macrophage       9.360803\n\nBottom 5 cell types in region_2:\n              Level Three Cell Type  mean_distance\n1  keratinocyte:ki67+ proliferating      11.038204\n0                keratinocyte:ddb2+       9.904681\n3                        macrophage       9.360803\n2                keratinocyte:p53+        8.990985\n5                       t cell:cd8+       7.394594\n\nTop 5 cell types in region_3:\n              Level Three Cell Type  mean_distance\n3                        macrophage      15.824493\n1  keratinocyte:ki67+ proliferating      11.058889\n0                keratinocyte:ddb2+       9.982988\n4                       t cell:cd4+       9.109696\n2                keratinocyte:p53+        8.552662\n\nBottom 5 cell types in region_3:\n  Level Three Cell Type  mean_distance\n0    keratinocyte:ddb2+       9.982988\n4           t cell:cd4+       9.109696\n2    keratinocyte:p53+        8.552662\n6     t cell:regulatory       8.460577\n5           t cell:cd8+       5.435333\n\nTop 5 cell types in region_4:\n              Level Three Cell Type  mean_distance\n3                        macrophage      10.673730\n2                keratinocyte:p53+        9.004084\n1  keratinocyte:ki67+ proliferating       8.975061\n0                keratinocyte:ddb2+       8.325188\n4                       t cell:cd4+       8.072624\n\nBottom 5 cell types in region_4:\n              Level Three Cell Type  mean_distance\n1  keratinocyte:ki67+ proliferating       8.975061\n0                keratinocyte:ddb2+       8.325188\n4                       t cell:cd4+       8.072624\n5                       t cell:cd8+       7.850566\n6                 t cell:regulatory       7.487842\n\nTop 5 cell types in region_5:\n              Level Three Cell Type  mean_distance\n2                keratinocyte:p53+       18.590460\n3                        macrophage      18.030333\n0                keratinocyte:ddb2+      16.566213\n1  keratinocyte:ki67+ proliferating      12.655427\n6                 t cell:regulatory      10.382237\n\nBottom 5 cell types in region_5:\n              Level Three Cell Type  mean_distance\n0                keratinocyte:ddb2+      16.566213\n1  keratinocyte:ki67+ proliferating      12.655427\n6                 t cell:regulatory      10.382237\n4                       t cell:cd4+       8.658396\n5                       t cell:cd8+       8.027796\n\nTop 5 cell types in region_7:\n              Level Three Cell Type  mean_distance\n3                        macrophage      12.524120\n1  keratinocyte:ki67+ proliferating      12.502275\n4                       t cell:cd4+      11.133925\n0                keratinocyte:ddb2+      11.048429\n2                keratinocyte:p53+        9.813049\n\nBottom 5 cell types in region_7:\n  Level Three Cell Type  mean_distance\n4           t cell:cd4+      11.133925\n0    keratinocyte:ddb2+      11.048429\n2    keratinocyte:p53+        9.813049\n5           t cell:cd8+       8.015370\n6     t cell:regulatory       7.311479\n\nTop 5 cell types in region_8:\n              Level Three Cell Type  mean_distance\n3                        macrophage      21.218305\n4                       t cell:cd4+      14.456483\n6                 t cell:regulatory      14.454051\n5                       t cell:cd8+      11.123286\n1  keratinocyte:ki67+ proliferating      10.643492\n\nBottom 5 cell types in region_8:\n              Level Three Cell Type  mean_distance\n6                 t cell:regulatory      14.454051\n5                       t cell:cd8+      11.123286\n1  keratinocyte:ki67+ proliferating      10.643492\n0                keratinocyte:ddb2+       9.996099\n2                keratinocyte:p53+        9.087552\n\nTop 5 cell types in region_9:\n              Level Three Cell Type  mean_distance\n2                keratinocyte:p53+       10.087026\n1  keratinocyte:ki67+ proliferating      10.018056\n0                keratinocyte:ddb2+       9.230936\n3                        macrophage       9.206533\n4                       t cell:cd4+       7.732470\n\nBottom 5 cell types in region_9:\n  Level Three Cell Type  mean_distance\n0    keratinocyte:ddb2+       9.230936\n3            macrophage       9.206533\n4           t cell:cd4+       7.732470\n6     t cell:regulatory       7.522635\n5           t cell:cd8+       6.739554\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in region_1:\n              Level Three Cell Type  median_distance\n3                        macrophage        11.313708\n1  keratinocyte:ki67+ proliferating        10.514693\n0                keratinocyte:ddb2+        10.001243\n2                keratinocyte:p53+          8.938114\n5                       t cell:cd8+         8.892451\n\nBottom 5 cell types in region_1:\n  Level Three Cell Type  median_distance\n0    keratinocyte:ddb2+        10.001243\n2    keratinocyte:p53+          8.938114\n5           t cell:cd8+         8.892451\n4           t cell:cd4+         7.679430\n6     t cell:regulatory         7.174825\n\nTop 5 cell types in region_10:\n              Level Three Cell Type  median_distance\n1  keratinocyte:ki67+ proliferating        12.298586\n3                        macrophage        11.883401\n0                keratinocyte:ddb2+        11.056795\n2                keratinocyte:p53+          9.739514\n6                 t cell:regulatory         9.433981\n\nBottom 5 cell types in region_10:\n  Level Three Cell Type  median_distance\n0    keratinocyte:ddb2+        11.056795\n2    keratinocyte:p53+          9.739514\n6     t cell:regulatory         9.433981\n4           t cell:cd4+         8.514538\n5           t cell:cd8+         7.856321\n\nTop 5 cell types in region_11:\n              Level Three Cell Type  median_distance\n3                        macrophage        13.851233\n4                       t cell:cd4+         9.661269\n0                keratinocyte:ddb2+         9.290249\n1  keratinocyte:ki67+ proliferating         8.309499\n2                keratinocyte:p53+          8.066404\n\nBottom 5 cell types in region_11:\n              Level Three Cell Type  median_distance\n0                keratinocyte:ddb2+         9.290249\n1  keratinocyte:ki67+ proliferating         8.309499\n2                keratinocyte:p53+          8.066404\n6                 t cell:regulatory         5.994383\n5                       t cell:cd8+         4.291658\n\nTop 5 cell types in region_2:\n              Level Three Cell Type  median_distance\n6                 t cell:regulatory        11.280465\n1  keratinocyte:ki67+ proliferating         9.240767\n0                keratinocyte:ddb2+         8.860067\n4                       t cell:cd4+         8.831761\n3                        macrophage         8.807030\n\nBottom 5 cell types in region_2:\n  Level Three Cell Type  median_distance\n0    keratinocyte:ddb2+         8.860067\n4           t cell:cd4+         8.831761\n3            macrophage         8.807030\n2    keratinocyte:p53+          7.118084\n5           t cell:cd8+         6.544165\n\nTop 5 cell types in region_3:\n              Level Three Cell Type  median_distance\n3                        macrophage        10.586142\n1  keratinocyte:ki67+ proliferating        10.331021\n0                keratinocyte:ddb2+         9.486833\n2                keratinocyte:p53+          8.046103\n4                       t cell:cd4+         6.992530\n\nBottom 5 cell types in region_3:\n  Level Three Cell Type  median_distance\n0    keratinocyte:ddb2+         9.486833\n2    keratinocyte:p53+          8.046103\n4           t cell:cd4+         6.992530\n6     t cell:regulatory         6.972035\n5           t cell:cd8+         4.130929\n\nTop 5 cell types in region_4:\n              Level Three Cell Type  median_distance\n1  keratinocyte:ki67+ proliferating         8.276537\n2                keratinocyte:p53+          7.899297\n3                        macrophage         7.864254\n0                keratinocyte:ddb2+         7.424621\n6                 t cell:regulatory         6.726198\n\nBottom 5 cell types in region_4:\n  Level Three Cell Type  median_distance\n3            macrophage         7.864254\n0    keratinocyte:ddb2+         7.424621\n6     t cell:regulatory         6.726198\n5           t cell:cd8+         6.707015\n4           t cell:cd4+         6.564481\n\nTop 5 cell types in region_5:\n              Level Three Cell Type  median_distance\n2                keratinocyte:p53+         13.883794\n0                keratinocyte:ddb2+        12.103718\n3                        macrophage        10.868533\n1  keratinocyte:ki67+ proliferating        10.068849\n6                 t cell:regulatory         7.335038\n\nBottom 5 cell types in region_5:\n              Level Three Cell Type  median_distance\n3                        macrophage        10.868533\n1  keratinocyte:ki67+ proliferating        10.068849\n6                 t cell:regulatory         7.335038\n5                       t cell:cd8+         6.068425\n4                       t cell:cd4+         5.342218\n\nTop 5 cell types in region_7:\n              Level Three Cell Type  median_distance\n1  keratinocyte:ki67+ proliferating        11.833625\n0                keratinocyte:ddb2+        10.779681\n3                        macrophage         9.291776\n2                keratinocyte:p53+          8.377985\n4                       t cell:cd4+         7.529053\n\nBottom 5 cell types in region_7:\n  Level Three Cell Type  median_distance\n3            macrophage         9.291776\n2    keratinocyte:p53+          8.377985\n4           t cell:cd4+         7.529053\n6     t cell:regulatory         6.963491\n5           t cell:cd8+         5.935751\n\nTop 5 cell types in region_8:\n              Level Three Cell Type  median_distance\n3                        macrophage        10.655786\n1  keratinocyte:ki67+ proliferating         7.849747\n4                       t cell:cd4+         7.528339\n0                keratinocyte:ddb2+         7.452943\n2                keratinocyte:p53+          7.159545\n\nBottom 5 cell types in region_8:\n  Level Three Cell Type  median_distance\n4           t cell:cd4+         7.528339\n0    keratinocyte:ddb2+         7.452943\n2    keratinocyte:p53+          7.159545\n6     t cell:regulatory         6.118109\n5           t cell:cd8+         6.025874\n\nTop 5 cell types in region_9:\n              Level Three Cell Type  median_distance\n1  keratinocyte:ki67+ proliferating         9.308546\n2                keratinocyte:p53+          8.807506\n0                keratinocyte:ddb2+         8.503737\n3                        macrophage         7.681363\n5                       t cell:cd8+         6.994015\n\nBottom 5 cell types in region_9:\n  Level Three Cell Type  median_distance\n0    keratinocyte:ddb2+         8.503737\n3            macrophage         7.681363\n5           t cell:cd8+         6.994015\n6     t cell:regulatory         6.563314\n4           t cell:cd4+         6.392814\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nregion_1       10.34   5.68    54.9\nregion_10      11.73   6.71    57.2\nregion_11      11.08   8.25    74.5\nregion_2       11.32   8.83    78.0\nregion_3        9.74   7.16    73.5\nregion_4        8.40   5.68    67.6\nregion_5       13.18  13.21   100.2\nregion_7       11.39   8.19    71.9\nregion_8       14.01  14.89   106.3\nregion_9        8.92   5.78    64.8\n\nCell Type Variability Analysis (sorted by CV):\n                                   mean    std  CV (%)\nLevel Three Cell Type                                 \nmacrophage                        13.14  13.03    99.2\nt cell:cd4+                       10.09   9.48    94.0\nkeratinocyte:p53+                 12.61  11.55    91.6\nt cell:regulatory                  8.75   7.19    82.2\nt cell:cd8+                        7.53   6.14    81.5\nkeratinocyte:ddb2+                11.57   8.94    77.3\nkeratinocyte:ki67+ proliferating  10.91   6.36    58.3\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.",
    "crumbs": [
      "Distance Analysis: skin-celldive-ge"
    ]
  },
  {
    "objectID": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html",
    "href": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html",
    "title": "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"tonsil-esophagus-codex-stanford\" # This variable is used only for figures.\ndataset_dir_1 = \"tonsil-codex-stanford\" # This variable is used for data loading dataset 1.\ndataset_dir_2 = \"esophagus-codex-stanford\" # This variable is used for data loading dataset 2.\ndata_filedir_1 = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir_1)\noutput_edge_dir_1 = os.path.join(\"data-processed-edges\", dataset_dir_1)\ndata_filedir_2 = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir_2)\noutput_edge_dir_2 = os.path.join(\"data-processed-edges\", dataset_dir_2)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\n# Read all datasets from Dataset 1\ndf_all_nodes_1, df_all_edges_1, df_all_edges_with_cell_types_1 = read_all_edge_datasets(basepath, data_filedir_1, output_edge_dir_1)\n\n# Create a column 'Tissue Type' in all three DataFrames with the value dataset_dir_1\ndf_all_nodes_1['Tissue Type'] = dataset_dir_1\ndf_all_edges_1['Tissue Type'] = dataset_dir_1\ndf_all_edges_with_cell_types_1['Tissue Type'] = dataset_dir_1\n\n# Read all datasets from Dataset 2\ndf_all_nodes_2, df_all_edges_2, df_all_edges_with_cell_types_2 = read_all_edge_datasets(basepath, data_filedir_2, output_edge_dir_2)\n\n# Create a column 'Tissue Type' in all three DataFrames with the value dataset_dir_2\ndf_all_nodes_2['Tissue Type'] = dataset_dir_2\ndf_all_edges_2['Tissue Type'] = dataset_dir_2\ndf_all_edges_with_cell_types_2['Tissue Type'] = dataset_dir_2\n\n# Merge the two datasets\ndf_all_nodes = pd.concat([df_all_nodes_1, df_all_nodes_2], ignore_index=True)\ndf_all_edges = pd.concat([df_all_edges_1, df_all_edges_2], ignore_index=True)\ndf_all_edges_with_cell_types = pd.concat([df_all_edges_with_cell_types_1, df_all_edges_with_cell_types_2], ignore_index=True)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nTissue Type\n\n\n\n\n0\n148.538\n1325.532\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n1\n2061.813\n928.551\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n2\n944.762\n1806.961\nPDPN\nstromal cell:podoplanin+\nstromal cell:podoplanin-positive\nCL:0000499\nskos:narrowMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n3\n3367.741\n300.092\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n4\n1806.961\n710.645\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 13\nLevel Three Cell Type: 13\nLevel Two Cell Type: 11\nLevel One Cell Type: 5\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# Create a dictionary to map skin regions to correct condition.\nregion_map = {dataset_dir_1:'tonsil-codex-stanford',\n dataset_dir_2:'esophagus-codex-stanford', \n}\n\n# Define the standard region sequence for plots\nregions = ['tonsil-codex-stanford', 'esophagus-codex-stanford']\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nTissue Type\n\n\n\n\n0\n148.538\n1325.532\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n1\n2061.813\n928.551\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n2\n944.762\n1806.961\nPDPN\nstromal cell:podoplanin+\nstromal cell:podoplanin-positive\nCL:0000499\nskos:narrowMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n3\n3367.741\n300.092\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n4\n1806.961\n710.645\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Tissue Type\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Tissue Type'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Tissue Type', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nTissue Type\nUnique Region\n\n\n\n\n0\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n1\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n2\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n3\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n4\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['tonsil-codex-stanford' 'esophagus-codex-stanford']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\ntonsil-codex-stanford: 1\nesophagus-codex-stanford: 1",
    "crumbs": [
      "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nTissue Type\n\n\n\n\n0\n0\n148.538\n1325.532\n0\n96.889\n1333.449\n0\n52.252254\ntonsil\nendothelial cell\nLevel Three Cell Type\ntonsil-codex-stanford\n\n\n1\n190\n183.599\n1254.656\n0\n96.889\n1333.449\n0\n117.162114\ntonsil\nendothelial cell\nLevel Three Cell Type\ntonsil-codex-stanford\n\n\n2\n242\n180.583\n1235.052\n0\n109.330\n1150.227\n0\n110.780281\ntonsil\nendothelial cell\nLevel Three Cell Type\ntonsil-codex-stanford\n\n\n3\n609\n163.618\n1238.445\n0\n109.330\n1150.227\n0\n103.583794\ntonsil\nendothelial cell\nLevel Three Cell Type\ntonsil-codex-stanford\n\n\n4\n836\n88.595\n1252.394\n0\n56.550\n1316.484\n0\n71.654798\ntonsil\nendothelial cell\nLevel Three Cell Type\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Tissue Type\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Tissue Type'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Tissue Type', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nTissue Type\nUnique Region\n\n\n\n\n0\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n1\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n2\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n3\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n4\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['tonsil-codex-stanford' 'esophagus-codex-stanford']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\ntonsil-codex-stanford: 1\nesophagus-codex-stanford: 1\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Tissue Type'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Tissue Type', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nTissue Type\nUnique Region\n\n\n\n\n0\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n1\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n2\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n3\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n4\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nTissue Type\nUnique Region\n\n\n\n\n0\n148.538\n1325.532\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nTissue Type\nUnique Region\n\n\n\n\n0\n0\n148.538\n1325.532\n0\n96.889\n1333.449\n0\n52.252254\ntonsil\nendothelial cell\nLevel Three Cell Type\ntonsil-codex-stanford\ntonsil-codex-stanford\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nTissue Type\nUnique Region\n\n\n\n\n0\n0\n148.538\n1325.532\n0\n96.889\n1333.449\n0\n52.252254\ntonsil\nendothelial cell\nLevel Three Cell Type\nlymphoid cell:innate\nlymphoid cell\nimmune cell\ntonsil-codex-stanford\ntonsil-codex-stanford",
    "crumbs": [
      "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#node-analysis",
    "href": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#node-analysis",
    "title": "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#distance-analysis",
    "href": "distance_analysis__tonsil-codex-stanford-esophagus-codex-stanford.html#distance-analysis",
    "title": "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nesophagus-codex-stanford\nendothelial cell\nLevel One Cell Type\n26.201365\n21.751953\n2.384357\n193.046457\n\n\n1\nesophagus-codex-stanford\nendothelial cell\nLevel Three Cell Type\n26.201365\n21.751953\n2.384357\n193.046457\n\n\n2\nesophagus-codex-stanford\nendothelial cell\nLevel Two Cell Type\n26.201365\n21.751953\n2.384357\n193.046457\n\n\n3\ntonsil-codex-stanford\nendothelial cell\nLevel One Cell Type\n56.899226\n45.210144\n2.639000\n199.993437\n\n\n4\ntonsil-codex-stanford\nendothelial cell\nLevel Three Cell Type\n56.899226\n45.210144\n2.639000\n199.993437\n\n\n5\ntonsil-codex-stanford\nendothelial cell\nLevel Two Cell Type\n56.899226\n45.210144\n2.639000\n199.993437\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nesophagus-codex-stanford\n25.325414\n21.492307\n2.528993\n193.046457\n\n\n1\nepithelial cell\ntonsil-codex-stanford\n65.469626\n55.553479\n4.060414\n199.673736\n\n\n2\nimmune cell\nesophagus-codex-stanford\n21.482974\n15.712354\n2.639000\n143.075846\n\n\n3\nimmune cell\ntonsil-codex-stanford\n56.521626\n44.457236\n2.639000\n199.993437\n\n\n4\nmesenchymal cell\nesophagus-codex-stanford\n29.463088\n25.393686\n2.384357\n142.577791\n\n\n5\nmesenchymal cell\ntonsil-codex-stanford\n57.159447\n47.676714\n3.108822\n199.931243\n\n\n6\nneural cell\nesophagus-codex-stanford\n26.639884\n22.024674\n3.788803\n107.653801\n\n\n7\nneural cell\ntonsil-codex-stanford\n66.127466\n57.077850\n6.409000\n194.409948\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in tonsil-codex-stanford:\n  Level One Cell Type  mean_distance\n3         neural cell      66.127466\n0     epithelial cell      65.469626\n2    mesenchymal cell      57.159447\n1         immune cell      56.521626\n\nBottom 5 cell types in tonsil-codex-stanford:\n  Level One Cell Type  mean_distance\n3         neural cell      66.127466\n0     epithelial cell      65.469626\n2    mesenchymal cell      57.159447\n1         immune cell      56.521626\n\nTop 5 cell types in esophagus-codex-stanford:\n  Level One Cell Type  mean_distance\n2    mesenchymal cell      29.463088\n3         neural cell      26.639884\n0     epithelial cell      25.325414\n1         immune cell      21.482974\n\nBottom 5 cell types in esophagus-codex-stanford:\n  Level One Cell Type  mean_distance\n2    mesenchymal cell      29.463088\n3         neural cell      26.639884\n0     epithelial cell      25.325414\n1         immune cell      21.482974\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in tonsil-codex-stanford:\n  Level One Cell Type  median_distance\n3         neural cell        57.077850\n0     epithelial cell        55.553479\n2    mesenchymal cell        47.676714\n1         immune cell        44.457236\n\nBottom 5 cell types in tonsil-codex-stanford:\n  Level One Cell Type  median_distance\n3         neural cell        57.077850\n0     epithelial cell        55.553479\n2    mesenchymal cell        47.676714\n1         immune cell        44.457236\n\nTop 5 cell types in esophagus-codex-stanford:\n  Level One Cell Type  median_distance\n2    mesenchymal cell        25.393686\n3         neural cell        22.024674\n0     epithelial cell        21.492307\n1         immune cell        15.712354\n\nBottom 5 cell types in esophagus-codex-stanford:\n  Level One Cell Type  median_distance\n2    mesenchymal cell        25.393686\n3         neural cell        22.024674\n0     epithelial cell        21.492307\n1         immune cell        15.712354\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                          mean    std  CV (%)\nUnique Region                                \nesophagus-codex-stanford  26.2  17.46    66.6\ntonsil-codex-stanford     56.9  42.08    74.0\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nepithelial cell      34.36  29.16    84.9\nneural cell          31.35  24.62    78.5\nmesenchymal cell     45.67  35.37    77.4\nimmune cell          54.77  42.25    77.1\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(2, 1, figsize=(10, 15)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n# Generate Split Violin Plot\ndef plot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", hue=\"Unique Region\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=True, palette='Spectral', alpha=.9, hue_order=regions)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size, loc='upper right', bbox_to_anchor=(1.15, 1))\n\n    plt.title(f'Split violin plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel('Cell Type', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nesophagus-codex-stanford\n18.969648\n16.016955\n3.881453\n126.909646\n\n\n1\nb cell\ntonsil-codex-stanford\n53.795103\n45.373324\n3.016000\n199.787236\n\n\n2\ngland epithelium cell\nesophagus-codex-stanford\n24.161285\n20.704132\n2.528993\n193.046457\n\n\n3\nlymphoid cell\nesophagus-codex-stanford\n22.645679\n15.703303\n2.639000\n143.075846\n\n\n4\nlymphoid cell\ntonsil-codex-stanford\n71.002055\n53.958434\n3.016000\n199.993437\n\n\n5\nmuscle cell\nesophagus-codex-stanford\n29.075721\n25.112275\n3.371991\n121.626183\n\n\n6\nmuscle cell\ntonsil-codex-stanford\n14.724496\n11.403859\n4.214988\n59.595818\n\n\n7\nneuron\nesophagus-codex-stanford\n26.639884\n22.024674\n3.788803\n107.653801\n\n\n8\nneuron\ntonsil-codex-stanford\n66.127466\n57.077850\n6.409000\n194.409948\n\n\n9\npaneth cell\nesophagus-codex-stanford\n40.358060\n42.616011\n4.586403\n75.125232\n\n\n10\nsecretory cell of esophagus\nesophagus-codex-stanford\n24.726692\n22.005202\n2.871146\n87.171824\n\n\n11\nsquamous epithelial cell\nesophagus-codex-stanford\n37.731198\n35.148048\n4.723796\n127.522444\n\n\n12\nsquamous epithelial cell\ntonsil-codex-stanford\n65.469626\n55.553479\n4.060414\n199.673736\n\n\n13\nstromal cell\nesophagus-codex-stanford\n30.144150\n26.062121\n2.384357\n142.577791\n\n\n14\nstromal cell\ntonsil-codex-stanford\n57.484964\n47.978342\n3.108822\n199.931243\n\n\n15\nt cell\nesophagus-codex-stanford\n20.056056\n15.309171\n3.413880\n111.112076\n\n\n16\nt cell\ntonsil-codex-stanford\n44.040178\n38.233451\n2.639000\n199.934442\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in tonsil-codex-stanford:\n        Level Two Cell Type  mean_distance\n1             lymphoid cell      71.002055\n3                    neuron      66.127466\n4  squamous epithelial cell      65.469626\n5              stromal cell      57.484964\n0                    b cell      53.795103\n\nBottom 5 cell types in tonsil-codex-stanford:\n        Level Two Cell Type  mean_distance\n4  squamous epithelial cell      65.469626\n5              stromal cell      57.484964\n0                    b cell      53.795103\n6                    t cell      44.040178\n2               muscle cell      14.724496\n\nTop 5 cell types in esophagus-codex-stanford:\n        Level Two Cell Type  mean_distance\n5               paneth cell      40.358060\n7  squamous epithelial cell      37.731198\n8              stromal cell      30.144150\n3               muscle cell      29.075721\n4                    neuron      26.639884\n\nBottom 5 cell types in esophagus-codex-stanford:\n           Level Two Cell Type  mean_distance\n6  secretory cell of esophagus      24.726692\n1        gland epithelium cell      24.161285\n2                lymphoid cell      22.645679\n9                       t cell      20.056056\n0                       b cell      18.969648\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in tonsil-codex-stanford:\n        Level Two Cell Type  median_distance\n3                    neuron        57.077850\n4  squamous epithelial cell        55.553479\n1             lymphoid cell        53.958434\n5              stromal cell        47.978342\n0                    b cell        45.373324\n\nBottom 5 cell types in tonsil-codex-stanford:\n  Level Two Cell Type  median_distance\n1       lymphoid cell        53.958434\n5        stromal cell        47.978342\n0              b cell        45.373324\n6              t cell        38.233451\n2         muscle cell        11.403859\n\nTop 5 cell types in esophagus-codex-stanford:\n        Level Two Cell Type  median_distance\n5               paneth cell        42.616011\n7  squamous epithelial cell        35.148048\n8              stromal cell        26.062121\n3               muscle cell        25.112275\n4                    neuron        22.024674\n\nBottom 5 cell types in esophagus-codex-stanford:\n           Level Two Cell Type  median_distance\n6  secretory cell of esophagus        22.005202\n1        gland epithelium cell        20.704132\n0                       b cell        16.016955\n2                lymphoid cell        15.703303\n9                       t cell        15.309171\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                          mean    std  CV (%)\nUnique Region                                \nesophagus-codex-stanford  26.2  17.46    66.6\ntonsil-codex-stanford     56.9  42.08    74.0\n\nCell Type Variability Analysis (sorted by CV):\n                              mean    std  CV (%)\nLevel Two Cell Type                              \nneuron                       31.35  24.62    78.5\nlymphoid cell                67.06  52.45    78.2\nstromal cell                 51.86  38.02    73.3\nb cell                       52.62  36.47    69.3\nsquamous epithelial cell     60.43  39.56    65.5\nt cell                       43.36  28.24    65.1\nmuscle cell                  28.84  18.34    63.6\ngland epithelium cell        24.16  14.80    61.3\nsecretory cell of esophagus  24.73  14.31    57.9\npaneth cell                  40.36  16.31    40.4\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\ntonsil-codex-stanford\n55.759563\n47.530416\n3.016000\n199.787236\n\n\n1\nepithelial cell:secretory\nesophagus-codex-stanford\n24.726692\n22.005202\n2.871146\n87.171824\n\n\n2\nglandular cell of esophagus\nesophagus-codex-stanford\n24.161285\n20.704132\n2.528993\n193.046457\n\n\n3\nlymphoid cell:innate\nesophagus-codex-stanford\n22.645679\n15.703303\n2.639000\n143.075846\n\n\n4\nlymphoid cell:innate\ntonsil-codex-stanford\n71.002055\n53.958434\n3.016000\n199.993437\n\n\n5\nmuscle cell:smooth\nesophagus-codex-stanford\n29.075721\n25.112275\n3.371991\n121.626183\n\n\n6\nmuscle cell:smooth\ntonsil-codex-stanford\n14.724496\n11.403859\n4.214988\n59.595818\n\n\n7\nneuron\nesophagus-codex-stanford\n26.639884\n22.024674\n3.788803\n107.653801\n\n\n8\nneuron\ntonsil-codex-stanford\n66.127466\n57.077850\n6.409000\n194.409948\n\n\n9\npaneth cell\nesophagus-codex-stanford\n40.358060\n42.616011\n4.586403\n75.125232\n\n\n10\nplasma cell\nesophagus-codex-stanford\n18.969648\n16.016955\n3.881453\n126.909646\n\n\n11\nplasma cell\ntonsil-codex-stanford\n26.122452\n18.626242\n3.039471\n195.892407\n\n\n12\nsquamous epithelial cell\nesophagus-codex-stanford\n37.731198\n35.148048\n4.723796\n127.522444\n\n\n13\nsquamous epithelial cell\ntonsil-codex-stanford\n65.469626\n55.553479\n4.060414\n199.673736\n\n\n14\nstromal cell\nesophagus-codex-stanford\n29.426691\n24.946174\n2.384357\n142.577791\n\n\n15\nstromal cell\ntonsil-codex-stanford\n58.536073\n46.646038\n3.108822\n199.931243\n\n\n16\nstromal cell:podoplanin+\nesophagus-codex-stanford\n33.455139\n30.538157\n3.713019\n107.070655\n\n\n17\nstromal cell:podoplanin+\ntonsil-codex-stanford\n56.732338\n48.751217\n3.221089\n199.928400\n\n\n18\nt cell\nesophagus-codex-stanford\n20.056056\n15.309171\n3.413880\n111.112076\n\n\n19\nt cell\ntonsil-codex-stanford\n44.040178\n38.233451\n2.639000\n199.934442\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in tonsil-codex-stanford:\n      Level Three Cell Type  mean_distance\n1      lymphoid cell:innate      71.002055\n3                    neuron      66.127466\n5  squamous epithelial cell      65.469626\n6              stromal cell      58.536073\n7  stromal cell:podoplanin+      56.732338\n\nBottom 5 cell types in tonsil-codex-stanford:\n      Level Three Cell Type  mean_distance\n7  stromal cell:podoplanin+      56.732338\n0                    b cell      55.759563\n8                    t cell      44.040178\n4               plasma cell      26.122452\n2        muscle cell:smooth      14.724496\n\nTop 5 cell types in esophagus-codex-stanford:\n      Level Three Cell Type  mean_distance\n5               paneth cell      40.358060\n7  squamous epithelial cell      37.731198\n9  stromal cell:podoplanin+      33.455139\n8              stromal cell      29.426691\n3        muscle cell:smooth      29.075721\n\nBottom 5 cell types in esophagus-codex-stanford:\n          Level Three Cell Type  mean_distance\n0     epithelial cell:secretory      24.726692\n1   glandular cell of esophagus      24.161285\n2          lymphoid cell:innate      22.645679\n10                       t cell      20.056056\n6                   plasma cell      18.969648\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in tonsil-codex-stanford:\n      Level Three Cell Type  median_distance\n3                    neuron        57.077850\n5  squamous epithelial cell        55.553479\n1      lymphoid cell:innate        53.958434\n7  stromal cell:podoplanin+        48.751217\n0                    b cell        47.530416\n\nBottom 5 cell types in tonsil-codex-stanford:\n  Level Three Cell Type  median_distance\n0                b cell        47.530416\n6          stromal cell        46.646038\n8                t cell        38.233451\n4           plasma cell        18.626242\n2    muscle cell:smooth        11.403859\n\nTop 5 cell types in esophagus-codex-stanford:\n      Level Three Cell Type  median_distance\n5               paneth cell        42.616011\n7  squamous epithelial cell        35.148048\n9  stromal cell:podoplanin+        30.538157\n3        muscle cell:smooth        25.112275\n8              stromal cell        24.946174\n\nBottom 5 cell types in esophagus-codex-stanford:\n          Level Three Cell Type  median_distance\n0     epithelial cell:secretory        22.005202\n1   glandular cell of esophagus        20.704132\n6                   plasma cell        16.016955\n2          lymphoid cell:innate        15.703303\n10                       t cell        15.309171\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                          mean    std  CV (%)\nUnique Region                                \nesophagus-codex-stanford  26.2  17.46    66.6\ntonsil-codex-stanford     56.9  42.08    74.0\n\nCell Type Variability Analysis (sorted by CV):\n                              mean    std  CV (%)\nLevel Three Cell Type                            \nplasma cell                  23.66  20.60    87.1\nstromal cell                 48.70  39.75    81.6\nneuron                       31.35  24.62    78.5\nlymphoid cell:innate         67.06  52.45    78.2\nsquamous epithelial cell     60.43  39.56    65.5\nb cell                       55.76  36.44    65.4\nstromal cell:podoplanin+     55.02  35.92    65.3\nt cell                       43.36  28.24    65.1\nmuscle cell:smooth           28.84  18.34    63.6\nglandular cell of esophagus  24.16  14.80    61.3\nepithelial cell:secretory    24.73  14.31    57.9\npaneth cell                  40.36  16.31    40.4\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.",
    "crumbs": [
      "Distance Analysis: tonsil-codex-stanford and esophagus-codex-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__oralcavity-codex-czi.html",
    "href": "distance_analysis__oralcavity-codex-czi.html",
    "title": "Distance Analysis: oralcavity-codex-czi",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"oralcavity-codex-czi\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: oralcavity-codex-czi"
    ]
  },
  {
    "objectID": "distance_analysis__oralcavity-codex-czi.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__oralcavity-codex-czi.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: oralcavity-codex-czi",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n2466.85\n580.95\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n1\n2421.30\n629.05\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n2\n2459.00\n681.80\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n3\n2418.20\n700.00\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n4\n2444.70\n768.30\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 39\nLevel Three Cell Type: 28\nLevel Two Cell Type: 20\nLevel One Cell Type: 6\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Vascular Endothelial Cells\n  - Lymphatic Endothelial Cells\n\nLevel Three Cell Type:\n  - endothelial cell of vascular tree\n  - endothelial cell of lymphatic vessel\n\nLevel Two Cell Type:\n  - endothelial cell of vascular tree\n  - endothelial cell of lymphatic vessel\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell of vascular tree',\n    'Level Two Cell Type': 'endothelial cell of vascular tree',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: oralcavity-codex-czi"
    ]
  },
  {
    "objectID": "distance_analysis__oralcavity-codex-czi.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__oralcavity-codex-czi.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: oralcavity-codex-czi",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# Create a dictionary to map oral cavity regions to correct region names.\nregion_map = {'Buccal_Mucosa_And_Minor_Salivary_Glands_1':'Buccal Mucosa And Minor Salivary Glands',\n 'Buccal_Mucosa_And_Minor_Salivary_Glands_2':'Buccal Mucosa And Minor Salivary Glands', \n 'Gingiva_ID1_shiny':'Gingiva',\n 'Gingiva_ID5_shiny':'Gingiva', \n 'Parotid_1':'Parotid', \n 'Parotid_2':'Parotid', \n 'Parotid_3':'Parotid', \n 'Parotid_4':'Parotid',\n 'Submandibular_1':'Submandibular', \n 'Submandibular_2':'Submandibular', \n 'Tongue_3':'Tongue', \n 'Tongue__1':'Tongue', \n 'Tongue__2':'Tongue'\n}\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n2466.85\n580.95\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n1\n2421.30\n629.05\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n2\n2459.00\n681.80\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n3\n2418.20\n700.00\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n4\n2444.70\n768.30\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n1\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n2\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n3\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n4\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['Buccal Mucosa And Minor Salivary Glands' 'Gingiva' 'Parotid'\n 'Submandibular' 'Tongue']\nTotal number of unique regions: 5\n\nNumber of unique datasets per unique region:\nBuccal Mucosa And Minor Salivary Glands: 2\nGingiva: 2\nParotid: 4\nSubmandibular: 2\nTongue: 3",
    "crumbs": [
      "Distance Analysis: oralcavity-codex-czi"
    ]
  },
  {
    "objectID": "distance_analysis__oralcavity-codex-czi.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__oralcavity-codex-czi.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: oralcavity-codex-czi",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n2466.85\n580.950\n0\n2600.55\n598.700\n0\n134.873098\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nendothelial cell of vascular tree\nLevel Three Cell Type\n\n\n1\n759\n2595.45\n407.850\n0\n2689.10\n404.285\n0\n93.717830\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nendothelial cell of vascular tree\nLevel Three Cell Type\n\n\n2\n782\n2599.45\n413.290\n0\n2689.10\n404.285\n0\n90.101124\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nendothelial cell of vascular tree\nLevel Three Cell Type\n\n\n3\n840\n2588.60\n414.555\n0\n2689.10\n404.285\n0\n101.023378\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nendothelial cell of vascular tree\nLevel Three Cell Type\n\n\n4\n869\n2583.50\n419.190\n0\n2689.10\n404.285\n0\n106.646702\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nendothelial cell of vascular tree\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n1\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n2\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n3\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n4\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['Buccal Mucosa And Minor Salivary Glands' 'Gingiva' 'Parotid'\n 'Submandibular' 'Tongue']\nTotal number of unique regions: 5\n\nNumber of unique datasets per unique region:\nBuccal Mucosa And Minor Salivary Glands: 2\nGingiva: 2\nParotid: 4\nSubmandibular: 2\nTongue: 3\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n1\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n2\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n3\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n4\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n2466.85\n580.95\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nBuccal Mucosa And Minor Salivary Glands\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n0\n2466.85\n580.95\n0\n2600.55\n598.7\n0\n134.873098\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nendothelial cell of vascular tree\nLevel Three Cell Type\nBuccal Mucosa And Minor Salivary Glands\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n0\n2466.85\n580.95\n0\n2600.55\n598.7\n0\n134.873098\nBuccal_Mucosa_And_Minor_Salivary_Glands_1\nendothelial cell of vascular tree\nLevel Three Cell Type\nunknown cell\nunknown cell\nunknown cell\nBuccal Mucosa And Minor Salivary Glands",
    "crumbs": [
      "Distance Analysis: oralcavity-codex-czi"
    ]
  },
  {
    "objectID": "distance_analysis__oralcavity-codex-czi.html#node-analysis",
    "href": "distance_analysis__oralcavity-codex-czi.html#node-analysis",
    "title": "Distance Analysis: oralcavity-codex-czi",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: oralcavity-codex-czi"
    ]
  },
  {
    "objectID": "distance_analysis__oralcavity-codex-czi.html#distance-analysis",
    "href": "distance_analysis__oralcavity-codex-czi.html#distance-analysis",
    "title": "Distance Analysis: oralcavity-codex-czi",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nBuccal Mucosa And Minor Salivary Glands\nendothelial cell\nLevel One Cell Type\n32.788252\n22.583456\n2.350532\n199.920297\n\n\n1\nBuccal Mucosa And Minor Salivary Glands\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n66.570639\n56.315739\n2.400521\n199.999181\n\n\n2\nBuccal Mucosa And Minor Salivary Glands\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n66.570639\n56.315739\n2.400521\n199.999181\n\n\n3\nBuccal Mucosa And Minor Salivary Glands\nendothelial cell of vascular tree\nLevel Three Cell Type\n41.164970\n28.331828\n2.350532\n199.920297\n\n\n4\nBuccal Mucosa And Minor Salivary Glands\nendothelial cell of vascular tree\nLevel Two Cell Type\n41.164970\n28.331828\n2.350532\n199.920297\n\n\n5\nGingiva\nendothelial cell\nLevel One Cell Type\n46.035025\n35.977739\n0.006517\n199.932087\n\n\n6\nGingiva\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n118.082543\n121.622867\n0.466601\n199.993077\n\n\n7\nGingiva\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n118.082543\n121.622867\n0.466601\n199.993077\n\n\n8\nGingiva\nendothelial cell of vascular tree\nLevel Three Cell Type\n46.818074\n36.442616\n0.006517\n199.932087\n\n\n9\nGingiva\nendothelial cell of vascular tree\nLevel Two Cell Type\n46.818074\n36.442616\n0.006517\n199.932087\n\n\n10\nParotid\nendothelial cell\nLevel One Cell Type\n27.287024\n22.853827\n0.004528\n199.996540\n\n\n11\nParotid\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n102.361408\n100.972133\n0.056988\n199.999212\n\n\n12\nParotid\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n102.361408\n100.972133\n0.056988\n199.999212\n\n\n13\nParotid\nendothelial cell of vascular tree\nLevel Three Cell Type\n28.225257\n23.337365\n0.004528\n199.996540\n\n\n14\nParotid\nendothelial cell of vascular tree\nLevel Two Cell Type\n28.225257\n23.337365\n0.004528\n199.996540\n\n\n15\nSubmandibular\nendothelial cell\nLevel One Cell Type\n30.266208\n23.193534\n2.540177\n199.943992\n\n\n16\nSubmandibular\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n102.248432\n99.812887\n2.555386\n199.999931\n\n\n17\nSubmandibular\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n102.248432\n99.812887\n2.555386\n199.999931\n\n\n18\nSubmandibular\nendothelial cell of vascular tree\nLevel Three Cell Type\n30.935485\n23.700211\n2.540177\n199.943992\n\n\n19\nSubmandibular\nendothelial cell of vascular tree\nLevel Two Cell Type\n30.935485\n23.700211\n2.540177\n199.943992\n\n\n20\nTongue\nendothelial cell\nLevel One Cell Type\n37.316385\n25.104034\n2.438237\n199.998506\n\n\n21\nTongue\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n66.095612\n56.164157\n2.815138\n199.994900\n\n\n22\nTongue\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n66.095612\n56.164157\n2.815138\n199.994900\n\n\n23\nTongue\nendothelial cell of vascular tree\nLevel Three Cell Type\n48.574001\n32.080680\n2.438237\n199.999050\n\n\n24\nTongue\nendothelial cell of vascular tree\nLevel Two Cell Type\n48.574001\n32.080680\n2.438237\n199.999050\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nBuccal Mucosa And Minor Salivary Glands\n47.227324\n39.939347\n2.451530\n199.035857\n\n\n1\nepithelial cell\nGingiva\n44.140615\n34.768144\n0.010330\n199.836547\n\n\n2\nepithelial cell\nParotid\n26.585115\n22.840156\n0.017954\n199.947587\n\n\n3\nepithelial cell\nSubmandibular\n23.907224\n20.577384\n2.755449\n199.833787\n\n\n4\nepithelial cell\nTongue\n85.775049\n79.378846\n2.815138\n199.990006\n\n\n5\nimmune cell\nBuccal Mucosa And Minor Salivary Glands\n24.581746\n18.289273\n2.400521\n198.825866\n\n\n6\nimmune cell\nGingiva\n52.854768\n40.612195\n0.029228\n199.932087\n\n\n7\nimmune cell\nParotid\n29.196625\n22.425217\n0.004528\n199.996540\n\n\n8\nimmune cell\nSubmandibular\n27.443867\n22.173182\n2.549510\n190.454122\n\n\n9\nimmune cell\nTongue\n26.795128\n18.708086\n2.800446\n199.876143\n\n\n10\nmesenchymal cell\nBuccal Mucosa And Minor Salivary Glands\n25.865052\n18.751667\n2.510976\n190.343295\n\n\n11\nmesenchymal cell\nGingiva\n41.454674\n34.134295\n0.127369\n196.036100\n\n\n12\nmesenchymal cell\nParotid\n24.717051\n20.026233\n0.009735\n199.030058\n\n\n13\nmesenchymal cell\nSubmandibular\n42.638145\n32.175398\n2.540177\n199.943992\n\n\n14\nmesenchymal cell\nTongue\n35.806762\n26.742008\n2.530316\n199.998506\n\n\n15\nneural cell\nParotid\n24.032759\n20.332039\n0.124848\n191.137047\n\n\n16\nunknown cell\nBuccal Mucosa And Minor Salivary Glands\n37.841632\n25.530619\n2.350532\n199.920297\n\n\n17\nunknown cell\nGingiva\n46.744610\n36.358142\n0.006517\n199.814472\n\n\n18\nunknown cell\nParotid\n30.671119\n24.682478\n0.015375\n199.882778\n\n\n19\nunknown cell\nSubmandibular\n31.722377\n25.000625\n2.720294\n199.821445\n\n\n20\nunknown cell\nTongue\n27.503129\n20.065954\n2.438237\n199.924628\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n  Level One Cell Type  mean_distance\n0     epithelial cell      47.227324\n3        unknown cell      37.841632\n2    mesenchymal cell      25.865052\n1         immune cell      24.581746\n\nBottom 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n  Level One Cell Type  mean_distance\n0     epithelial cell      47.227324\n3        unknown cell      37.841632\n2    mesenchymal cell      25.865052\n1         immune cell      24.581746\n\nTop 5 cell types in Gingiva:\n  Level One Cell Type  mean_distance\n1         immune cell      52.854768\n3        unknown cell      46.744610\n0     epithelial cell      44.140615\n2    mesenchymal cell      41.454674\n\nBottom 5 cell types in Gingiva:\n  Level One Cell Type  mean_distance\n1         immune cell      52.854768\n3        unknown cell      46.744610\n0     epithelial cell      44.140615\n2    mesenchymal cell      41.454674\n\nTop 5 cell types in Parotid:\n  Level One Cell Type  mean_distance\n4        unknown cell      30.671119\n1         immune cell      29.196625\n0     epithelial cell      26.585115\n2    mesenchymal cell      24.717051\n3         neural cell      24.032759\n\nBottom 5 cell types in Parotid:\n  Level One Cell Type  mean_distance\n4        unknown cell      30.671119\n1         immune cell      29.196625\n0     epithelial cell      26.585115\n2    mesenchymal cell      24.717051\n3         neural cell      24.032759\n\nTop 5 cell types in Submandibular:\n  Level One Cell Type  mean_distance\n2    mesenchymal cell      42.638145\n3        unknown cell      31.722377\n1         immune cell      27.443867\n0     epithelial cell      23.907224\n\nBottom 5 cell types in Submandibular:\n  Level One Cell Type  mean_distance\n2    mesenchymal cell      42.638145\n3        unknown cell      31.722377\n1         immune cell      27.443867\n0     epithelial cell      23.907224\n\nTop 5 cell types in Tongue:\n  Level One Cell Type  mean_distance\n0     epithelial cell      85.775049\n2    mesenchymal cell      35.806762\n3        unknown cell      27.503129\n1         immune cell      26.795128\n\nBottom 5 cell types in Tongue:\n  Level One Cell Type  mean_distance\n0     epithelial cell      85.775049\n2    mesenchymal cell      35.806762\n3        unknown cell      27.503129\n1         immune cell      26.795128\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n  Level One Cell Type  median_distance\n0     epithelial cell        39.939347\n3        unknown cell        25.530619\n2    mesenchymal cell        18.751667\n1         immune cell        18.289273\n\nBottom 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n  Level One Cell Type  median_distance\n0     epithelial cell        39.939347\n3        unknown cell        25.530619\n2    mesenchymal cell        18.751667\n1         immune cell        18.289273\n\nTop 5 cell types in Gingiva:\n  Level One Cell Type  median_distance\n1         immune cell        40.612195\n3        unknown cell        36.358142\n0     epithelial cell        34.768144\n2    mesenchymal cell        34.134295\n\nBottom 5 cell types in Gingiva:\n  Level One Cell Type  median_distance\n1         immune cell        40.612195\n3        unknown cell        36.358142\n0     epithelial cell        34.768144\n2    mesenchymal cell        34.134295\n\nTop 5 cell types in Parotid:\n  Level One Cell Type  median_distance\n4        unknown cell        24.682478\n0     epithelial cell        22.840156\n1         immune cell        22.425217\n3         neural cell        20.332039\n2    mesenchymal cell        20.026233\n\nBottom 5 cell types in Parotid:\n  Level One Cell Type  median_distance\n4        unknown cell        24.682478\n0     epithelial cell        22.840156\n1         immune cell        22.425217\n3         neural cell        20.332039\n2    mesenchymal cell        20.026233\n\nTop 5 cell types in Submandibular:\n  Level One Cell Type  median_distance\n2    mesenchymal cell        32.175398\n3        unknown cell        25.000625\n1         immune cell        22.173182\n0     epithelial cell        20.577384\n\nBottom 5 cell types in Submandibular:\n  Level One Cell Type  median_distance\n2    mesenchymal cell        32.175398\n3        unknown cell        25.000625\n1         immune cell        22.173182\n0     epithelial cell        20.577384\n\nTop 5 cell types in Tongue:\n  Level One Cell Type  median_distance\n0     epithelial cell        79.378846\n2    mesenchymal cell        26.742008\n3        unknown cell        20.065954\n1         immune cell        18.708086\n\nBottom 5 cell types in Tongue:\n  Level One Cell Type  median_distance\n0     epithelial cell        79.378846\n2    mesenchymal cell        26.742008\n3        unknown cell        20.065954\n1         immune cell        18.708086\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                                          mean    std  CV (%)\nUnique Region                                                \nBuccal Mucosa And Minor Salivary Glands  32.79  30.43    92.8\nGingiva                                  46.04  35.92    78.0\nParotid                                  27.29  20.14    73.8\nSubmandibular                            30.27  25.72    85.0\nTongue                                   37.32  34.85    93.4\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nepithelial cell      31.24  27.49    88.0\nunknown cell         33.97  29.68    87.4\nimmune cell          28.45  24.84    87.3\nmesenchymal cell     35.45  30.49    86.0\nneural cell          24.03  18.50    77.0\n\n\n\n# Define the standard region sequence for plots\nregions = ['Gingiva', 'Submandibular', 'Parotid', 'Tongue', 'Buccal Mucosa And Minor Salivary Glands']\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(5, 1, figsize=(10, 20)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nadipocyte\nGingiva\n38.921484\n31.576881\n1.472765\n198.358252\n\n\n1\nb cell\nBuccal Mucosa And Minor Salivary Glands\n23.196496\n22.353669\n2.804015\n98.284549\n\n\n2\nb cell\nGingiva\n38.913598\n29.370338\n1.271453\n198.729570\n\n\n3\nb cell\nParotid\n22.649857\n19.314031\n0.004528\n195.393503\n\n\n4\nb cell\nSubmandibular\n49.468888\n45.465234\n3.304921\n184.012207\n\n\n5\nb cell\nTongue\n23.064363\n15.471976\n3.696282\n119.542137\n\n\n6\ndendritic cell\nBuccal Mucosa And Minor Salivary Glands\n23.820644\n19.333714\n2.753634\n176.453535\n\n\n7\ndendritic cell\nGingiva\n53.327090\n40.886464\n0.225297\n199.932087\n\n\n8\ndendritic cell\nParotid\n21.289953\n19.328978\n0.050563\n154.155788\n\n\n9\ndendritic cell\nTongue\n49.187117\n32.105607\n3.162278\n199.890432\n\n\n10\nendothelial cell of lymphatic vessel\nBuccal Mucosa And Minor Salivary Glands\n31.266348\n23.013311\n3.036445\n188.564690\n\n\n11\nendothelial cell of lymphatic vessel\nGingiva\n51.530766\n47.521442\n8.561243\n143.755112\n\n\n12\nendothelial cell of lymphatic vessel\nParotid\n27.392054\n19.534840\n0.253150\n181.675452\n\n\n13\nendothelial cell of lymphatic vessel\nSubmandibular\n23.177030\n17.112130\n3.412477\n121.602436\n\n\n14\nendothelial cell of lymphatic vessel\nTongue\n44.692616\n34.740934\n4.208622\n199.544105\n\n\n15\nepithelial cell\nBuccal Mucosa And Minor Salivary Glands\n69.005527\n63.242607\n3.006659\n199.616482\n\n\n16\nepithelial cell\nGingiva\n49.671535\n37.195439\n1.752795\n198.377561\n\n\n17\nepithelial cell\nParotid\n39.288368\n29.149386\n0.468023\n199.229374\n\n\n18\nepithelial cell\nTongue\n116.777509\n126.256991\n3.323402\n199.987850\n\n\n19\nfibroblast\nBuccal Mucosa And Minor Salivary Glands\n35.795373\n25.141972\n2.510976\n199.696019\n\n\n20\nfibroblast\nGingiva\n42.361864\n34.901074\n0.127369\n198.612028\n\n\n21\nfibroblast\nParotid\n26.934849\n21.545359\n0.009735\n199.030058\n\n\n22\nfibroblast\nSubmandibular\n43.476570\n33.036249\n2.540177\n199.943992\n\n\n23\nfibroblast\nTongue\n52.144835\n37.926541\n2.530316\n199.999050\n\n\n24\ngland epithelium cell\nGingiva\n38.872536\n31.698348\n0.029614\n199.675802\n\n\n25\ngland epithelium cell\nParotid\n26.186293\n22.583455\n0.017954\n199.567157\n\n\n26\ngland epithelium cell\nSubmandibular\n25.000346\n21.156766\n2.773536\n199.833787\n\n\n27\nkeratinocyte\nGingiva\n53.520737\n42.797847\n0.010330\n199.836547\n\n\n28\nkeratinocyte\nParotid\n29.006264\n23.250918\n0.042787\n199.947587\n\n\n29\nlangerhans cell\nGingiva\n35.348131\n26.245455\n0.353423\n166.645525\n\n\n30\nlangerhans cell\nParotid\n21.515277\n18.679420\n0.118568\n151.121503\n\n\n31\nmacrophage\nBuccal Mucosa And Minor Salivary Glands\n25.882874\n20.110103\n2.995413\n175.639439\n\n\n32\nmacrophage\nGingiva\n43.967814\n35.395149\n0.362944\n196.376846\n\n\n33\nmacrophage\nParotid\n27.069626\n22.910843\n0.100367\n196.269036\n\n\n34\nmacrophage\nSubmandibular\n30.757152\n23.417995\n3.103627\n190.454122\n\n\n35\nmacrophage\nTongue\n34.170755\n22.358667\n2.800446\n199.962253\n\n\n36\nmast cell\nGingiva\n45.118725\n32.004082\n0.283616\n198.023632\n\n\n37\nmast cell\nParotid\n55.949381\n42.159777\n0.497809\n164.482230\n\n\n38\nmuscle cell\nParotid\n26.374298\n22.262380\n0.246935\n196.110438\n\n\n39\nmyoepithelial cell\nGingiva\n33.597314\n25.924170\n0.499390\n195.159907\n\n\n40\nmyoepithelial cell\nParotid\n31.860121\n26.601561\n0.027328\n199.863760\n\n\n41\nmyoepithelial cell\nSubmandibular\n23.571161\n20.641130\n2.755449\n136.143821\n\n\n42\nnatural killer cell\nBuccal Mucosa And Minor Salivary Glands\n46.769140\n37.025667\n3.381198\n195.615196\n\n\n43\nnatural killer cell\nGingiva\n41.823514\n29.657322\n2.560580\n189.288209\n\n\n44\nnatural killer cell\nParotid\n63.315905\n54.364997\n0.139128\n198.587437\n\n\n45\nnatural killer cell\nSubmandibular\n25.280999\n20.705518\n3.148412\n158.294820\n\n\n46\nnatural killer cell\nTongue\n47.527685\n42.494294\n3.064719\n197.964770\n\n\n47\nneuroglial cell/neuron\nParotid\n24.591434\n20.583996\n0.124848\n191.137047\n\n\n48\nneutrophil\nBuccal Mucosa And Minor Salivary Glands\n30.028958\n21.579446\n2.554408\n194.583330\n\n\n49\nneutrophil\nGingiva\n46.213377\n32.192202\n0.029228\n199.542077\n\n\n50\nneutrophil\nParotid\n44.659693\n34.148935\n18.784102\n87.823018\n\n\n51\nneutrophil\nSubmandibular\n21.857157\n19.521302\n2.968164\n164.314371\n\n\n52\nneutrophil\nTongue\n34.321570\n22.459853\n3.085855\n199.231084\n\n\n53\nperivascular cell\nParotid\n21.881249\n18.707282\n0.068190\n166.700706\n\n\n54\nt cell\nBuccal Mucosa And Minor Salivary Glands\n38.797999\n28.289618\n3.026549\n198.825866\n\n\n55\nt cell\nGingiva\n61.869930\n49.247660\n0.094913\n199.784633\n\n\n56\nt cell\nParotid\n40.798968\n31.956611\n0.043842\n199.996540\n\n\n57\nt cell\nSubmandibular\n31.282386\n27.361812\n2.549510\n187.306834\n\n\n58\nt cell\nTongue\n60.348191\n45.091157\n2.951694\n199.994831\n\n\n59\nunknown cell\nBuccal Mucosa And Minor Salivary Glands\n42.374333\n28.831450\n2.350532\n199.920297\n\n\n60\nunknown cell\nGingiva\n47.466793\n36.770012\n0.006517\n199.814472\n\n\n61\nunknown cell\nParotid\n32.154130\n25.431573\n0.015375\n199.882778\n\n\n62\nunknown cell\nSubmandibular\n32.777522\n25.710163\n2.720294\n199.821445\n\n\n63\nunknown cell\nTongue\n33.290598\n23.558730\n2.438237\n199.998125\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n   Level Two Cell Type  mean_distance\n3      epithelial cell      69.005527\n6  natural killer cell      46.769140\n9         unknown cell      42.374333\n8               t cell      38.797999\n4           fibroblast      35.795373\n\nBottom 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n                    Level Two Cell Type  mean_distance\n2  endothelial cell of lymphatic vessel      31.266348\n7                            neutrophil      30.028958\n5                            macrophage      25.882874\n1                        dendritic cell      23.820644\n0                                b cell      23.196496\n\nTop 5 cell types in Gingiva:\n                     Level Two Cell Type  mean_distance\n14                                t cell      61.869930\n7                           keratinocyte      53.520737\n2                         dendritic cell      53.327090\n3   endothelial cell of lymphatic vessel      51.530766\n4                        epithelial cell      49.671535\n\nBottom 5 cell types in Gingiva:\n      Level Two Cell Type  mean_distance\n0               adipocyte      38.921484\n1                  b cell      38.913598\n6   gland epithelium cell      38.872536\n8         langerhans cell      35.348131\n11     myoepithelial cell      33.597314\n\nTop 5 cell types in Parotid:\n    Level Two Cell Type  mean_distance\n12  natural killer cell      63.315905\n9             mast cell      55.949381\n14           neutrophil      44.659693\n16               t cell      40.798968\n3       epithelial cell      39.288368\n\nBottom 5 cell types in Parotid:\n       Level Two Cell Type  mean_distance\n13  neuroglial cell/neuron      24.591434\n0                   b cell      22.649857\n15       perivascular cell      21.881249\n7          langerhans cell      21.515277\n1           dendritic cell      21.289953\n\nTop 5 cell types in Submandibular:\n  Level Two Cell Type  mean_distance\n0              b cell      49.468888\n2          fibroblast      43.476570\n9        unknown cell      32.777522\n8              t cell      31.282386\n4          macrophage      30.757152\n\nBottom 5 cell types in Submandibular:\n                    Level Two Cell Type  mean_distance\n6                   natural killer cell      25.280999\n3                 gland epithelium cell      25.000346\n5                    myoepithelial cell      23.571161\n1  endothelial cell of lymphatic vessel      23.177030\n7                            neutrophil      21.857157\n\nTop 5 cell types in Tongue:\n   Level Two Cell Type  mean_distance\n3      epithelial cell     116.777509\n8               t cell      60.348191\n4           fibroblast      52.144835\n1       dendritic cell      49.187117\n6  natural killer cell      47.527685\n\nBottom 5 cell types in Tongue:\n                    Level Two Cell Type  mean_distance\n2  endothelial cell of lymphatic vessel      44.692616\n7                            neutrophil      34.321570\n5                            macrophage      34.170755\n9                          unknown cell      33.290598\n0                                b cell      23.064363\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n   Level Two Cell Type  median_distance\n3      epithelial cell        63.242607\n6  natural killer cell        37.025667\n9         unknown cell        28.831450\n8               t cell        28.289618\n4           fibroblast        25.141972\n\nBottom 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n                    Level Two Cell Type  median_distance\n2  endothelial cell of lymphatic vessel        23.013311\n0                                b cell        22.353669\n7                            neutrophil        21.579446\n5                            macrophage        20.110103\n1                        dendritic cell        19.333714\n\nTop 5 cell types in Gingiva:\n                     Level Two Cell Type  median_distance\n14                                t cell        49.247660\n3   endothelial cell of lymphatic vessel        47.521442\n7                           keratinocyte        42.797847\n2                         dendritic cell        40.886464\n4                        epithelial cell        37.195439\n\nBottom 5 cell types in Gingiva:\n    Level Two Cell Type  median_distance\n0             adipocyte        31.576881\n12  natural killer cell        29.657322\n1                b cell        29.370338\n8       langerhans cell        26.245455\n11   myoepithelial cell        25.924170\n\nTop 5 cell types in Parotid:\n    Level Two Cell Type  median_distance\n12  natural killer cell        54.364997\n9             mast cell        42.159777\n14           neutrophil        34.148935\n16               t cell        31.956611\n3       epithelial cell        29.149386\n\nBottom 5 cell types in Parotid:\n                     Level Two Cell Type  median_distance\n2   endothelial cell of lymphatic vessel        19.534840\n1                         dendritic cell        19.328978\n0                                 b cell        19.314031\n15                     perivascular cell        18.707282\n7                        langerhans cell        18.679420\n\nTop 5 cell types in Submandibular:\n  Level Two Cell Type  median_distance\n0              b cell        45.465234\n2          fibroblast        33.036249\n8              t cell        27.361812\n9        unknown cell        25.710163\n4          macrophage        23.417995\n\nBottom 5 cell types in Submandibular:\n                    Level Two Cell Type  median_distance\n3                 gland epithelium cell        21.156766\n6                   natural killer cell        20.705518\n5                    myoepithelial cell        20.641130\n7                            neutrophil        19.521302\n1  endothelial cell of lymphatic vessel        17.112130\n\nTop 5 cell types in Tongue:\n                    Level Two Cell Type  median_distance\n3                       epithelial cell       126.256991\n8                                t cell        45.091157\n6                   natural killer cell        42.494294\n4                            fibroblast        37.926541\n2  endothelial cell of lymphatic vessel        34.740934\n\nBottom 5 cell types in Tongue:\n  Level Two Cell Type  median_distance\n1      dendritic cell        32.105607\n9        unknown cell        23.558730\n7          neutrophil        22.459853\n5          macrophage        22.358667\n0              b cell        15.471976\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                                          mean    std  CV (%)\nUnique Region                                                \nBuccal Mucosa And Minor Salivary Glands  41.16  37.14    90.2\nGingiva                                  46.82  36.63    78.2\nParotid                                  28.23  21.27    75.3\nSubmandibular                            30.94  26.10    84.4\nTongue                                   48.57  44.56    91.7\n\nCell Type Variability Analysis (sorted by CV):\n                                       mean    std  CV (%)\nLevel Two Cell Type                                       \ndendritic cell                        37.36  37.48   100.3\nmacrophage                            32.67  30.91    94.6\nfibroblast                            44.68  39.07    87.4\nunknown cell                          36.94  31.98    86.6\nmast cell                             46.79  40.10    85.7\nkeratinocyte                          40.74  34.66    85.1\nneutrophil                            25.91  21.90    84.5\nt cell                                44.40  37.45    84.3\nlangerhans cell                       23.62  19.63    83.1\nendothelial cell of lymphatic vessel  40.28  33.01    82.0\nmuscle cell                           26.37  21.33    80.9\nb cell                                32.21  25.19    78.2\nneuroglial cell/neuron                24.59  19.04    77.4\nnatural killer cell                   47.10  35.86    76.1\nadipocyte                             38.92  28.83    74.1\nperivascular cell                     21.88  16.15    73.8\nmyoepithelial cell                    27.09  19.05    70.3\ngland epithelium cell                 26.30  17.81    67.7\nepithelial cell                       94.96  57.84    60.9\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nacinar cell of salivary gland\nGingiva\n36.739726\n30.877582\n0.029614\n198.327899\n\n\n1\nacinar cell of salivary gland\nParotid\n26.180957\n22.977472\n0.017954\n199.271997\n\n\n2\nacinar cell of salivary gland\nSubmandibular\n25.430226\n22.379846\n3.106445\n198.710172\n\n\n3\nadipocyte\nGingiva\n38.921484\n31.576881\n1.472765\n198.358252\n\n\n4\nb cell\nBuccal Mucosa And Minor Salivary Glands\n23.196496\n22.353669\n2.804015\n98.284549\n\n\n5\nb cell\nGingiva\n38.913598\n29.370338\n1.271453\n198.729570\n\n\n6\nb cell\nParotid\n24.002071\n20.842505\n0.004528\n194.426806\n\n\n7\nb cell\nSubmandibular\n49.468888\n45.465234\n3.304921\n184.012207\n\n\n8\nb cell\nTongue\n23.064363\n15.471976\n3.696282\n119.542137\n\n\n9\ndendritic cell\nBuccal Mucosa And Minor Salivary Glands\n23.820644\n19.333714\n2.753634\n176.453535\n\n\n10\ndendritic cell\nGingiva\n53.327090\n40.886464\n0.225297\n199.932087\n\n\n11\ndendritic cell\nParotid\n21.289953\n19.328978\n0.050563\n154.155788\n\n\n12\ndendritic cell\nTongue\n49.187117\n32.105607\n3.162278\n199.890432\n\n\n13\nendothelial cell of lymphatic vessel\nBuccal Mucosa And Minor Salivary Glands\n31.266348\n23.013311\n3.036445\n188.564690\n\n\n14\nendothelial cell of lymphatic vessel\nGingiva\n51.530766\n47.521442\n8.561243\n143.755112\n\n\n15\nendothelial cell of lymphatic vessel\nParotid\n27.392054\n19.534840\n0.253150\n181.675452\n\n\n16\nendothelial cell of lymphatic vessel\nSubmandibular\n23.177030\n17.112130\n3.412477\n121.602436\n\n\n17\nendothelial cell of lymphatic vessel\nTongue\n44.692616\n34.740934\n4.208622\n199.544105\n\n\n18\nepithelial cell\nBuccal Mucosa And Minor Salivary Glands\n69.005527\n63.242607\n3.006659\n199.616482\n\n\n19\nepithelial cell\nGingiva\n49.671535\n37.195439\n1.752795\n198.377561\n\n\n20\nepithelial cell\nParotid\n39.288368\n29.149386\n0.468023\n199.229374\n\n\n21\nepithelial cell\nTongue\n116.777509\n126.256991\n3.323402\n199.987850\n\n\n22\nepithelial cell:ductal\nGingiva\n42.560340\n33.553722\n0.238018\n199.675802\n\n\n23\nepithelial cell:ductal\nParotid\n26.200793\n21.407199\n0.037888\n199.567157\n\n\n24\nepithelial cell:ductal\nSubmandibular\n24.609401\n20.199691\n2.773536\n199.833787\n\n\n25\nfibroblast\nBuccal Mucosa And Minor Salivary Glands\n35.795373\n25.141972\n2.510976\n199.696019\n\n\n26\nfibroblast\nGingiva\n42.361864\n34.901074\n0.127369\n198.612028\n\n\n27\nfibroblast\nParotid\n25.985495\n20.910105\n0.009735\n199.030058\n\n\n28\nfibroblast\nSubmandibular\n45.426189\n35.755874\n2.540177\n199.943992\n\n\n29\nfibroblast\nTongue\n52.144835\n37.926541\n2.530316\n199.999050\n\n\n30\nglial cell/neuron\nParotid\n24.591434\n20.583996\n0.124848\n191.137047\n\n\n31\nkeratinocyte\nGingiva\n53.520737\n42.797847\n0.010330\n199.836547\n\n\n32\nkeratinocyte\nParotid\n29.006264\n23.250918\n0.042787\n199.947587\n\n\n33\nlangerhans cell\nGingiva\n35.348131\n26.245455\n0.353423\n166.645525\n\n\n34\nlangerhans cell\nParotid\n21.515277\n18.679420\n0.118568\n151.121503\n\n\n35\nmacrophage\nBuccal Mucosa And Minor Salivary Glands\n25.882874\n20.110103\n2.995413\n175.639439\n\n\n36\nmacrophage\nGingiva\n43.967814\n35.395149\n0.362944\n196.376846\n\n\n37\nmacrophage\nParotid\n33.360746\n28.845995\n3.541892\n123.118246\n\n\n38\nmacrophage\nSubmandibular\n30.757152\n23.417995\n3.103627\n190.454122\n\n\n39\nmacrophage\nTongue\n34.170755\n22.358667\n2.800446\n199.962253\n\n\n40\nmast cell\nGingiva\n45.118725\n32.004082\n0.283616\n198.023632\n\n\n41\nmast cell\nParotid\n55.949381\n42.159777\n0.497809\n164.482230\n\n\n42\nmonocyte\nParotid\n26.785779\n22.590948\n0.100367\n196.269036\n\n\n43\nmural cell\nParotid\n21.881249\n18.707282\n0.068190\n166.700706\n\n\n44\nmuscle cell:skeletal\nParotid\n26.374298\n22.262380\n0.246935\n196.110438\n\n\n45\nmyoepithelial cell\nGingiva\n33.597314\n25.924170\n0.499390\n195.159907\n\n\n46\nmyoepithelial cell\nParotid\n31.860121\n26.601561\n0.027328\n199.863760\n\n\n47\nmyoepithelial cell\nSubmandibular\n23.571161\n20.641130\n2.755449\n136.143821\n\n\n48\nmyofibroblast\nParotid\n32.692357\n25.995240\n2.804015\n184.105520\n\n\n49\nmyofibroblast\nSubmandibular\n37.834254\n27.126555\n2.890069\n199.916633\n\n\n50\nnatural killer cell\nBuccal Mucosa And Minor Salivary Glands\n46.769140\n37.025667\n3.381198\n195.615196\n\n\n51\nnatural killer cell\nGingiva\n41.823514\n29.657322\n2.560580\n189.288209\n\n\n52\nnatural killer cell\nParotid\n63.315905\n54.364997\n0.139128\n198.587437\n\n\n53\nnatural killer cell\nSubmandibular\n25.280999\n20.705518\n3.148412\n158.294820\n\n\n54\nnatural killer cell\nTongue\n47.527685\n42.494294\n3.064719\n197.964770\n\n\n55\nneutrophil\nBuccal Mucosa And Minor Salivary Glands\n30.028958\n21.579446\n2.554408\n194.583330\n\n\n56\nneutrophil\nGingiva\n46.213377\n32.192202\n0.029228\n199.542077\n\n\n57\nneutrophil\nParotid\n44.659693\n34.148935\n18.784102\n87.823018\n\n\n58\nneutrophil\nSubmandibular\n21.857157\n19.521302\n2.968164\n164.314371\n\n\n59\nneutrophil\nTongue\n34.321570\n22.459853\n3.085855\n199.231084\n\n\n60\nplasma cell\nParotid\n21.626882\n17.710427\n0.038203\n195.393503\n\n\n61\nt cell\nParotid\n25.638718\n21.043274\n0.043842\n184.558144\n\n\n62\nt cell:cd4+\nBuccal Mucosa And Minor Salivary Glands\n38.785521\n29.526032\n3.226841\n189.937523\n\n\n63\nt cell:cd4+\nGingiva\n43.033934\n32.807020\n0.094913\n196.281616\n\n\n64\nt cell:cd4+\nParotid\n48.489673\n36.242813\n1.426787\n198.546619\n\n\n65\nt cell:cd4+\nSubmandibular\n40.572532\n37.560784\n3.342529\n187.306834\n\n\n66\nt cell:cd4+\nTongue\n56.815946\n42.660169\n2.951694\n199.931813\n\n\n67\nt cell:cd8+\nBuccal Mucosa And Minor Salivary Glands\n33.406082\n24.008696\n3.083018\n196.505044\n\n\n68\nt cell:cd8+\nGingiva\n64.303943\n52.379107\n0.150396\n199.784633\n\n\n69\nt cell:cd8+\nParotid\n44.306240\n33.225023\n0.106672\n199.996540\n\n\n70\nt cell:cd8+\nSubmandibular\n23.920693\n21.025193\n2.549510\n136.845259\n\n\n71\nt cell:cd8+\nTongue\n78.353407\n70.255983\n4.000000\n199.529259\n\n\n72\nt cell:regulatory\nBuccal Mucosa And Minor Salivary Glands\n40.665551\n30.033398\n3.026549\n198.825866\n\n\n73\nt cell:regulatory\nParotid\n38.177654\n32.661321\n3.010399\n198.026242\n\n\n74\nt cell:regulatory\nSubmandibular\n33.265373\n30.085399\n2.798660\n186.292868\n\n\n75\nt cell:regulatory\nTongue\n54.034886\n38.850515\n3.112073\n199.994831\n\n\n76\nthymocyte:cd4-intermediate cd8+ double-positive\nParotid\n44.202736\n37.229592\n2.683282\n199.631642\n\n\n77\nthymocyte:cd4-intermediate cd8+ double-positive\nSubmandibular\n26.009947\n22.290413\n3.658210\n117.123919\n\n\n78\nthymocyte:cd4-intermediate cd8+ double-positive\nTongue\n62.981557\n43.618355\n5.628943\n194.287583\n\n\n79\nunknown cell\nBuccal Mucosa And Minor Salivary Glands\n42.374333\n28.831450\n2.350532\n199.920297\n\n\n80\nunknown cell\nGingiva\n47.466793\n36.770012\n0.006517\n199.814472\n\n\n81\nunknown cell\nParotid\n32.154130\n25.431573\n0.015375\n199.882778\n\n\n82\nunknown cell\nSubmandibular\n32.777522\n25.710163\n2.720294\n199.821445\n\n\n83\nunknown cell\nTongue\n33.290598\n23.558730\n2.438237\n199.998125\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n   Level Three Cell Type  mean_distance\n3        epithelial cell      69.005527\n6    natural killer cell      46.769140\n11          unknown cell      42.374333\n10     t cell:regulatory      40.665551\n8            t cell:cd4+      38.785521\n\nBottom 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n                  Level Three Cell Type  mean_distance\n2  endothelial cell of lymphatic vessel      31.266348\n7                            neutrophil      30.028958\n5                            macrophage      25.882874\n1                        dendritic cell      23.820644\n0                                b cell      23.196496\n\nTop 5 cell types in Gingiva:\n                   Level Three Cell Type  mean_distance\n16                           t cell:cd8+      64.303943\n8                           keratinocyte      53.520737\n3                         dendritic cell      53.327090\n4   endothelial cell of lymphatic vessel      51.530766\n5                        epithelial cell      49.671535\n\nBottom 5 cell types in Gingiva:\n            Level Three Cell Type  mean_distance\n1                       adipocyte      38.921484\n2                          b cell      38.913598\n0   acinar cell of salivary gland      36.739726\n9                 langerhans cell      35.348131\n12             myoepithelial cell      33.597314\n\nTop 5 cell types in Parotid:\n   Level Three Cell Type  mean_distance\n17   natural killer cell      63.315905\n11             mast cell      55.949381\n21           t cell:cd4+      48.489673\n18            neutrophil      44.659693\n22           t cell:cd8+      44.306240\n\nBottom 5 cell types in Parotid:\n   Level Three Cell Type  mean_distance\n1                 b cell      24.002071\n13            mural cell      21.881249\n19           plasma cell      21.626882\n9        langerhans cell      21.515277\n2         dendritic cell      21.289953\n\nTop 5 cell types in Submandibular:\n   Level Three Cell Type  mean_distance\n1                 b cell      49.468888\n4             fibroblast      45.426189\n10           t cell:cd4+      40.572532\n7          myofibroblast      37.834254\n12     t cell:regulatory      33.265373\n\nBottom 5 cell types in Submandibular:\n                   Level Three Cell Type  mean_distance\n3                epithelial cell:ductal       24.609401\n11                           t cell:cd8+      23.920693\n6                     myoepithelial cell      23.571161\n2   endothelial cell of lymphatic vessel      23.177030\n9                             neutrophil      21.857157\n\nTop 5 cell types in Tongue:\n                              Level Three Cell Type  mean_distance\n3                                   epithelial cell     116.777509\n9                                       t cell:cd8+      78.353407\n11  thymocyte:cd4-intermediate cd8+ double-positive      62.981557\n8                                       t cell:cd4+      56.815946\n10                                t cell:regulatory      54.034886\n\nBottom 5 cell types in Tongue:\n                   Level Three Cell Type  mean_distance\n2   endothelial cell of lymphatic vessel      44.692616\n7                             neutrophil      34.321570\n5                             macrophage      34.170755\n12                          unknown cell      33.290598\n0                                 b cell      23.064363\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n   Level Three Cell Type  median_distance\n3        epithelial cell        63.242607\n6    natural killer cell        37.025667\n10     t cell:regulatory        30.033398\n8            t cell:cd4+        29.526032\n11          unknown cell        28.831450\n\nBottom 5 cell types in Buccal Mucosa And Minor Salivary Glands:\n                  Level Three Cell Type  median_distance\n2  endothelial cell of lymphatic vessel        23.013311\n0                                b cell        22.353669\n7                            neutrophil        21.579446\n5                            macrophage        20.110103\n1                        dendritic cell        19.333714\n\nTop 5 cell types in Gingiva:\n                   Level Three Cell Type  median_distance\n16                           t cell:cd8+        52.379107\n4   endothelial cell of lymphatic vessel        47.521442\n8                           keratinocyte        42.797847\n3                         dendritic cell        40.886464\n5                        epithelial cell        37.195439\n\nBottom 5 cell types in Gingiva:\n            Level Three Cell Type  median_distance\n0   acinar cell of salivary gland        30.877582\n13            natural killer cell        29.657322\n2                          b cell        29.370338\n9                 langerhans cell        26.245455\n12             myoepithelial cell        25.924170\n\nTop 5 cell types in Parotid:\n                              Level Three Cell Type  median_distance\n17                              natural killer cell        54.364997\n11                                        mast cell        42.159777\n24  thymocyte:cd4-intermediate cd8+ double-positive        37.229592\n21                                      t cell:cd4+        36.242813\n18                                       neutrophil        34.148935\n\nBottom 5 cell types in Parotid:\n                   Level Three Cell Type  median_distance\n3   endothelial cell of lymphatic vessel        19.534840\n2                         dendritic cell        19.328978\n13                            mural cell        18.707282\n9                        langerhans cell        18.679420\n19                           plasma cell        17.710427\n\nTop 5 cell types in Submandibular:\n   Level Three Cell Type  median_distance\n1                 b cell        45.465234\n10           t cell:cd4+        37.560784\n4             fibroblast        35.755874\n12     t cell:regulatory        30.085399\n7          myofibroblast        27.126555\n\nBottom 5 cell types in Submandibular:\n                  Level Three Cell Type  median_distance\n8                   natural killer cell        20.705518\n6                    myoepithelial cell        20.641130\n3               epithelial cell:ductal         20.199691\n9                            neutrophil        19.521302\n2  endothelial cell of lymphatic vessel        17.112130\n\nTop 5 cell types in Tongue:\n                              Level Three Cell Type  median_distance\n3                                   epithelial cell       126.256991\n9                                       t cell:cd8+        70.255983\n11  thymocyte:cd4-intermediate cd8+ double-positive        43.618355\n8                                       t cell:cd4+        42.660169\n6                               natural killer cell        42.494294\n\nBottom 5 cell types in Tongue:\n   Level Three Cell Type  median_distance\n1         dendritic cell        32.105607\n12          unknown cell        23.558730\n7             neutrophil        22.459853\n5             macrophage        22.358667\n0                 b cell        15.471976\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                                          mean    std  CV (%)\nUnique Region                                                \nBuccal Mucosa And Minor Salivary Glands  41.16  37.14    90.2\nGingiva                                  46.82  36.63    78.2\nParotid                                  28.23  21.27    75.3\nSubmandibular                            30.94  26.10    84.4\nTongue                                   48.57  44.56    91.7\n\nCell Type Variability Analysis (sorted by CV):\n                                                  mean    std  CV (%)\nLevel Three Cell Type                                                \ndendritic cell                                   37.36  37.48   100.3\nmacrophage                                       32.99  31.34    95.0\nmyofibroblast                                    36.72  33.92    92.4\nt cell:cd8+                                      46.75  41.83    89.5\nfibroblast                                       45.47  39.46    86.8\nunknown cell                                     36.94  31.98    86.6\nmast cell                                        46.79  40.10    85.7\nkeratinocyte                                     40.74  34.66    85.1\nneutrophil                                       25.91  21.90    84.5\nlangerhans cell                                  23.62  19.63    83.1\nt cell:regulatory                                43.48  36.08    83.0\nt cell                                           25.64  21.19    82.6\nendothelial cell of lymphatic vessel             40.28  33.01    82.0\nmuscle cell:skeletal                             26.37  21.33    80.9\nmonocyte                                         26.79  20.86    77.9\nt cell:cd4+                                      47.81  37.01    77.4\nglial cell/neuron                                24.59  19.04    77.4\nplasma cell                                      21.63  16.71    77.3\nnatural killer cell                              47.10  35.86    76.1\nthymocyte:cd4-intermediate cd8+ double-positive  42.88  32.57    76.0\nepithelial cell:ductal                           26.18  19.56    74.7\nadipocyte                                        38.92  28.83    74.1\nmural cell                                       21.88  16.15    73.8\nb cell                                           37.32  26.94    72.2\nmyoepithelial cell                               27.09  19.05    70.3\nacinar cell of salivary gland                    26.36  16.89    64.1\nepithelial cell                                  94.96  57.84    60.9\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.",
    "crumbs": [
      "Distance Analysis: oralcavity-codex-czi"
    ]
  },
  {
    "objectID": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html",
    "href": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html",
    "title": "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"colon-cycif-sorgerlab-xenium-stanford\" # This variable is used only for figures. \ndataset_dir_1 = \"colon-xenium-stanford\" # This variable is used for data loading dataset 1.\ndataset_dir_2 = \"colon-cycif-sorgerlab\" # This variable is used for data loading dataset 2.\ndata_filedir_1 = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir_1)\noutput_edge_dir_1 = os.path.join(\"data-processed-edges\", dataset_dir_1)\ndata_filedir_2 = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir_2)\noutput_edge_dir_2 = os.path.join(\"data-processed-edges\", dataset_dir_2)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\n# Read all datasets from Dataset 1\ndf_all_nodes_1, df_all_edges_1, df_all_edges_with_cell_types_1 = read_all_edge_datasets(basepath, data_filedir_1, output_edge_dir_1)\n\n# Create a column 'Tissue Type' in all three DataFrames with the value dataset_dir_1\ndf_all_nodes_1['Tissue Type'] = dataset_dir_1\ndf_all_edges_1['Tissue Type'] = dataset_dir_1\ndf_all_edges_with_cell_types_1['Tissue Type'] = dataset_dir_1\n\n# Read all datasets from Dataset 2\ndf_all_nodes_2, df_all_edges_2, df_all_edges_with_cell_types_2 = read_all_edge_datasets(basepath, data_filedir_2, output_edge_dir_2)\n\n# Create a column 'Tissue Type' in all three DataFrames with the value dataset_dir_2\ndf_all_nodes_2['Tissue Type'] = dataset_dir_2\ndf_all_edges_2['Tissue Type'] = dataset_dir_2\ndf_all_edges_with_cell_types_2['Tissue Type'] = dataset_dir_2\n\n# Merge the two datasets\ndf_all_nodes = pd.concat([df_all_nodes_1, df_all_nodes_2], ignore_index=True)\ndf_all_edges = pd.concat([df_all_edges_1, df_all_edges_2], ignore_index=True)\ndf_all_edges_with_cell_types = pd.concat([df_all_edges_with_cell_types_1, df_all_edges_with_cell_types_2], ignore_index=True)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nTissue Type\n\n\n\n\n0\n1077.96\n2556.82\nImmature Goblet\ngoblet cell:immature\ngoblet cell:immature\nCL:0000160\nskos:narrowMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n1\n1079.01\n2534.23\nTuft\ntuft cell:intestinal\nintestinal tuft cell\nCL:0019032\nskos:exactMatch\ntuft cell\nbrush cell\nCL:0002204\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n2\n1082.65\n2554.09\nTA1\ntransit amplifying cell\ntransit amplifying cell\nCL:0009010\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n3\n1091.89\n2547.38\nImmature Goblet\ngoblet cell:immature\ngoblet cell:immature\nCL:0000160\nskos:narrowMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n4\n1253.46\n2554.64\nCD4+\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 61\nLevel Three Cell Type: 56\nLevel Two Cell Type: 21\nLevel One Cell Type: 6\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n  - Lymphatic endothelial cells\n\nLevel Three Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n\nLevel Two Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# Create a dictionary to map skin regions to correct condition.\nregion_map = {dataset_dir_1:'xenium-stanford',\n dataset_dir_2:'cycif-sorgerlab', \n}\n\n# Define the standard region sequence for plots\nregions = ['xenium-stanford', 'cycif-sorgerlab']\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nTissue Type\n\n\n\n\n0\n1077.96\n2556.82\nImmature Goblet\ngoblet cell:immature\ngoblet cell:immature\nCL:0000160\nskos:narrowMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n1\n1079.01\n2534.23\nTuft\ntuft cell:intestinal\nintestinal tuft cell\nCL:0019032\nskos:exactMatch\ntuft cell\nbrush cell\nCL:0002204\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n2\n1082.65\n2554.09\nTA1\ntransit amplifying cell\ntransit amplifying cell\nCL:0009010\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n3\n1091.89\n2547.38\nImmature Goblet\ngoblet cell:immature\ngoblet cell:immature\nCL:0000160\nskos:narrowMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n4\n1253.46\n2554.64\nCD4+\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Tissue Type\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Tissue Type'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Tissue Type', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nTissue Type\nUnique Region\n\n\n\n\n0\ncolon-xenium-stanford\nxenium-stanford\n\n\n1\ncolon-xenium-stanford\nxenium-stanford\n\n\n2\ncolon-xenium-stanford\nxenium-stanford\n\n\n3\ncolon-xenium-stanford\nxenium-stanford\n\n\n4\ncolon-xenium-stanford\nxenium-stanford\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['xenium-stanford' 'cycif-sorgerlab']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\nxenium-stanford: 29\ncycif-sorgerlab: 25",
    "crumbs": [
      "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nTissue Type\n\n\n\n\n0\n0\n1077.96\n2556.82\n0\n1056.03\n2582.37\n0\n33.670869\nlayer_3\nendothelial cell\nLevel Three Cell Type\ncolon-xenium-stanford\n\n\n1\n1\n1079.01\n2534.23\n0\n1126.32\n2518.75\n0\n49.778173\nlayer_3\nendothelial cell\nLevel Three Cell Type\ncolon-xenium-stanford\n\n\n2\n2\n1082.65\n2554.09\n0\n1056.03\n2582.37\n0\n38.837904\nlayer_3\nendothelial cell\nLevel Three Cell Type\ncolon-xenium-stanford\n\n\n3\n3\n1091.89\n2547.38\n0\n1126.32\n2518.75\n0\n44.778363\nlayer_3\nendothelial cell\nLevel Three Cell Type\ncolon-xenium-stanford\n\n\n4\n5\n1104.66\n2546.60\n0\n1126.32\n2518.75\n0\n35.281413\nlayer_3\nendothelial cell\nLevel Three Cell Type\ncolon-xenium-stanford\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Tissue Type\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Tissue Type'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Tissue Type', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nTissue Type\nUnique Region\n\n\n\n\n0\ncolon-xenium-stanford\nxenium-stanford\n\n\n1\ncolon-xenium-stanford\nxenium-stanford\n\n\n2\ncolon-xenium-stanford\nxenium-stanford\n\n\n3\ncolon-xenium-stanford\nxenium-stanford\n\n\n4\ncolon-xenium-stanford\nxenium-stanford\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['xenium-stanford' 'cycif-sorgerlab']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\nxenium-stanford: 29\ncycif-sorgerlab: 25\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Tissue Type'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Tissue Type', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nTissue Type\nUnique Region\n\n\n\n\n0\ncolon-xenium-stanford\nxenium-stanford\n\n\n1\ncolon-xenium-stanford\nxenium-stanford\n\n\n2\ncolon-xenium-stanford\nxenium-stanford\n\n\n3\ncolon-xenium-stanford\nxenium-stanford\n\n\n4\ncolon-xenium-stanford\nxenium-stanford\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nTissue Type\nUnique Region\n\n\n\n\n0\n1077.96\n2556.82\nImmature Goblet\ngoblet cell:immature\ngoblet cell:immature\nCL:0000160\nskos:narrowMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlayer_3\ncolon-xenium-stanford\nxenium-stanford\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nTissue Type\nUnique Region\n\n\n\n\n0\n0\n1077.96\n2556.82\n0\n1056.03\n2582.37\n0\n33.670869\nlayer_3\nendothelial cell\nLevel Three Cell Type\ncolon-xenium-stanford\nxenium-stanford\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nTissue Type\nUnique Region\n\n\n\n\n0\n0\n1077.96\n2556.82\n0\n1056.03\n2582.37\n0\n33.670869\nlayer_3\nendothelial cell\nLevel Three Cell Type\ngoblet cell:immature\ngoblet cell\nepithelial cell\ncolon-xenium-stanford\nxenium-stanford",
    "crumbs": [
      "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#node-analysis",
    "href": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#node-analysis",
    "title": "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#distance-analysis",
    "href": "distance_analysis__colon-cycif-sorgerlab-colon-xenium-stanford.html#distance-analysis",
    "title": "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\ncycif-sorgerlab\nendothelial cell\nLevel One Cell Type\n50.997434\n41.644288\n3.812328\n199.999898\n\n\n1\ncycif-sorgerlab\nendothelial cell\nLevel Three Cell Type\n50.997434\n41.644288\n3.812328\n199.999898\n\n\n2\ncycif-sorgerlab\nendothelial cell\nLevel Two Cell Type\n50.997434\n41.644288\n3.812328\n199.999898\n\n\n3\nxenium-stanford\nendothelial cell\nLevel One Cell Type\n27.849965\n23.669005\n0.657771\n199.995802\n\n\n4\nxenium-stanford\nendothelial cell\nLevel Three Cell Type\n28.173444\n23.966392\n0.657771\n199.995802\n\n\n5\nxenium-stanford\nendothelial cell\nLevel Two Cell Type\n28.173444\n23.966392\n0.657771\n199.995802\n\n\n6\nxenium-stanford\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n110.829788\n111.918301\n1.774604\n199.999893\n\n\n7\nxenium-stanford\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n110.829788\n111.918301\n1.774604\n199.999893\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\ncycif-sorgerlab\n59.237837\n50.521866\n4.447199\n199.999898\n\n\n1\nepithelial cell\nxenium-stanford\n33.029849\n29.294328\n0.657771\n199.988725\n\n\n2\nimmune cell\ncycif-sorgerlab\n43.793795\n34.054817\n3.812328\n199.996448\n\n\n3\nimmune cell\nxenium-stanford\n21.876177\n17.939406\n1.545798\n199.762275\n\n\n4\nmesenchymal cell\ncycif-sorgerlab\n48.551081\n39.884627\n3.859785\n199.995059\n\n\n5\nmesenchymal cell\nxenium-stanford\n20.657124\n16.590299\n1.097860\n197.299831\n\n\n6\nneural cell\nxenium-stanford\n21.862930\n17.446054\n1.767815\n198.410186\n\n\n7\nunknown cell\ncycif-sorgerlab\n45.301241\n32.613405\n4.331525\n199.996828\n\n\n8\nunknown cell\nxenium-stanford\n25.550199\n19.528765\n1.746407\n199.995802\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in xenium-stanford:\n  Level One Cell Type  mean_distance\n0     epithelial cell      33.029849\n4        unknown cell      25.550199\n1         immune cell      21.876177\n3         neural cell      21.862930\n2    mesenchymal cell      20.657124\n\nBottom 5 cell types in xenium-stanford:\n  Level One Cell Type  mean_distance\n0     epithelial cell      33.029849\n4        unknown cell      25.550199\n1         immune cell      21.876177\n3         neural cell      21.862930\n2    mesenchymal cell      20.657124\n\nTop 5 cell types in cycif-sorgerlab:\n  Level One Cell Type  mean_distance\n0     epithelial cell      59.237837\n2    mesenchymal cell      48.551081\n3        unknown cell      45.301241\n1         immune cell      43.793795\n\nBottom 5 cell types in cycif-sorgerlab:\n  Level One Cell Type  mean_distance\n0     epithelial cell      59.237837\n2    mesenchymal cell      48.551081\n3        unknown cell      45.301241\n1         immune cell      43.793795\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in xenium-stanford:\n  Level One Cell Type  median_distance\n0     epithelial cell        29.294328\n4        unknown cell        19.528765\n1         immune cell        17.939406\n3         neural cell        17.446054\n2    mesenchymal cell        16.590299\n\nBottom 5 cell types in xenium-stanford:\n  Level One Cell Type  median_distance\n0     epithelial cell        29.294328\n4        unknown cell        19.528765\n1         immune cell        17.939406\n3         neural cell        17.446054\n2    mesenchymal cell        16.590299\n\nTop 5 cell types in cycif-sorgerlab:\n  Level One Cell Type  median_distance\n0     epithelial cell        50.521866\n2    mesenchymal cell        39.884627\n1         immune cell        34.054817\n3        unknown cell        32.613405\n\nBottom 5 cell types in cycif-sorgerlab:\n  Level One Cell Type  median_distance\n0     epithelial cell        50.521866\n2    mesenchymal cell        39.884627\n1         immune cell        34.054817\n3        unknown cell        32.613405\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                  mean    std  CV (%)\nUnique Region                        \ncycif-sorgerlab  51.00  35.96    70.5\nxenium-stanford  27.85  19.03    68.3\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nunknown cell         42.86  37.05    86.4\nmesenchymal cell     41.49  33.21    80.0\nimmune cell          41.41  32.80    79.2\nneural cell          21.86  16.10    73.7\nepithelial cell      53.40  35.30    66.1\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(2, 1, figsize=(10, 15)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n# Generate Split Violin Plot\ndef plot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", hue=\"Unique Region\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=True, palette='Spectral', alpha=.9, hue_order=regions)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size, loc='upper right', bbox_to_anchor=(1.15, 1))\n\n    plt.title(f'Split violin plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel('Cell Type', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nabnormal cell\ncycif-sorgerlab\n59.237837\n50.521866\n4.447199\n199.999898\n\n\n1\nadipocyte\nxenium-stanford\n19.307335\n15.506267\n1.886588\n179.829816\n\n\n2\nb cell\ncycif-sorgerlab\n44.742812\n36.696395\n3.812328\n199.963430\n\n\n3\nb cell\nxenium-stanford\n19.868268\n16.177394\n1.545798\n193.686073\n\n\n4\ndendritic cell\nxenium-stanford\n19.604743\n16.317067\n3.127862\n82.356448\n\n\n5\nendocrine cell\nxenium-stanford\n28.989088\n25.386019\n1.870109\n187.875767\n\n\n6\nendothelial cell of lymphatic vessel\nxenium-stanford\n20.220957\n16.182602\n1.837223\n191.459774\n\n\n7\nenterocyte\nxenium-stanford\n35.016424\n30.665961\n1.416608\n199.988725\n\n\n8\nfibroblast\ncycif-sorgerlab\n48.551081\n39.884627\n3.859785\n199.995059\n\n\n9\nfibroblast\nxenium-stanford\n20.925389\n16.923950\n1.097860\n197.299831\n\n\n10\ngoblet cell\nxenium-stanford\n32.837030\n29.215176\n0.657771\n199.932057\n\n\n11\nlymphoid cell\nxenium-stanford\n18.157623\n17.780635\n3.743766\n38.542071\n\n\n12\nmacrophage\ncycif-sorgerlab\n43.943644\n33.602981\n4.405694\n199.996448\n\n\n13\nmacrophage\nxenium-stanford\n17.955820\n14.656862\n1.547417\n195.141153\n\n\n14\nmast cell\nxenium-stanford\n18.454766\n15.402588\n2.088500\n176.025592\n\n\n15\nneuroglial cell\nxenium-stanford\n22.059399\n17.544022\n1.767815\n198.410186\n\n\n16\nneuron\nxenium-stanford\n22.678683\n18.777829\n2.719914\n159.601136\n\n\n17\npericyte\nxenium-stanford\n21.258422\n16.283206\n1.592156\n154.814276\n\n\n18\nstem cell\nxenium-stanford\n31.434218\n28.909495\n1.385274\n199.354161\n\n\n19\nt cell\ncycif-sorgerlab\n43.606482\n33.735886\n4.162606\n199.994514\n\n\n20\nt cell\nxenium-stanford\n19.999632\n16.951968\n1.759058\n197.728143\n\n\n21\ntransit amplifying cell\nxenium-stanford\n29.750915\n25.985201\n1.732760\n199.762275\n\n\n22\ntuft cell\nxenium-stanford\n31.969551\n29.702991\n2.702540\n148.896183\n\n\n23\nunknown cell\ncycif-sorgerlab\n45.301241\n32.613405\n4.331525\n199.996828\n\n\n24\nunknown cell\nxenium-stanford\n26.071766\n19.994800\n1.746407\n199.995802\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in xenium-stanford:\n        Level Two Cell Type  mean_distance\n5                enterocyte      35.016424\n7               goblet cell      32.837030\n17                tuft cell      31.969551\n14                stem cell      31.434218\n16  transit amplifying cell      29.750915\n\nBottom 5 cell types in xenium-stanford:\n   Level Two Cell Type  mean_distance\n2       dendritic cell      19.604743\n0            adipocyte      19.307335\n10           mast cell      18.454766\n8        lymphoid cell      18.157623\n9           macrophage      17.955820\n\nTop 5 cell types in cycif-sorgerlab:\n  Level Two Cell Type  mean_distance\n0       abnormal cell      59.237837\n2          fibroblast      48.551081\n5        unknown cell      45.301241\n1              b cell      44.742812\n3          macrophage      43.943644\n\nBottom 5 cell types in cycif-sorgerlab:\n  Level Two Cell Type  mean_distance\n2          fibroblast      48.551081\n5        unknown cell      45.301241\n1              b cell      44.742812\n3          macrophage      43.943644\n4              t cell      43.606482\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in xenium-stanford:\n        Level Two Cell Type  median_distance\n5                enterocyte        30.665961\n17                tuft cell        29.702991\n7               goblet cell        29.215176\n14                stem cell        28.909495\n16  transit amplifying cell        25.985201\n\nBottom 5 cell types in xenium-stanford:\n                     Level Two Cell Type  median_distance\n4   endothelial cell of lymphatic vessel        16.182602\n1                                 b cell        16.177394\n0                              adipocyte        15.506267\n10                             mast cell        15.402588\n9                             macrophage        14.656862\n\nTop 5 cell types in cycif-sorgerlab:\n  Level Two Cell Type  median_distance\n0       abnormal cell        50.521866\n2          fibroblast        39.884627\n1              b cell        36.696395\n4              t cell        33.735886\n3          macrophage        33.602981\n\nBottom 5 cell types in cycif-sorgerlab:\n  Level Two Cell Type  median_distance\n2          fibroblast        39.884627\n1              b cell        36.696395\n4              t cell        33.735886\n3          macrophage        33.602981\n5        unknown cell        32.613405\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                  mean    std  CV (%)\nUnique Region                        \ncycif-sorgerlab  51.00  35.96    70.5\nxenium-stanford  28.17  19.20    68.2\n\nCell Type Variability Analysis (sorted by CV):\n                                       mean    std  CV (%)\nLevel Two Cell Type                                       \nunknown cell                          42.93  37.03    86.3\nmacrophage                            41.74  33.88    81.2\nt cell                                42.22  33.30    78.9\nfibroblast                            42.72  33.53    78.5\npericyte                              21.26  16.63    78.2\nendothelial cell of lymphatic vessel  20.22  15.35    75.9\nneuroglial cell                       22.06  16.31    73.9\nb cell                                41.76  30.62    73.3\nadipocyte                             19.31  14.10    73.0\nneuron                                22.68  15.63    68.9\nmast cell                             18.45  12.51    67.8\ndendritic cell                        19.60  13.26    67.7\ntransit amplifying cell               29.75  19.42    65.3\nenterocyte                            35.02  21.68    61.9\nabnormal cell                         59.24  36.59    61.8\nendocrine cell                        28.99  17.56    60.6\ngoblet cell                           32.84  19.25    58.6\nstem cell                             31.43  16.46    52.4\nlymphoid cell                         18.16   9.48    52.2\ntuft cell                             31.97  16.41    51.3\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nadipocyte\nxenium-stanford\n19.307335\n15.506267\n1.886588\n179.829816\n\n\n1\nb cell\ncycif-sorgerlab\n44.742812\n36.696395\n3.812328\n199.963430\n\n\n2\nb cell:memory\nxenium-stanford\n23.934378\n20.983564\n2.652329\n166.226299\n\n\n3\nb cell:naive\nxenium-stanford\n24.730393\n21.919130\n2.399703\n158.517322\n\n\n4\ndendritic cell\nxenium-stanford\n19.604743\n16.317067\n3.127862\n82.356448\n\n\n5\nendothelial cell of lymphatic vessel\nxenium-stanford\n20.220957\n16.182602\n1.837223\n191.459774\n\n\n6\nenterocyte\nxenium-stanford\n50.881839\n44.856792\n2.963287\n199.368285\n\n\n7\nenterocyte:immature\nxenium-stanford\n40.557414\n34.829782\n1.689435\n199.988725\n\n\n8\nenterocyte:progenitor\nxenium-stanford\n33.809577\n30.032085\n1.776411\n198.196246\n\n\n9\nenteroendocrine cell\nxenium-stanford\n28.989088\n25.386019\n1.870109\n187.875767\n\n\n10\nenteroycte:best4+\nxenium-stanford\n37.294043\n33.070860\n2.014740\n196.207334\n\n\n11\nepithelial cell:ki67+ proliferating tumor\ncycif-sorgerlab\n54.524579\n47.126741\n4.902750\n199.978230\n\n\n12\nepithelial cell:pdl1+ tumor\ncycif-sorgerlab\n52.223131\n44.654349\n5.014530\n199.863917\n\n\n13\nfibroblast:cancer associated\nxenium-stanford\n18.840371\n15.427564\n1.097860\n194.833536\n\n\n14\nfibroblast:crypt 1\nxenium-stanford\n20.939047\n16.763710\n1.152582\n183.642976\n\n\n15\nfibroblast:crypt 2\nxenium-stanford\n19.641772\n15.547418\n2.245442\n178.327889\n\n\n16\nfibroblast:crypt 3\nxenium-stanford\n21.084090\n17.340476\n2.056888\n152.235901\n\n\n17\nfibroblast:crypt 4\nxenium-stanford\n19.255869\n15.785117\n2.036592\n188.046806\n\n\n18\nfibroblast:wnt5b+ villus\nxenium-stanford\n22.921840\n18.785960\n1.810569\n197.299831\n\n\n19\nglial cell\nxenium-stanford\n22.059399\n17.544022\n1.767815\n198.410186\n\n\n20\ngoblet cell\nxenium-stanford\n33.697180\n28.314876\n2.175424\n199.344614\n\n\n21\ngoblet cell:immature\nxenium-stanford\n32.746761\n29.297656\n0.657771\n199.932057\n\n\n22\nlymphocyte:double-negative\ncycif-sorgerlab\n41.206296\n30.842765\n4.796007\n199.954444\n\n\n23\nlymphocyte:double-positive alpha-beta\ncycif-sorgerlab\n42.782968\n35.938167\n4.867016\n199.938330\n\n\n24\nlymphocyte:iii\ncycif-sorgerlab\n47.359164\n35.375846\n4.162606\n199.993909\n\n\n25\nlymphocyte:pdl1+\ncycif-sorgerlab\n35.163868\n27.508832\n4.779693\n199.928861\n\n\n26\nlymphoid cell:innate\nxenium-stanford\n18.157623\n17.780635\n3.743766\n38.542071\n\n\n27\nmacrophage\nxenium-stanford\n17.955820\n14.656862\n1.547417\n195.141153\n\n\n28\nmacrophage:i\ncycif-sorgerlab\n38.483925\n28.255123\n4.405694\n199.940381\n\n\n29\nmacrophage:ii\ncycif-sorgerlab\n38.832018\n30.157804\n4.922261\n199.976339\n\n\n30\nmacrophage:iii\ncycif-sorgerlab\n45.983769\n34.746116\n4.423528\n199.996448\n\n\n31\nmacrophage:iv\ncycif-sorgerlab\n45.893683\n35.164175\n4.732177\n199.989362\n\n\n32\nmacrophage:pdl1+\ncycif-sorgerlab\n41.905700\n34.802750\n4.440411\n199.946237\n\n\n33\nmast cell\nxenium-stanford\n18.454766\n15.402588\n2.088500\n176.025592\n\n\n34\nmyofibroblast\ncycif-sorgerlab\n48.551081\n39.884627\n3.859785\n199.995059\n\n\n35\nmyofibroblast cell:smooth muscle 1\nxenium-stanford\n23.465234\n18.905669\n1.743363\n195.859268\n\n\n36\nmyofibroblast cell:smooth muscle 2\nxenium-stanford\n23.503984\n19.103104\n2.537373\n193.737832\n\n\n37\nmyofibroblast cell:smooth muscle 3\nxenium-stanford\n23.681475\n19.625080\n1.369424\n194.418289\n\n\n38\nneoplastic cell\ncycif-sorgerlab\n59.784714\n50.975228\n4.447199\n199.999898\n\n\n39\nneuron\nxenium-stanford\n22.678683\n18.777829\n2.719914\n159.601136\n\n\n40\npericyte\nxenium-stanford\n21.258422\n16.283206\n1.592156\n154.814276\n\n\n41\nplasma cell\nxenium-stanford\n17.203358\n13.864204\n1.545798\n193.686073\n\n\n42\nstem cell\nxenium-stanford\n31.434218\n28.909495\n1.385274\n199.354161\n\n\n43\nt cell:cd4+\ncycif-sorgerlab\n38.980845\n30.066444\n4.281592\n199.971584\n\n\n44\nt cell:cd4+ alpha-beta\nxenium-stanford\n21.072560\n17.775179\n2.182803\n197.728143\n\n\n45\nt cell:cd4+ pdl1+\ncycif-sorgerlab\n40.801490\n33.508351\n4.445378\n199.927999\n\n\n46\nt cell:cd8+\ncycif-sorgerlab\n47.833883\n38.006688\n4.489292\n199.994514\n\n\n47\nt cell:cd8+ alpha-beta effector memory\nxenium-stanford\n19.464183\n16.545974\n1.759058\n195.781337\n\n\n48\nt cell:cd8+ pdl1+\ncycif-sorgerlab\n36.841122\n29.307785\n4.702515\n199.534678\n\n\n49\nt cell:naive\nxenium-stanford\n21.369474\n18.820881\n2.670880\n182.335436\n\n\n50\nt cell:regulatory\ncycif-sorgerlab\n33.896390\n26.884923\n4.275885\n199.965529\n\n\n51\nt cell:regulatory\nxenium-stanford\n20.982061\n17.604950\n2.425589\n144.445964\n\n\n52\ntransit amplifying cell\nxenium-stanford\n31.647644\n28.253443\n1.416608\n199.955450\n\n\n53\ntransit amplifying cell:proliferating\nxenium-stanford\n29.750915\n25.985201\n1.732760\n199.762275\n\n\n54\ntuft cell:intestinal\nxenium-stanford\n31.969551\n29.702991\n2.702540\n148.896183\n\n\n55\nunknown cell\ncycif-sorgerlab\n45.301241\n32.613405\n4.331525\n199.996828\n\n\n56\nunknown cell\nxenium-stanford\n26.071766\n19.994800\n1.746407\n199.995802\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in xenium-stanford:\n    Level Three Cell Type  mean_distance\n5              enterocyte      50.881839\n6     enterocyte:immature      40.557414\n9       enteroycte:best4+      37.294043\n7   enterocyte:progenitor      33.809577\n17            goblet cell      33.697180\n\nBottom 5 cell types in xenium-stanford:\n           Level Three Cell Type  mean_distance\n10  fibroblast:cancer associated      18.840371\n21                     mast cell      18.454766\n19          lymphoid cell:innate      18.157623\n20                    macrophage      17.955820\n27                   plasma cell      17.203358\n\nTop 5 cell types in cycif-sorgerlab:\n                        Level Three Cell Type  mean_distance\n13                            neoplastic cell      59.784714\n1   epithelial cell:ki67+ proliferating tumor      54.524579\n2                 epithelial cell:pdl1+ tumor      52.223131\n12                              myofibroblast      48.551081\n16                                t cell:cd8+      47.833883\n\nBottom 5 cell types in cycif-sorgerlab:\n   Level Three Cell Type  mean_distance\n8          macrophage:ii      38.832018\n7           macrophage:i      38.483925\n17     t cell:cd8+ pdl1+      36.841122\n6       lymphocyte:pdl1+      35.163868\n18     t cell:regulatory      33.896390\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in xenium-stanford:\n    Level Three Cell Type  median_distance\n5              enterocyte        44.856792\n6     enterocyte:immature        34.829782\n9       enteroycte:best4+        33.070860\n7   enterocyte:progenitor        30.032085\n35   tuft cell:intestinal        29.702991\n\nBottom 5 cell types in xenium-stanford:\n           Level Three Cell Type  median_distance\n0                      adipocyte        15.506267\n10  fibroblast:cancer associated        15.427564\n21                     mast cell        15.402588\n20                    macrophage        14.656862\n27                   plasma cell        13.864204\n\nTop 5 cell types in cycif-sorgerlab:\n                        Level Three Cell Type  median_distance\n13                            neoplastic cell        50.975228\n1   epithelial cell:ki67+ proliferating tumor        47.126741\n2                 epithelial cell:pdl1+ tumor        44.654349\n12                              myofibroblast        39.884627\n16                                t cell:cd8+        38.006688\n\nBottom 5 cell types in cycif-sorgerlab:\n   Level Three Cell Type  median_distance\n14           t cell:cd4+        30.066444\n17     t cell:cd8+ pdl1+        29.307785\n7           macrophage:i        28.255123\n6       lymphocyte:pdl1+        27.508832\n18     t cell:regulatory        26.884923\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                  mean    std  CV (%)\nUnique Region                        \ncycif-sorgerlab  51.00  35.96    70.5\nxenium-stanford  28.17  19.20    68.2\n\nCell Type Variability Analysis (sorted by CV):\n                                            mean    std  CV (%)\nLevel Three Cell Type                                          \nunknown cell                               42.93  37.03    86.3\nmacrophage:i                               38.48  31.75    82.5\nlymphocyte:double-negative                 41.21  33.52    81.3\nlymphocyte:iii                             47.36  38.13    80.5\nmacrophage:iii                             45.98  36.40    79.2\nmacrophage:iv                              45.89  35.94    78.3\npericyte                                   21.26  16.63    78.2\nt cell:cd4+                                38.98  30.34    77.8\nfibroblast:crypt 2                         19.64  15.27    77.7\nendothelial cell of lymphatic vessel       20.22  15.35    75.9\nlymphocyte:pdl1+                           35.16  26.64    75.8\nmacrophage:ii                              38.83  29.21    75.2\nfibroblast:crypt 1                         20.94  15.58    74.4\nt cell:cd8+                                47.83  35.45    74.1\nglial cell                                 22.06  16.31    73.9\nfibroblast:wnt5b+ villus                   22.92  16.86    73.6\nt cell:cd8+ pdl1+                          36.84  27.12    73.6\nmyofibroblast cell:smooth muscle 2         23.50  17.24    73.4\nt cell:regulatory                          33.78  24.67    73.0\nadipocyte                                  19.31  14.10    73.0\nplasma cell                                17.20  12.53    72.8\nmyofibroblast cell:smooth muscle 1         23.47  16.78    71.5\nmyofibroblast                              48.55  34.69    71.5\nmacrophage                                 17.96  12.78    71.2\nfibroblast:crypt 4                         19.26  13.53    70.2\nfibroblast:cancer associated               18.84  13.19    70.0\nmyofibroblast cell:smooth muscle 3         23.68  16.49    69.6\nt cell:cd4+ pdl1+                          40.80  28.36    69.5\nb cell                                     44.74  31.06    69.4\ngoblet cell                                33.70  23.37    69.3\nneuron                                     22.68  15.63    68.9\nfibroblast:crypt 3                         21.08  14.39    68.3\nmacrophage:pdl1+                           41.91  28.50    68.0\nt cell:cd4+ alpha-beta                     21.07  14.31    67.9\nmast cell                                  18.45  12.51    67.8\ndendritic cell                             19.60  13.26    67.7\nlymphocyte:double-positive alpha-beta      42.78  28.11    65.7\nt cell:cd8+ alpha-beta effector memory     19.46  12.76    65.6\ntransit amplifying cell:proliferating      29.75  19.42    65.3\nb cell:memory                              23.93  15.31    64.0\nepithelial cell:pdl1+ tumor                52.22  33.07    63.3\nt cell:naive                               21.37  13.53    63.3\nneoplastic cell                            59.78  36.97    61.8\nenterocyte:immature                        40.56  24.94    61.5\nenteroendocrine cell                       28.99  17.56    60.6\ntransit amplifying cell                    31.65  19.06    60.2\nb cell:naive                               24.73  14.89    60.2\nepithelial cell:ki67+ proliferating tumor  54.52  32.27    59.2\nenteroycte:best4+                          37.29  21.83    58.5\nenterocyte:progenitor                      33.81  19.47    57.6\ngoblet cell:immature                       32.75  18.76    57.3\nenterocyte                                 50.88  27.81    54.7\nstem cell                                  31.43  16.46    52.4\nlymphoid cell:innate                       18.16   9.48    52.2\ntuft cell:intestinal                       31.97  16.41    51.3\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.",
    "crumbs": [
      "Distance Analysis: colon-xenium-stanford and colon-cycif-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__spleen-codex-ufl.html",
    "href": "distance_analysis__spleen-codex-ufl.html",
    "title": "Distance Analysis: spleen-codex-ufl",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"spleen-codex-ufl\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: spleen-codex-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__spleen-codex-ufl.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__spleen-codex-ufl.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: spleen-codex-ufl",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n0.0\n3403.933\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nFSLD\n\n\n1\n0.0\n3356.808\nSinusoidal cells\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nFSLD\n\n\n2\n0.0\n3313.830\nSinusoidal cells\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nFSLD\n\n\n3\n0.0\n3304.405\nindistinct\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nFSLD\n\n\n4\n0.0\n3281.031\nindistinct\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nFSLD\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 12\nLevel Three Cell Type: 12\nLevel Two Cell Type: 9\nLevel One Cell Type: 3\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - blood endothelial\n\nLevel Three Cell Type:\n  - endothelial cell of sinusoid\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of vascular tree\n\nLevel Two Cell Type:\n  - endothelial cell of sinusoid\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of vascular tree\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell of sinusoid', # Choosing sinusoid due to high number of instances in the dataset compared to other endothelial cell types.\n    'Level Two Cell Type': 'endothelial cell of sinusoid',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: spleen-codex-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__spleen-codex-ufl.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__spleen-codex-ufl.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: spleen-codex-ufl",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n0.0\n3403.933\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nFSLD\n\n\n1\n0.0\n3356.808\nSinusoidal cells\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nFSLD\n\n\n2\n0.0\n3313.830\nSinusoidal cells\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nFSLD\n\n\n3\n0.0\n3304.405\nindistinct\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nFSLD\n\n\n4\n0.0\n3281.031\nindistinct\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nFSLD\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset']\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nFSLD\nFSLD\n\n\n1\nFSLD\nFSLD\n\n\n2\nFSLD\nFSLD\n\n\n3\nFSLD\nFSLD\n\n\n4\nFSLD\nFSLD\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['FSLD' 'KSFB' 'NGPL' 'PBVN' 'PKHL' 'XXCD']\nTotal number of unique regions: 6\n\nNumber of unique datasets per unique region:\nFSLD: 1\nKSFB: 1\nNGPL: 1\nPBVN: 1\nPKHL: 1\nXXCD: 1",
    "crumbs": [
      "Distance Analysis: spleen-codex-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__spleen-codex-ufl.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__spleen-codex-ufl.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: spleen-codex-ufl",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n0.000\n3403.933\n0\n9.425\n3409.211\n0\n10.802218\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\n\n\n1\n24\n1.131\n3416.374\n0\n9.425\n3409.211\n0\n10.958969\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\n\n\n2\n43\n12.818\n3415.620\n0\n9.425\n3409.211\n0\n7.251740\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\n\n\n3\n95\n21.866\n3407.703\n0\n9.425\n3409.211\n0\n12.532061\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\n\n\n4\n115\n22.997\n3415.997\n0\n9.425\n3409.211\n0\n15.173957\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Dataset']\n# df_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nFSLD\nFSLD\n\n\n1\nFSLD\nFSLD\n\n\n2\nFSLD\nFSLD\n\n\n3\nFSLD\nFSLD\n\n\n4\nFSLD\nFSLD\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['FSLD' 'KSFB' 'NGPL' 'PBVN' 'PKHL' 'XXCD']\nTotal number of unique regions: 6\n\nNumber of unique datasets per unique region:\nFSLD: 1\nKSFB: 1\nNGPL: 1\nPBVN: 1\nPKHL: 1\nXXCD: 1\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset']\n# df_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nFSLD\nFSLD\n\n\n1\nFSLD\nFSLD\n\n\n2\nFSLD\nFSLD\n\n\n3\nFSLD\nFSLD\n\n\n4\nFSLD\nFSLD\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n0.0\n3403.933\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nFSLD\nFSLD\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n0\n0.0\n3403.933\n0\n9.425\n3409.211\n0\n10.802218\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\nFSLD\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n0\n0.0\n3403.933\n0\n9.425\n3409.211\n0\n10.802218\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\nmacrophage\nmacrophage\nimmune cell\nFSLD",
    "crumbs": [
      "Distance Analysis: spleen-codex-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__spleen-codex-ufl.html#node-analysis",
    "href": "distance_analysis__spleen-codex-ufl.html#node-analysis",
    "title": "Distance Analysis: spleen-codex-ufl",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: spleen-codex-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__spleen-codex-ufl.html#distance-analysis",
    "href": "distance_analysis__spleen-codex-ufl.html#distance-analysis",
    "title": "Distance Analysis: spleen-codex-ufl",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nFSLD\nendothelial cell\nLevel One Cell Type\n11.933050\n10.185979\n0.377000\n120.663560\n\n\n1\nFSLD\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n69.140742\n62.332820\n0.377000\n199.993437\n\n\n2\nFSLD\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n69.140742\n62.332820\n0.377000\n199.993437\n\n\n3\nFSLD\nendothelial cell of sinusoid\nLevel Three Cell Type\n17.758929\n12.486613\n0.377000\n174.062170\n\n\n4\nFSLD\nendothelial cell of sinusoid\nLevel Two Cell Type\n17.758929\n12.486613\n0.377000\n174.062170\n\n\n5\nFSLD\nendothelial cell of vascular tree\nLevel Three Cell Type\n31.444898\n28.859590\n0.377000\n134.193466\n\n\n6\nFSLD\nendothelial cell of vascular tree\nLevel Two Cell Type\n31.444898\n28.859590\n0.377000\n134.193466\n\n\n7\nKSFB\nendothelial cell\nLevel One Cell Type\n18.516381\n12.999668\n0.377000\n159.194472\n\n\n8\nKSFB\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n100.106671\n98.720745\n0.377000\n199.996635\n\n\n9\nKSFB\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n100.106671\n98.720745\n0.377000\n199.996635\n\n\n10\nKSFB\nendothelial cell of sinusoid\nLevel Three Cell Type\n32.301586\n17.541644\n0.377000\n199.992015\n\n\n11\nKSFB\nendothelial cell of sinusoid\nLevel Two Cell Type\n32.301586\n17.541644\n0.377000\n199.992015\n\n\n12\nKSFB\nendothelial cell of vascular tree\nLevel Three Cell Type\n34.072529\n30.051417\n0.377000\n162.403006\n\n\n13\nKSFB\nendothelial cell of vascular tree\nLevel Two Cell Type\n34.072529\n30.051417\n0.377000\n162.403006\n\n\n14\nNGPL\nendothelial cell\nLevel One Cell Type\n19.649715\n12.756869\n0.377000\n199.990594\n\n\n15\nNGPL\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n105.868068\n107.070655\n0.377000\n199.996635\n\n\n16\nNGPL\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n105.868068\n107.070655\n0.377000\n199.996635\n\n\n17\nNGPL\nendothelial cell of sinusoid\nLevel Three Cell Type\n32.165822\n17.358384\n0.377000\n199.946882\n\n\n18\nNGPL\nendothelial cell of sinusoid\nLevel Two Cell Type\n32.165822\n17.358384\n0.377000\n199.946882\n\n\n19\nNGPL\nendothelial cell of vascular tree\nLevel Three Cell Type\n36.527379\n31.724052\n0.377000\n199.990594\n\n\n20\nNGPL\nendothelial cell of vascular tree\nLevel Two Cell Type\n36.527379\n31.724052\n0.377000\n199.990594\n\n\n21\nPBVN\nendothelial cell\nLevel One Cell Type\n16.689185\n12.823543\n0.377000\n181.684667\n\n\n22\nPBVN\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n90.564477\n86.386076\n0.533159\n199.999832\n\n\n23\nPBVN\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n90.564477\n86.386076\n0.533159\n199.999832\n\n\n24\nPBVN\nendothelial cell of sinusoid\nLevel Three Cell Type\n24.695179\n16.694759\n0.377000\n199.993437\n\n\n25\nPBVN\nendothelial cell of sinusoid\nLevel Two Cell Type\n24.695179\n16.694759\n0.377000\n199.993437\n\n\n26\nPBVN\nendothelial cell of vascular tree\nLevel Three Cell Type\n33.754132\n30.265846\n0.377000\n191.104792\n\n\n27\nPBVN\nendothelial cell of vascular tree\nLevel Two Cell Type\n33.754132\n30.265846\n0.377000\n191.104792\n\n\n28\nPKHL\nendothelial cell\nLevel One Cell Type\n22.572654\n14.562159\n0.377000\n165.169461\n\n\n29\nPKHL\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n113.542690\n116.746498\n0.842998\n199.996635\n\n\n30\nPKHL\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n113.542690\n116.746498\n0.842998\n199.996635\n\n\n31\nPKHL\nendothelial cell of sinusoid\nLevel Three Cell Type\n32.273382\n17.602307\n0.377000\n199.996635\n\n\n32\nPKHL\nendothelial cell of sinusoid\nLevel Two Cell Type\n32.273382\n17.602307\n0.377000\n199.996635\n\n\n33\nPKHL\nendothelial cell of vascular tree\nLevel Three Cell Type\n41.424710\n36.574829\n0.377000\n177.757399\n\n\n34\nPKHL\nendothelial cell of vascular tree\nLevel Two Cell Type\n41.424710\n36.574829\n0.377000\n177.757399\n\n\n35\nXXCD\nendothelial cell\nLevel One Cell Type\n16.957493\n12.582993\n0.377000\n182.868318\n\n\n36\nXXCD\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n107.389387\n108.560945\n0.377000\n199.999832\n\n\n37\nXXCD\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n107.389387\n108.560945\n0.377000\n199.999832\n\n\n38\nXXCD\nendothelial cell of sinusoid\nLevel Three Cell Type\n24.938923\n15.197356\n0.377000\n199.913826\n\n\n39\nXXCD\nendothelial cell of sinusoid\nLevel Two Cell Type\n24.938923\n15.197356\n0.377000\n199.913826\n\n\n40\nXXCD\nendothelial cell of vascular tree\nLevel Three Cell Type\n38.484744\n34.769948\n0.377000\n182.868318\n\n\n41\nXXCD\nendothelial cell of vascular tree\nLevel Two Cell Type\n38.484744\n34.769948\n0.377000\n182.868318\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nimmune cell\nFSLD\n12.325330\n10.515530\n0.377\n120.663560\n\n\n1\nimmune cell\nKSFB\n19.574997\n13.498495\n0.377\n159.194472\n\n\n2\nimmune cell\nNGPL\n21.022792\n13.514280\n0.377\n199.990594\n\n\n3\nimmune cell\nPBVN\n17.059760\n12.983258\n0.377\n181.684667\n\n\n4\nimmune cell\nPKHL\n22.544364\n14.330960\n0.377\n165.169461\n\n\n5\nimmune cell\nXXCD\n17.306820\n12.644964\n0.377\n182.868318\n\n\n6\nunknown cell\nFSLD\n9.336397\n7.997378\n0.377\n83.688056\n\n\n7\nunknown cell\nKSFB\n12.696620\n10.633133\n0.377\n150.979439\n\n\n8\nunknown cell\nNGPL\n10.879824\n9.311213\n0.377\n97.890139\n\n\n9\nunknown cell\nPBVN\n14.605778\n11.783889\n0.377\n145.222827\n\n\n10\nunknown cell\nPKHL\n22.720231\n16.105447\n0.377\n146.043105\n\n\n11\nunknown cell\nXXCD\n14.710918\n12.308920\n0.377\n161.352917\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in FSLD:\n  Level One Cell Type  mean_distance\n0         immune cell      12.325330\n1        unknown cell       9.336397\n\nBottom 5 cell types in FSLD:\n  Level One Cell Type  mean_distance\n0         immune cell      12.325330\n1        unknown cell       9.336397\n\nTop 5 cell types in KSFB:\n  Level One Cell Type  mean_distance\n0         immune cell      19.574997\n1        unknown cell      12.696620\n\nBottom 5 cell types in KSFB:\n  Level One Cell Type  mean_distance\n0         immune cell      19.574997\n1        unknown cell      12.696620\n\nTop 5 cell types in NGPL:\n  Level One Cell Type  mean_distance\n0         immune cell      21.022792\n1        unknown cell      10.879824\n\nBottom 5 cell types in NGPL:\n  Level One Cell Type  mean_distance\n0         immune cell      21.022792\n1        unknown cell      10.879824\n\nTop 5 cell types in PBVN:\n  Level One Cell Type  mean_distance\n0         immune cell      17.059760\n1        unknown cell      14.605778\n\nBottom 5 cell types in PBVN:\n  Level One Cell Type  mean_distance\n0         immune cell      17.059760\n1        unknown cell      14.605778\n\nTop 5 cell types in PKHL:\n  Level One Cell Type  mean_distance\n1        unknown cell      22.720231\n0         immune cell      22.544364\n\nBottom 5 cell types in PKHL:\n  Level One Cell Type  mean_distance\n1        unknown cell      22.720231\n0         immune cell      22.544364\n\nTop 5 cell types in XXCD:\n  Level One Cell Type  mean_distance\n0         immune cell      17.306820\n1        unknown cell      14.710918\n\nBottom 5 cell types in XXCD:\n  Level One Cell Type  mean_distance\n0         immune cell      17.306820\n1        unknown cell      14.710918\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in FSLD:\n  Level One Cell Type  median_distance\n0         immune cell        10.515530\n1        unknown cell         7.997378\n\nBottom 5 cell types in FSLD:\n  Level One Cell Type  median_distance\n0         immune cell        10.515530\n1        unknown cell         7.997378\n\nTop 5 cell types in KSFB:\n  Level One Cell Type  median_distance\n0         immune cell        13.498495\n1        unknown cell        10.633133\n\nBottom 5 cell types in KSFB:\n  Level One Cell Type  median_distance\n0         immune cell        13.498495\n1        unknown cell        10.633133\n\nTop 5 cell types in NGPL:\n  Level One Cell Type  median_distance\n0         immune cell        13.514280\n1        unknown cell         9.311213\n\nBottom 5 cell types in NGPL:\n  Level One Cell Type  median_distance\n0         immune cell        13.514280\n1        unknown cell         9.311213\n\nTop 5 cell types in PBVN:\n  Level One Cell Type  median_distance\n0         immune cell        12.983258\n1        unknown cell        11.783889\n\nBottom 5 cell types in PBVN:\n  Level One Cell Type  median_distance\n0         immune cell        12.983258\n1        unknown cell        11.783889\n\nTop 5 cell types in PKHL:\n  Level One Cell Type  median_distance\n1        unknown cell        16.105447\n0         immune cell        14.330960\n\nBottom 5 cell types in PKHL:\n  Level One Cell Type  median_distance\n1        unknown cell        16.105447\n0         immune cell        14.330960\n\nTop 5 cell types in XXCD:\n  Level One Cell Type  median_distance\n0         immune cell        12.644964\n1        unknown cell        12.308920\n\nBottom 5 cell types in XXCD:\n  Level One Cell Type  median_distance\n0         immune cell        12.644964\n1        unknown cell        12.308920\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nFSLD           11.93   7.39    61.9\nKSFB           18.52  18.52   100.0\nNGPL           19.65  21.17   107.7\nPBVN           16.69  14.62    87.6\nPKHL           22.57  22.69   100.5\nXXCD           16.96  16.01    94.4\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nimmune cell          18.10  18.36   101.4\nunknown cell         14.16  12.15    85.8\n\n\n\n# Define the standard region sequence for plots (Get all unique values in Unique Region column as a list.)\nregions = df_all_edges_with_cell_types['Unique Region'].unique().tolist()\nprint(\"\\nRegions in the data:\")\nprint(regions)\n\n\nRegions in the data:\n['FSLD', 'KSFB', 'NGPL', 'PBVN', 'PKHL', 'XXCD']\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(6, 1, figsize=(10, 20)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nFSLD\n28.793129\n18.193912\n0.377000\n174.062170\n\n\n1\nb cell\nKSFB\n66.936676\n47.283075\n0.533159\n199.992015\n\n\n2\nb cell\nNGPL\n62.721335\n50.108392\n0.377000\n199.946882\n\n\n3\nb cell\nPBVN\n43.296183\n27.544230\n0.377000\n199.993437\n\n\n4\nb cell\nPKHL\n74.037735\n63.134837\n0.533159\n199.996635\n\n\n5\nb cell\nXXCD\n60.047765\n41.497409\n0.533159\n199.913826\n\n\n6\nendothelial cell of lymphatic vessel\nFSLD\n29.642101\n22.399004\n1.685995\n170.821358\n\n\n7\nendothelial cell of lymphatic vessel\nKSFB\n61.887568\n50.581903\n3.243077\n199.493211\n\n\n8\nendothelial cell of lymphatic vessel\nNGPL\n43.458134\n39.208000\n2.871146\n198.593137\n\n\n9\nendothelial cell of lymphatic vessel\nPBVN\n32.893007\n27.726806\n3.039471\n136.266075\n\n\n10\nendothelial cell of lymphatic vessel\nPKHL\n56.864136\n48.143203\n7.952824\n183.699222\n\n\n11\nendothelial cell of lymphatic vessel\nXXCD\n36.088648\n32.225229\n2.639000\n129.051896\n\n\n12\nendothelial cell of vascular tree\nFSLD\n21.913759\n20.119229\n0.377000\n171.695254\n\n\n13\nendothelial cell of vascular tree\nKSFB\n29.505573\n23.603934\n1.131000\n198.672919\n\n\n14\nendothelial cell of vascular tree\nNGPL\n26.593129\n22.220624\n0.533159\n196.830469\n\n\n15\nendothelial cell of vascular tree\nPBVN\n23.699591\n21.791122\n0.533159\n132.553972\n\n\n16\nendothelial cell of vascular tree\nPKHL\n25.871987\n23.120276\n2.665793\n183.957844\n\n\n17\nendothelial cell of vascular tree\nXXCD\n25.129076\n22.500300\n2.871146\n174.160943\n\n\n18\nmacrophage\nFSLD\n12.964001\n11.638253\n0.533159\n156.988703\n\n\n19\nmacrophage\nKSFB\n19.576427\n16.003639\n0.377000\n185.984841\n\n\n20\nmacrophage\nNGPL\n19.867353\n15.475379\n0.377000\n198.830958\n\n\n21\nmacrophage\nPBVN\n16.594531\n14.813750\n0.377000\n124.547586\n\n\n22\nmacrophage\nPKHL\n17.784159\n15.084712\n0.377000\n158.327882\n\n\n23\nmacrophage\nXXCD\n16.401596\n14.395280\n0.377000\n158.600096\n\n\n24\nmyeloid cell\nFSLD\n12.219064\n10.122992\n0.377000\n128.742602\n\n\n25\nmyeloid cell\nKSFB\n19.470228\n14.640032\n0.377000\n195.567455\n\n\n26\nmyeloid cell\nNGPL\n18.322417\n13.660724\n0.377000\n189.631000\n\n\n27\nmyeloid cell\nPBVN\n14.973737\n12.823543\n0.377000\n113.148371\n\n\n28\nmyeloid cell\nPKHL\n17.663756\n13.994776\n0.377000\n157.639204\n\n\n29\nmyeloid cell\nXXCD\n15.418976\n12.795804\n0.377000\n185.362891\n\n\n30\nneutrophil\nFSLD\n13.274293\n10.616416\n0.377000\n140.427313\n\n\n31\nneutrophil\nKSFB\n17.949726\n13.151844\n0.377000\n191.740362\n\n\n32\nneutrophil\nNGPL\n17.447778\n12.069889\n0.377000\n187.014041\n\n\n33\nneutrophil\nPBVN\n16.360062\n13.328963\n0.377000\n136.539595\n\n\n34\nneutrophil\nPKHL\n15.311728\n12.492303\n0.377000\n151.875329\n\n\n35\nneutrophil\nXXCD\n14.615880\n12.140337\n0.377000\n194.779158\n\n\n36\nt cell\nFSLD\n19.170687\n13.723007\n0.533159\n173.112390\n\n\n37\nt cell\nKSFB\n37.426450\n20.902262\n0.377000\n199.818891\n\n\n38\nt cell\nNGPL\n36.643007\n21.725801\n0.377000\n199.150585\n\n\n39\nt cell\nPBVN\n26.348933\n17.818984\n0.533159\n199.797551\n\n\n40\nt cell\nPKHL\n31.271041\n17.670807\n0.533159\n199.732451\n\n\n41\nt cell\nXXCD\n19.165004\n13.707463\n0.377000\n199.459011\n\n\n42\nunknown cell\nFSLD\n11.225060\n8.328202\n0.377000\n160.251610\n\n\n43\nunknown cell\nKSFB\n20.793916\n12.210378\n0.377000\n197.669193\n\n\n44\nunknown cell\nNGPL\n14.866453\n9.960223\n0.377000\n194.954206\n\n\n45\nunknown cell\nPBVN\n20.411115\n14.025211\n0.377000\n175.661774\n\n\n46\nunknown cell\nPKHL\n32.481525\n19.752066\n0.377000\n199.245838\n\n\n47\nunknown cell\nXXCD\n20.205180\n14.483867\n0.377000\n199.347818\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in FSLD:\n                    Level Two Cell Type  mean_distance\n1  endothelial cell of lymphatic vessel      29.642101\n0                                b cell      28.793129\n2     endothelial cell of vascular tree      21.913759\n6                                t cell      19.170687\n5                            neutrophil      13.274293\n\nBottom 5 cell types in FSLD:\n  Level Two Cell Type  mean_distance\n6              t cell      19.170687\n5          neutrophil      13.274293\n3          macrophage      12.964001\n4        myeloid cell      12.219064\n7        unknown cell      11.225060\n\nTop 5 cell types in KSFB:\n                    Level Two Cell Type  mean_distance\n0                                b cell      66.936676\n1  endothelial cell of lymphatic vessel      61.887568\n6                                t cell      37.426450\n2     endothelial cell of vascular tree      29.505573\n7                          unknown cell      20.793916\n\nBottom 5 cell types in KSFB:\n                 Level Two Cell Type  mean_distance\n2  endothelial cell of vascular tree      29.505573\n7                       unknown cell      20.793916\n3                         macrophage      19.576427\n4                       myeloid cell      19.470228\n5                         neutrophil      17.949726\n\nTop 5 cell types in NGPL:\n                    Level Two Cell Type  mean_distance\n0                                b cell      62.721335\n1  endothelial cell of lymphatic vessel      43.458134\n6                                t cell      36.643007\n2     endothelial cell of vascular tree      26.593129\n3                            macrophage      19.867353\n\nBottom 5 cell types in NGPL:\n                 Level Two Cell Type  mean_distance\n2  endothelial cell of vascular tree      26.593129\n3                         macrophage      19.867353\n4                       myeloid cell      18.322417\n5                         neutrophil      17.447778\n7                       unknown cell      14.866453\n\nTop 5 cell types in PBVN:\n                    Level Two Cell Type  mean_distance\n0                                b cell      43.296183\n1  endothelial cell of lymphatic vessel      32.893007\n6                                t cell      26.348933\n2     endothelial cell of vascular tree      23.699591\n7                          unknown cell      20.411115\n\nBottom 5 cell types in PBVN:\n                 Level Two Cell Type  mean_distance\n2  endothelial cell of vascular tree      23.699591\n7                       unknown cell      20.411115\n3                         macrophage      16.594531\n5                         neutrophil      16.360062\n4                       myeloid cell      14.973737\n\nTop 5 cell types in PKHL:\n                    Level Two Cell Type  mean_distance\n0                                b cell      74.037735\n1  endothelial cell of lymphatic vessel      56.864136\n7                          unknown cell      32.481525\n6                                t cell      31.271041\n2     endothelial cell of vascular tree      25.871987\n\nBottom 5 cell types in PKHL:\n                 Level Two Cell Type  mean_distance\n6                             t cell      31.271041\n2  endothelial cell of vascular tree      25.871987\n3                         macrophage      17.784159\n4                       myeloid cell      17.663756\n5                         neutrophil      15.311728\n\nTop 5 cell types in XXCD:\n                    Level Two Cell Type  mean_distance\n0                                b cell      60.047765\n1  endothelial cell of lymphatic vessel      36.088648\n2     endothelial cell of vascular tree      25.129076\n7                          unknown cell      20.205180\n6                                t cell      19.165004\n\nBottom 5 cell types in XXCD:\n  Level Two Cell Type  mean_distance\n7        unknown cell      20.205180\n6              t cell      19.165004\n3          macrophage      16.401596\n4        myeloid cell      15.418976\n5          neutrophil      14.615880\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in FSLD:\n                    Level Two Cell Type  median_distance\n1  endothelial cell of lymphatic vessel        22.399004\n2     endothelial cell of vascular tree        20.119229\n0                                b cell        18.193912\n6                                t cell        13.723007\n3                            macrophage        11.638253\n\nBottom 5 cell types in FSLD:\n  Level Two Cell Type  median_distance\n6              t cell        13.723007\n3          macrophage        11.638253\n5          neutrophil        10.616416\n4        myeloid cell        10.122992\n7        unknown cell         8.328202\n\nTop 5 cell types in KSFB:\n                    Level Two Cell Type  median_distance\n1  endothelial cell of lymphatic vessel        50.581903\n0                                b cell        47.283075\n2     endothelial cell of vascular tree        23.603934\n6                                t cell        20.902262\n3                            macrophage        16.003639\n\nBottom 5 cell types in KSFB:\n  Level Two Cell Type  median_distance\n6              t cell        20.902262\n3          macrophage        16.003639\n4        myeloid cell        14.640032\n5          neutrophil        13.151844\n7        unknown cell        12.210378\n\nTop 5 cell types in NGPL:\n                    Level Two Cell Type  median_distance\n0                                b cell        50.108392\n1  endothelial cell of lymphatic vessel        39.208000\n2     endothelial cell of vascular tree        22.220624\n6                                t cell        21.725801\n3                            macrophage        15.475379\n\nBottom 5 cell types in NGPL:\n  Level Two Cell Type  median_distance\n6              t cell        21.725801\n3          macrophage        15.475379\n4        myeloid cell        13.660724\n5          neutrophil        12.069889\n7        unknown cell         9.960223\n\nTop 5 cell types in PBVN:\n                    Level Two Cell Type  median_distance\n1  endothelial cell of lymphatic vessel        27.726806\n0                                b cell        27.544230\n2     endothelial cell of vascular tree        21.791122\n6                                t cell        17.818984\n3                            macrophage        14.813750\n\nBottom 5 cell types in PBVN:\n  Level Two Cell Type  median_distance\n6              t cell        17.818984\n3          macrophage        14.813750\n7        unknown cell        14.025211\n5          neutrophil        13.328963\n4        myeloid cell        12.823543\n\nTop 5 cell types in PKHL:\n                    Level Two Cell Type  median_distance\n0                                b cell        63.134837\n1  endothelial cell of lymphatic vessel        48.143203\n2     endothelial cell of vascular tree        23.120276\n7                          unknown cell        19.752066\n6                                t cell        17.670807\n\nBottom 5 cell types in PKHL:\n  Level Two Cell Type  median_distance\n7        unknown cell        19.752066\n6              t cell        17.670807\n3          macrophage        15.084712\n4        myeloid cell        13.994776\n5          neutrophil        12.492303\n\nTop 5 cell types in XXCD:\n                    Level Two Cell Type  median_distance\n0                                b cell        41.497409\n1  endothelial cell of lymphatic vessel        32.225229\n2     endothelial cell of vascular tree        22.500300\n7                          unknown cell        14.483867\n3                            macrophage        14.395280\n\nBottom 5 cell types in XXCD:\n  Level Two Cell Type  median_distance\n7        unknown cell        14.483867\n3          macrophage        14.395280\n6              t cell        13.707463\n4        myeloid cell        12.795804\n5          neutrophil        12.140337\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nFSLD           17.76  17.69    99.6\nKSFB           32.30  37.95   117.5\nNGPL           32.17  35.55   110.5\nPBVN           24.70  24.92   100.9\nPKHL           32.27  36.56   113.3\nXXCD           24.94  29.75   119.3\n\nCell Type Variability Analysis (sorted by CV):\n                                       mean    std  CV (%)\nLevel Two Cell Type                                       \nunknown cell                          19.98  22.82   114.2\nt cell                                27.79  30.32   109.1\nb cell                                54.90  48.74    88.8\nneutrophil                            15.81  13.10    82.9\nmyeloid cell                          15.79  12.86    81.4\nendothelial cell of lymphatic vessel  42.11  30.14    71.6\nmacrophage                            16.86  11.93    70.8\nendothelial cell of vascular tree     25.07  15.68    62.5\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nFSLD\n15.017328\n12.756869\n0.377000\n150.453233\n\n\n1\nb cell\nKSFB\n21.320057\n16.424398\n0.533159\n191.699959\n\n\n2\nb cell\nNGPL\n21.343961\n15.945808\n0.377000\n197.501949\n\n\n3\nb cell\nPBVN\n18.469944\n15.530387\n0.377000\n167.593356\n\n\n4\nb cell\nPKHL\n18.087155\n14.218947\n0.533159\n156.409572\n\n\n5\nb cell\nXXCD\n16.399071\n13.592928\n0.533159\n147.880623\n\n\n6\nb cell:follicular\nFSLD\n44.741041\n33.688278\n0.533159\n174.062170\n\n\n7\nb cell:follicular\nKSFB\n98.262190\n94.780079\n3.016000\n199.992015\n\n\n8\nb cell:follicular\nNGPL\n86.597350\n82.378598\n0.533159\n199.946882\n\n\n9\nb cell:follicular\nPBVN\n62.807603\n52.209394\n3.221089\n199.993437\n\n\n10\nb cell:follicular\nPKHL\n83.720368\n75.842618\n2.744601\n199.996635\n\n\n11\nb cell:follicular\nXXCD\n76.025086\n66.886430\n2.871146\n199.913826\n\n\n12\ncell:proliferating\nFSLD\n18.250368\n13.070542\n2.639000\n160.251610\n\n\n13\ncell:proliferating\nKSFB\n16.776125\n12.308920\n0.377000\n194.953112\n\n\n14\ncell:proliferating\nNGPL\n16.035974\n11.196329\n0.377000\n194.954206\n\n\n15\ncell:proliferating\nPBVN\n22.825014\n15.856425\n0.377000\n175.661774\n\n\n16\ncell:proliferating\nPKHL\n22.113843\n16.118679\n0.377000\n195.479862\n\n\n17\ncell:proliferating\nXXCD\n17.848101\n14.508379\n0.533159\n199.347818\n\n\n18\nendothelial cell of lymphatic vessel\nFSLD\n29.642101\n22.399004\n1.685995\n170.821358\n\n\n19\nendothelial cell of lymphatic vessel\nKSFB\n61.887568\n50.581903\n3.243077\n199.493211\n\n\n20\nendothelial cell of lymphatic vessel\nNGPL\n43.458134\n39.208000\n2.871146\n198.593137\n\n\n21\nendothelial cell of lymphatic vessel\nPBVN\n32.893007\n27.726806\n3.039471\n136.266075\n\n\n22\nendothelial cell of lymphatic vessel\nPKHL\n56.864136\n48.143203\n7.952824\n183.699222\n\n\n23\nendothelial cell of lymphatic vessel\nXXCD\n36.088648\n32.225229\n2.639000\n129.051896\n\n\n24\nendothelial cell of vascular tree\nFSLD\n21.913759\n20.119229\n0.377000\n171.695254\n\n\n25\nendothelial cell of vascular tree\nKSFB\n29.505573\n23.603934\n1.131000\n198.672919\n\n\n26\nendothelial cell of vascular tree\nNGPL\n26.593129\n22.220624\n0.533159\n196.830469\n\n\n27\nendothelial cell of vascular tree\nPBVN\n23.699591\n21.791122\n0.533159\n132.553972\n\n\n28\nendothelial cell of vascular tree\nPKHL\n25.871987\n23.120276\n2.665793\n183.957844\n\n\n29\nendothelial cell of vascular tree\nXXCD\n25.129076\n22.500300\n2.871146\n174.160943\n\n\n30\nmacrophage\nFSLD\n12.964001\n11.638253\n0.533159\n156.988703\n\n\n31\nmacrophage\nKSFB\n19.576427\n16.003639\n0.377000\n185.984841\n\n\n32\nmacrophage\nNGPL\n19.867353\n15.475379\n0.377000\n198.830958\n\n\n33\nmacrophage\nPBVN\n16.594531\n14.813750\n0.377000\n124.547586\n\n\n34\nmacrophage\nPKHL\n17.784159\n15.084712\n0.377000\n158.327882\n\n\n35\nmacrophage\nXXCD\n16.401596\n14.395280\n0.377000\n158.600096\n\n\n36\nmyeloid cell\nFSLD\n12.219064\n10.122992\n0.377000\n128.742602\n\n\n37\nmyeloid cell\nKSFB\n19.470228\n14.640032\n0.377000\n195.567455\n\n\n38\nmyeloid cell\nNGPL\n18.322417\n13.660724\n0.377000\n189.631000\n\n\n39\nmyeloid cell\nPBVN\n14.973737\n12.823543\n0.377000\n113.148371\n\n\n40\nmyeloid cell\nPKHL\n17.663756\n13.994776\n0.377000\n157.639204\n\n\n41\nmyeloid cell\nXXCD\n15.418976\n12.795804\n0.377000\n185.362891\n\n\n42\nneutrophil/monocyte\nFSLD\n13.274293\n10.616416\n0.377000\n140.427313\n\n\n43\nneutrophil/monocyte\nKSFB\n17.949726\n13.151844\n0.377000\n191.740362\n\n\n44\nneutrophil/monocyte\nNGPL\n17.447778\n12.069889\n0.377000\n187.014041\n\n\n45\nneutrophil/monocyte\nPBVN\n16.360062\n13.328963\n0.377000\n136.539595\n\n\n46\nneutrophil/monocyte\nPKHL\n15.311728\n12.492303\n0.377000\n151.875329\n\n\n47\nneutrophil/monocyte\nXXCD\n14.615880\n12.140337\n0.377000\n194.779158\n\n\n48\nt cell:cd4+ alpha-beta memory\nFSLD\n30.214247\n19.784420\n0.842998\n173.112390\n\n\n49\nt cell:cd4+ alpha-beta memory\nKSFB\n59.324035\n41.748388\n2.293201\n199.818891\n\n\n50\nt cell:cd4+ alpha-beta memory\nNGPL\n56.807808\n47.174738\n2.744601\n199.150585\n\n\n51\nt cell:cd4+ alpha-beta memory\nPBVN\n41.516702\n27.747302\n2.639000\n199.797551\n\n\n52\nt cell:cd4+ alpha-beta memory\nPKHL\n56.975496\n42.997011\n1.922330\n199.732451\n\n\n53\nt cell:cd4+ alpha-beta memory\nXXCD\n35.364842\n20.820506\n1.922330\n199.459011\n\n\n54\nt cell:cd8+ alpha-beta memory\nFSLD\n13.932302\n12.169569\n0.533159\n117.974499\n\n\n55\nt cell:cd8+ alpha-beta memory\nKSFB\n18.510546\n15.197356\n0.377000\n183.973682\n\n\n56\nt cell:cd8+ alpha-beta memory\nNGPL\n18.357679\n14.552395\n0.377000\n195.575450\n\n\n57\nt cell:cd8+ alpha-beta memory\nPBVN\n16.785163\n14.871205\n0.533159\n127.954155\n\n\n58\nt cell:cd8+ alpha-beta memory\nPKHL\n17.167939\n14.171389\n0.533159\n169.717009\n\n\n59\nt cell:cd8+ alpha-beta memory\nXXCD\n14.440700\n12.549061\n0.377000\n155.671330\n\n\n60\nunknown cell\nFSLD\n9.064110\n7.511672\n0.377000\n156.522210\n\n\n61\nunknown cell\nKSFB\n25.388738\n12.022695\n0.377000\n197.669193\n\n\n62\nunknown cell\nNGPL\n13.683767\n8.744450\n0.377000\n164.182093\n\n\n63\nunknown cell\nPBVN\n19.382652\n13.086842\n0.377000\n160.660840\n\n\n64\nunknown cell\nPKHL\n39.160130\n25.699678\n0.377000\n199.245838\n\n\n65\nunknown cell\nXXCD\n23.403814\n14.417472\n0.377000\n199.051002\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in FSLD:\n                  Level Three Cell Type  mean_distance\n1                     b cell:follicular      44.741041\n8         t cell:cd4+ alpha-beta memory      30.214247\n3  endothelial cell of lymphatic vessel      29.642101\n4     endothelial cell of vascular tree      21.913759\n2                    cell:proliferating      18.250368\n\nBottom 5 cell types in FSLD:\n            Level Three Cell Type  mean_distance\n9   t cell:cd8+ alpha-beta memory      13.932302\n7             neutrophil/monocyte      13.274293\n5                      macrophage      12.964001\n6                    myeloid cell      12.219064\n10                   unknown cell       9.064110\n\nTop 5 cell types in KSFB:\n                   Level Three Cell Type  mean_distance\n1                      b cell:follicular      98.262190\n3   endothelial cell of lymphatic vessel      61.887568\n8          t cell:cd4+ alpha-beta memory      59.324035\n4      endothelial cell of vascular tree      29.505573\n10                          unknown cell      25.388738\n\nBottom 5 cell types in KSFB:\n           Level Three Cell Type  mean_distance\n5                     macrophage      19.576427\n6                   myeloid cell      19.470228\n9  t cell:cd8+ alpha-beta memory      18.510546\n7            neutrophil/monocyte      17.949726\n2             cell:proliferating      16.776125\n\nTop 5 cell types in NGPL:\n                  Level Three Cell Type  mean_distance\n1                     b cell:follicular      86.597350\n8         t cell:cd4+ alpha-beta memory      56.807808\n3  endothelial cell of lymphatic vessel      43.458134\n4     endothelial cell of vascular tree      26.593129\n0                                b cell      21.343961\n\nBottom 5 cell types in NGPL:\n            Level Three Cell Type  mean_distance\n9   t cell:cd8+ alpha-beta memory      18.357679\n6                    myeloid cell      18.322417\n7             neutrophil/monocyte      17.447778\n2              cell:proliferating      16.035974\n10                   unknown cell      13.683767\n\nTop 5 cell types in PBVN:\n                  Level Three Cell Type  mean_distance\n1                     b cell:follicular      62.807603\n8         t cell:cd4+ alpha-beta memory      41.516702\n3  endothelial cell of lymphatic vessel      32.893007\n4     endothelial cell of vascular tree      23.699591\n2                    cell:proliferating      22.825014\n\nBottom 5 cell types in PBVN:\n           Level Three Cell Type  mean_distance\n0                         b cell      18.469944\n9  t cell:cd8+ alpha-beta memory      16.785163\n5                     macrophage      16.594531\n7            neutrophil/monocyte      16.360062\n6                   myeloid cell      14.973737\n\nTop 5 cell types in PKHL:\n                   Level Three Cell Type  mean_distance\n1                      b cell:follicular      83.720368\n8          t cell:cd4+ alpha-beta memory      56.975496\n3   endothelial cell of lymphatic vessel      56.864136\n10                          unknown cell      39.160130\n4      endothelial cell of vascular tree      25.871987\n\nBottom 5 cell types in PKHL:\n           Level Three Cell Type  mean_distance\n0                         b cell      18.087155\n5                     macrophage      17.784159\n6                   myeloid cell      17.663756\n9  t cell:cd8+ alpha-beta memory      17.167939\n7            neutrophil/monocyte      15.311728\n\nTop 5 cell types in XXCD:\n                   Level Three Cell Type  mean_distance\n1                      b cell:follicular      76.025086\n3   endothelial cell of lymphatic vessel      36.088648\n8          t cell:cd4+ alpha-beta memory      35.364842\n4      endothelial cell of vascular tree      25.129076\n10                          unknown cell      23.403814\n\nBottom 5 cell types in XXCD:\n           Level Three Cell Type  mean_distance\n5                     macrophage      16.401596\n0                         b cell      16.399071\n6                   myeloid cell      15.418976\n7            neutrophil/monocyte      14.615880\n9  t cell:cd8+ alpha-beta memory      14.440700\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in FSLD:\n                  Level Three Cell Type  median_distance\n1                     b cell:follicular        33.688278\n3  endothelial cell of lymphatic vessel        22.399004\n4     endothelial cell of vascular tree        20.119229\n8         t cell:cd4+ alpha-beta memory        19.784420\n2                    cell:proliferating        13.070542\n\nBottom 5 cell types in FSLD:\n            Level Three Cell Type  median_distance\n9   t cell:cd8+ alpha-beta memory        12.169569\n5                      macrophage        11.638253\n7             neutrophil/monocyte        10.616416\n6                    myeloid cell        10.122992\n10                   unknown cell         7.511672\n\nTop 5 cell types in KSFB:\n                  Level Three Cell Type  median_distance\n1                     b cell:follicular        94.780079\n3  endothelial cell of lymphatic vessel        50.581903\n8         t cell:cd4+ alpha-beta memory        41.748388\n4     endothelial cell of vascular tree        23.603934\n0                                b cell        16.424398\n\nBottom 5 cell types in KSFB:\n            Level Three Cell Type  median_distance\n9   t cell:cd8+ alpha-beta memory        15.197356\n6                    myeloid cell        14.640032\n7             neutrophil/monocyte        13.151844\n2              cell:proliferating        12.308920\n10                   unknown cell        12.022695\n\nTop 5 cell types in NGPL:\n                  Level Three Cell Type  median_distance\n1                     b cell:follicular        82.378598\n8         t cell:cd4+ alpha-beta memory        47.174738\n3  endothelial cell of lymphatic vessel        39.208000\n4     endothelial cell of vascular tree        22.220624\n0                                b cell        15.945808\n\nBottom 5 cell types in NGPL:\n            Level Three Cell Type  median_distance\n9   t cell:cd8+ alpha-beta memory        14.552395\n6                    myeloid cell        13.660724\n7             neutrophil/monocyte        12.069889\n2              cell:proliferating        11.196329\n10                   unknown cell         8.744450\n\nTop 5 cell types in PBVN:\n                  Level Three Cell Type  median_distance\n1                     b cell:follicular        52.209394\n8         t cell:cd4+ alpha-beta memory        27.747302\n3  endothelial cell of lymphatic vessel        27.726806\n4     endothelial cell of vascular tree        21.791122\n2                    cell:proliferating        15.856425\n\nBottom 5 cell types in PBVN:\n            Level Three Cell Type  median_distance\n9   t cell:cd8+ alpha-beta memory        14.871205\n5                      macrophage        14.813750\n7             neutrophil/monocyte        13.328963\n10                   unknown cell        13.086842\n6                    myeloid cell        12.823543\n\nTop 5 cell types in PKHL:\n                   Level Three Cell Type  median_distance\n1                      b cell:follicular        75.842618\n3   endothelial cell of lymphatic vessel        48.143203\n8          t cell:cd4+ alpha-beta memory        42.997011\n10                          unknown cell        25.699678\n4      endothelial cell of vascular tree        23.120276\n\nBottom 5 cell types in PKHL:\n           Level Three Cell Type  median_distance\n5                     macrophage        15.084712\n0                         b cell        14.218947\n9  t cell:cd8+ alpha-beta memory        14.171389\n6                   myeloid cell        13.994776\n7            neutrophil/monocyte        12.492303\n\nTop 5 cell types in XXCD:\n                  Level Three Cell Type  median_distance\n1                     b cell:follicular        66.886430\n3  endothelial cell of lymphatic vessel        32.225229\n4     endothelial cell of vascular tree        22.500300\n8         t cell:cd4+ alpha-beta memory        20.820506\n2                    cell:proliferating        14.508379\n\nBottom 5 cell types in XXCD:\n           Level Three Cell Type  median_distance\n5                     macrophage        14.395280\n0                         b cell        13.592928\n6                   myeloid cell        12.795804\n9  t cell:cd8+ alpha-beta memory        12.549061\n7            neutrophil/monocyte        12.140337\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nFSLD           17.76  17.69    99.6\nKSFB           32.30  37.95   117.5\nNGPL           32.17  35.55   110.5\nPBVN           24.70  24.92   100.9\nPKHL           32.27  36.56   113.3\nXXCD           24.94  29.75   119.3\n\nCell Type Variability Analysis (sorted by CV):\n                                       mean    std  CV (%)\nLevel Three Cell Type                                     \nunknown cell                          21.03  25.66   122.0\ncell:proliferating                    18.51  18.05    97.5\nt cell:cd4+ alpha-beta memory         47.75  40.36    84.5\nneutrophil/monocyte                   15.81  13.10    82.9\nmyeloid cell                          15.79  12.86    81.4\nb cell                                18.27  14.68    80.4\nt cell:cd8+ alpha-beta memory         16.14  11.70    72.5\nendothelial cell of lymphatic vessel  42.11  30.14    71.6\nmacrophage                            16.86  11.93    70.8\nb cell:follicular                     76.64  48.88    63.8\nendothelial cell of vascular tree     25.07  15.68    62.5\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.",
    "crumbs": [
      "Distance Analysis: spleen-codex-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__lung-codex-urmc.html",
    "href": "distance_analysis__lung-codex-urmc.html",
    "title": "Distance Analysis: lung-codex-urmc",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"lung-codex-urmc\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            d1, d2, d3, d4, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            dataset_name = f'{d1}-{d2}-{d3}-{d4}'  # Construct dataset name from the first four parts of the filename.\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: lung-codex-urmc"
    ]
  },
  {
    "objectID": "distance_analysis__lung-codex-urmc.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__lung-codex-urmc.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: lung-codex-urmc",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n55.000000\n4633.074074\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n1\n794.777778\n3643.197531\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n2\n848.313953\n3606.447674\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n3\n1046.877061\n2890.736132\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n4\n2406.666667\n1298.307692\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 54\nLevel Three Cell Type: 20\nLevel Two Cell Type: 17\nLevel One Cell Type: 7\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n\nLevel Three Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of capillary\n\nLevel Two Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of capillary\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: lung-codex-urmc"
    ]
  },
  {
    "objectID": "distance_analysis__lung-codex-urmc.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__lung-codex-urmc.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: lung-codex-urmc",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# Create a dictionary to map lung regions to correct Normal/Disease condition.\nregion_map = {'D115-RLL-10A3-40':'Disease',\n 'D265-LLL-7A7-12':'Normal', \n}\n\n# Define the standard region sequence for plots\nregions = ['Normal', 'Disease']\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n55.000000\n4633.074074\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n1\n794.777778\n3643.197531\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n2\n848.313953\n3606.447674\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n3\n1046.877061\n2890.736132\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n4\n2406.666667\n1298.307692\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nD265-LLL-7A7-12\nNormal\n\n\n1\nD265-LLL-7A7-12\nNormal\n\n\n2\nD265-LLL-7A7-12\nNormal\n\n\n3\nD265-LLL-7A7-12\nNormal\n\n\n4\nD265-LLL-7A7-12\nNormal\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['Normal' 'Disease']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\nNormal: 1\nDisease: 1",
    "crumbs": [
      "Distance Analysis: lung-codex-urmc"
    ]
  },
  {
    "objectID": "distance_analysis__lung-codex-urmc.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__lung-codex-urmc.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: lung-codex-urmc",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n9600\n54.891304\n14218.369565\n0\n164.375000\n14329.000000\n0\n155.646306\nD265-LLL-7A7-12\nendothelial cell\nLevel Three Cell Type\n\n\n1\n9604\n148.519685\n14344.433071\n0\n164.375000\n14329.000000\n0\n22.126244\nD265-LLL-7A7-12\nendothelial cell\nLevel Three Cell Type\n\n\n2\n9603\n145.042553\n13454.680851\n0\n150.838235\n13477.191176\n0\n23.244455\nD265-LLL-7A7-12\nendothelial cell\nLevel Three Cell Type\n\n\n3\n9605\n151.107143\n13463.553571\n0\n150.838235\n13477.191176\n0\n13.640256\nD265-LLL-7A7-12\nendothelial cell\nLevel Three Cell Type\n\n\n4\n9607\n160.127168\n13502.421965\n0\n150.838235\n13477.191176\n0\n26.886371\nD265-LLL-7A7-12\nendothelial cell\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nD265-LLL-7A7-12\nNormal\n\n\n1\nD265-LLL-7A7-12\nNormal\n\n\n2\nD265-LLL-7A7-12\nNormal\n\n\n3\nD265-LLL-7A7-12\nNormal\n\n\n4\nD265-LLL-7A7-12\nNormal\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['Normal' 'Disease']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\nNormal: 1\nDisease: 1\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nD265-LLL-7A7-12\nNormal\n\n\n1\nD265-LLL-7A7-12\nNormal\n\n\n2\nD265-LLL-7A7-12\nNormal\n\n\n3\nD265-LLL-7A7-12\nNormal\n\n\n4\nD265-LLL-7A7-12\nNormal\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n55.0\n4633.074074\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nD265-LLL-7A7-12\nNormal\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n9600\n54.891304\n14218.369565\n0\n164.375\n14329.0\n0\n155.646306\nD265-LLL-7A7-12\nendothelial cell\nLevel Three Cell Type\nNormal\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n9600\n54.891304\n14218.369565\n0\n164.375\n14329.0\n0\n155.646306\nD265-LLL-7A7-12\nendothelial cell\nLevel Three Cell Type\nt cell:cd8+\nt cell\nimmune cell\nNormal",
    "crumbs": [
      "Distance Analysis: lung-codex-urmc"
    ]
  },
  {
    "objectID": "distance_analysis__lung-codex-urmc.html#node-analysis",
    "href": "distance_analysis__lung-codex-urmc.html#node-analysis",
    "title": "Distance Analysis: lung-codex-urmc",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: lung-codex-urmc"
    ]
  },
  {
    "objectID": "distance_analysis__lung-codex-urmc.html#distance-analysis",
    "href": "distance_analysis__lung-codex-urmc.html#distance-analysis",
    "title": "Distance Analysis: lung-codex-urmc",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nDisease\nendothelial cell\nLevel One Cell Type\n42.723724\n30.471857\n4.826959\n199.996537\n\n\n1\nDisease\nendothelial cell\nLevel Three Cell Type\n46.507558\n34.814730\n4.317932\n199.976085\n\n\n2\nDisease\nendothelial cell\nLevel Two Cell Type\n46.507558\n34.814730\n4.317932\n199.976085\n\n\n3\nDisease\nendothelial cell of capillary\nLevel Three Cell Type\n62.225686\n49.163320\n4.317932\n199.998891\n\n\n4\nDisease\nendothelial cell of capillary\nLevel Two Cell Type\n62.225686\n49.163320\n4.317932\n199.998891\n\n\n5\nNormal\nendothelial cell\nLevel One Cell Type\n38.755288\n31.499763\n4.467862\n199.906751\n\n\n6\nNormal\nendothelial cell\nLevel Three Cell Type\n45.655140\n35.412244\n4.467862\n199.967962\n\n\n7\nNormal\nendothelial cell\nLevel Two Cell Type\n45.655140\n35.412244\n4.467862\n199.967962\n\n\n8\nNormal\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n100.380353\n98.949395\n5.158630\n199.998081\n\n\n9\nNormal\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n100.380353\n98.949395\n5.158630\n199.998081\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nDisease\n32.455094\n25.588249\n4.826959\n199.648377\n\n\n1\nepithelial cell\nNormal\n35.403572\n28.856798\n4.647661\n199.778494\n\n\n2\nhematopoietic precursor cell\nNormal\n34.836844\n27.595297\n6.647334\n183.441998\n\n\n3\nimmune cell\nDisease\n52.244046\n38.866237\n5.341610\n199.996537\n\n\n4\nimmune cell\nNormal\n39.351442\n31.840836\n5.332036\n199.829270\n\n\n5\nmesenchymal cell\nDisease\n46.334527\n33.301188\n5.314126\n199.976085\n\n\n6\nmesenchymal cell\nNormal\n49.582849\n43.837154\n6.818182\n199.215219\n\n\n7\nmixed immune/epithelial cell population\nDisease\n29.528454\n23.648768\n6.334930\n199.968661\n\n\n8\nunknown cell\nDisease\n21.070750\n15.768757\n5.697526\n190.229178\n\n\n9\nunknown cell\nNormal\n37.909030\n30.412302\n4.467862\n199.906751\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Normal:\n            Level One Cell Type  mean_distance\n3              mesenchymal cell      49.582849\n2                   immune cell      39.351442\n4                  unknown cell      37.909030\n0               epithelial cell      35.403572\n1  hematopoietic precursor cell      34.836844\n\nBottom 5 cell types in Normal:\n            Level One Cell Type  mean_distance\n3              mesenchymal cell      49.582849\n2                   immune cell      39.351442\n4                  unknown cell      37.909030\n0               epithelial cell      35.403572\n1  hematopoietic precursor cell      34.836844\n\nTop 5 cell types in Disease:\n                       Level One Cell Type  mean_distance\n1                              immune cell      52.244046\n2                         mesenchymal cell      46.334527\n0                          epithelial cell      32.455094\n3  mixed immune/epithelial cell population      29.528454\n4                             unknown cell      21.070750\n\nBottom 5 cell types in Disease:\n                       Level One Cell Type  mean_distance\n1                              immune cell      52.244046\n2                         mesenchymal cell      46.334527\n0                          epithelial cell      32.455094\n3  mixed immune/epithelial cell population      29.528454\n4                             unknown cell      21.070750\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Normal:\n            Level One Cell Type  median_distance\n3              mesenchymal cell        43.837154\n2                   immune cell        31.840836\n4                  unknown cell        30.412302\n0               epithelial cell        28.856798\n1  hematopoietic precursor cell        27.595297\n\nBottom 5 cell types in Normal:\n            Level One Cell Type  median_distance\n3              mesenchymal cell        43.837154\n2                   immune cell        31.840836\n4                  unknown cell        30.412302\n0               epithelial cell        28.856798\n1  hematopoietic precursor cell        27.595297\n\nTop 5 cell types in Disease:\n                       Level One Cell Type  median_distance\n1                              immune cell        38.866237\n2                         mesenchymal cell        33.301188\n0                          epithelial cell        25.588249\n3  mixed immune/epithelial cell population        23.648768\n4                             unknown cell        15.768757\n\nBottom 5 cell types in Disease:\n                       Level One Cell Type  median_distance\n1                              immune cell        38.866237\n2                         mesenchymal cell        33.301188\n0                          epithelial cell        25.588249\n3  mixed immune/epithelial cell population        23.648768\n4                             unknown cell        15.768757\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nDisease        42.72  34.40    80.5\nNormal         38.76  26.44    68.2\n\nCell Type Variability Analysis (sorted by CV):\n                                          mean    std  CV (%)\nLevel One Cell Type                                          \nunknown cell                             34.17  25.86    75.7\nimmune cell                              46.17  34.71    75.2\nmesenchymal cell                         47.92  33.60    70.1\nhematopoietic precursor cell             34.84  24.25    69.6\nepithelial cell                          33.93  23.11    68.1\nmixed immune/epithelial cell population  29.53  19.66    66.6\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(2, 1, figsize=(10, 15)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n# Generate Split Violin Plot\ndef plot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", hue=\"Unique Region\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=True, palette='Spectral', alpha=.9, hue_order=regions)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size, loc='upper right', bbox_to_anchor=(1.15, 1))\n\n    plt.title(f'Split violin plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel('Cell Type', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nDisease\n37.449808\n25.025741\n8.194906\n191.217795\n\n\n1\nb cell\nNormal\n36.288294\n26.858117\n8.676844\n197.378220\n\n\n2\nendothelial cell of capillary\nDisease\n28.936591\n22.843498\n4.317932\n197.145756\n\n\n3\nendothelial cell of lymphatic vessel\nNormal\n90.450213\n82.516556\n6.820439\n199.965441\n\n\n4\nepithelial cell\nDisease\n47.290109\n39.116006\n7.217011\n199.626286\n\n\n5\nimmune cell\nDisease\n199.429368\n199.429368\n199.429368\n199.429368\n\n\n6\nleukocyte\nNormal\n35.224795\n27.520283\n6.271830\n198.055232\n\n\n7\nmacrophage\nDisease\n72.456390\n62.749724\n6.409083\n199.948392\n\n\n8\nmacrophage\nNormal\n43.693437\n35.902059\n5.764018\n199.800005\n\n\n9\nmast cell\nNormal\n56.037289\n45.889204\n6.549645\n199.829270\n\n\n10\nmegakaryocyte\nNormal\n35.709374\n28.120303\n6.647334\n183.441998\n\n\n11\nmixed t cell/epithelial cell population\nDisease\n35.456705\n28.416673\n7.589362\n199.630836\n\n\n12\nmuscle cell\nDisease\n50.141764\n37.800183\n5.314126\n199.976085\n\n\n13\nmuscle cell\nNormal\n74.768813\n67.226262\n7.202741\n199.967962\n\n\n14\nneutrophil\nNormal\n34.791835\n27.134180\n5.332036\n199.638840\n\n\n15\nt cell\nDisease\n49.913913\n37.638729\n5.341610\n199.924082\n\n\n16\nt cell\nNormal\n52.112910\n41.077107\n5.873783\n199.929988\n\n\n17\ntype 1 pneumocyte\nNormal\n36.197262\n26.538157\n5.164310\n199.815662\n\n\n18\ntype 2 pneumocyte\nDisease\n35.069124\n29.533140\n7.236066\n199.648377\n\n\n19\ntype 2 pneumocyte\nNormal\n40.193411\n31.636089\n4.647661\n199.955656\n\n\n20\nunknown cell\nDisease\n27.554498\n20.212155\n5.697526\n196.945710\n\n\n21\nunknown cell\nNormal\n43.607941\n34.399009\n4.467862\n199.906751\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Normal:\n                    Level Two Cell Type  mean_distance\n1  endothelial cell of lymphatic vessel      90.450213\n6                           muscle cell      74.768813\n4                             mast cell      56.037289\n8                                t cell      52.112910\n3                            macrophage      43.693437\n\nBottom 5 cell types in Normal:\n  Level Two Cell Type  mean_distance\n0              b cell      36.288294\n9   type 1 pneumocyte      36.197262\n5       megakaryocyte      35.709374\n2           leukocyte      35.224795\n7          neutrophil      34.791835\n\nTop 5 cell types in Disease:\n  Level Two Cell Type  mean_distance\n3         immune cell     199.429368\n4          macrophage      72.456390\n6         muscle cell      50.141764\n7              t cell      49.913913\n2     epithelial cell      47.290109\n\nBottom 5 cell types in Disease:\n                       Level Two Cell Type  mean_distance\n0                                   b cell      37.449808\n5  mixed t cell/epithelial cell population      35.456705\n8                        type 2 pneumocyte      35.069124\n1            endothelial cell of capillary      28.936591\n9                             unknown cell      27.554498\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Normal:\n                    Level Two Cell Type  median_distance\n1  endothelial cell of lymphatic vessel        82.516556\n6                           muscle cell        67.226262\n4                             mast cell        45.889204\n8                                t cell        41.077107\n3                            macrophage        35.902059\n\nBottom 5 cell types in Normal:\n  Level Two Cell Type  median_distance\n5       megakaryocyte        28.120303\n2           leukocyte        27.520283\n7          neutrophil        27.134180\n0              b cell        26.858117\n9   type 1 pneumocyte        26.538157\n\nTop 5 cell types in Disease:\n  Level Two Cell Type  median_distance\n3         immune cell       199.429368\n4          macrophage        62.749724\n2     epithelial cell        39.116006\n6         muscle cell        37.800183\n7              t cell        37.638729\n\nBottom 5 cell types in Disease:\n                       Level Two Cell Type  median_distance\n8                        type 2 pneumocyte        29.533140\n5  mixed t cell/epithelial cell population        28.416673\n0                                   b cell        25.025741\n1            endothelial cell of capillary        22.843498\n9                             unknown cell        20.212155\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nDisease        46.51  35.32    75.9\nNormal         45.66  34.14    74.8\n\nCell Type Variability Analysis (sorted by CV):\n                                           mean    std  CV (%)\nLevel Two Cell Type                                           \ntype 1 pneumocyte                         36.20  28.99    80.1\nb cell                                    36.89  29.26    79.3\nunknown cell                              40.03  30.98    77.4\nt cell                                    50.39  37.60    74.6\nneutrophil                                34.79  24.90    71.6\nleukocyte                                 35.22  25.04    71.1\nmegakaryocyte                             35.71  25.36    71.0\nmacrophage                                55.66  39.15    70.3\ntype 2 pneumocyte                         37.89  25.70    67.8\nmixed t cell/epithelial cell population   35.46  23.98    67.6\nendothelial cell of capillary             28.94  19.51    67.4\nmuscle cell                               61.52  41.15    66.9\nmast cell                                 56.04  36.88    65.8\nepithelial cell                           47.29  30.10    63.6\nendothelial cell of lymphatic vessel      90.45  48.80    54.0\nimmune cell                              199.43    NaN     NaN\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nDisease\n37.449808\n25.025741\n8.194906\n191.217795\n\n\n1\nb cell\nNormal\n36.288294\n26.858117\n8.676844\n197.378220\n\n\n2\nendothelial cell of capillary\nDisease\n28.936591\n22.843498\n4.317932\n197.145756\n\n\n3\nendothelial cell of lymphatic vessel\nNormal\n90.450213\n82.516556\n6.820439\n199.965441\n\n\n4\nepithelial cell\nDisease\n47.290109\n39.116006\n7.217011\n199.626286\n\n\n5\nimmune cell\nDisease\n199.429368\n199.429368\n199.429368\n199.429368\n\n\n6\nleukocyte\nNormal\n35.224795\n27.520283\n6.271830\n198.055232\n\n\n7\nmacrophage\nDisease\n72.456390\n62.749724\n6.409083\n199.948392\n\n\n8\nmacrophage\nNormal\n43.683982\n35.893711\n5.764018\n199.800005\n\n\n9\nmacrophage:interstitial\nNormal\n47.581049\n39.836315\n9.818172\n172.605327\n\n\n10\nmast cell\nNormal\n56.037289\n45.889204\n6.549645\n199.829270\n\n\n11\nmegakaryocyte\nNormal\n35.709374\n28.120303\n6.647334\n183.441998\n\n\n12\nmixed t cell/epithelial cell population\nDisease\n35.456705\n28.416673\n7.589362\n199.630836\n\n\n13\nmuscle cell:smooth\nDisease\n50.141764\n37.800183\n5.314126\n199.976085\n\n\n14\nmuscle cell:smooth\nNormal\n74.768813\n67.226262\n7.202741\n199.967962\n\n\n15\nneutrophil\nNormal\n34.791835\n27.134180\n5.332036\n199.638840\n\n\n16\npneumocyte:type 1\nNormal\n36.197262\n26.538157\n5.164310\n199.815662\n\n\n17\npneumocyte:type 2\nDisease\n35.069124\n29.533140\n7.236066\n199.648377\n\n\n18\npneumocyte:type 2\nNormal\n40.193411\n31.636089\n4.647661\n199.955656\n\n\n19\nt cell\nDisease\n52.833976\n43.817389\n7.516588\n199.586367\n\n\n20\nt cell:cd4+ alpha-beta\nDisease\n39.855009\n30.664763\n5.341610\n199.765323\n\n\n21\nt cell:cd4+ alpha-beta\nNormal\n61.190621\n50.726455\n6.368590\n199.929988\n\n\n22\nt cell:cd8+\nDisease\n72.166680\n63.643480\n7.237513\n199.924082\n\n\n23\nt cell:cd8+\nNormal\n45.077855\n35.291540\n5.873783\n199.742345\n\n\n24\nunknown cell\nDisease\n27.554498\n20.212155\n5.697526\n196.945710\n\n\n25\nunknown cell\nNormal\n43.607941\n34.399009\n4.467862\n199.906751\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Normal:\n                   Level Three Cell Type  mean_distance\n1   endothelial cell of lymphatic vessel      90.450213\n7                     muscle cell:smooth      74.768813\n11                t cell:cd4+ alpha-beta      61.190621\n5                              mast cell      56.037289\n4                macrophage:interstitial      47.581049\n\nBottom 5 cell types in Normal:\n  Level Three Cell Type  mean_distance\n0                b cell      36.288294\n9     pneumocyte:type 1      36.197262\n6         megakaryocyte      35.709374\n2             leukocyte      35.224795\n8            neutrophil      34.791835\n\nTop 5 cell types in Disease:\n   Level Three Cell Type  mean_distance\n3            immune cell     199.429368\n4             macrophage      72.456390\n10           t cell:cd8+      72.166680\n8                 t cell      52.833976\n6     muscle cell:smooth      50.141764\n\nBottom 5 cell types in Disease:\n                      Level Three Cell Type  mean_distance\n0                                    b cell      37.449808\n5   mixed t cell/epithelial cell population      35.456705\n7                        pneumocyte:type 2       35.069124\n1             endothelial cell of capillary      28.936591\n11                             unknown cell      27.554498\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Normal:\n                   Level Three Cell Type  median_distance\n1   endothelial cell of lymphatic vessel        82.516556\n7                     muscle cell:smooth        67.226262\n11                t cell:cd4+ alpha-beta        50.726455\n5                              mast cell        45.889204\n4                macrophage:interstitial        39.836315\n\nBottom 5 cell types in Normal:\n  Level Three Cell Type  median_distance\n6         megakaryocyte        28.120303\n2             leukocyte        27.520283\n8            neutrophil        27.134180\n0                b cell        26.858117\n9     pneumocyte:type 1        26.538157\n\nTop 5 cell types in Disease:\n   Level Three Cell Type  median_distance\n3            immune cell       199.429368\n10           t cell:cd8+        63.643480\n4             macrophage        62.749724\n8                 t cell        43.817389\n2        epithelial cell        39.116006\n\nBottom 5 cell types in Disease:\n                      Level Three Cell Type  median_distance\n7                        pneumocyte:type 2         29.533140\n5   mixed t cell/epithelial cell population        28.416673\n0                                    b cell        25.025741\n1             endothelial cell of capillary        22.843498\n11                             unknown cell        20.212155\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nDisease        46.51  35.32    75.9\nNormal         45.66  34.14    74.8\n\nCell Type Variability Analysis (sorted by CV):\n                                           mean    std  CV (%)\nLevel Three Cell Type                                         \npneumocyte:type 1                         36.20  28.99    80.1\nb cell                                    36.89  29.26    79.3\nunknown cell                              40.03  30.98    77.4\nt cell:cd4+ alpha-beta                    43.13  32.55    75.5\nneutrophil                                34.79  24.90    71.6\nleukocyte                                 35.22  25.04    71.1\nmegakaryocyte                             35.71  25.36    71.0\nmacrophage                                55.67  39.15    70.3\nmacrophage:interstitial                   47.58  32.59    68.5\nt cell:cd8+                               62.80  42.56    67.8\npneumocyte:type 2                         37.89  25.70    67.8\nmixed t cell/epithelial cell population   35.46  23.98    67.6\nendothelial cell of capillary             28.94  19.51    67.4\nmuscle cell:smooth                        61.52  41.15    66.9\nmast cell                                 56.04  36.88    65.8\nt cell                                    52.83  34.08    64.5\nepithelial cell                           47.29  30.10    63.6\nendothelial cell of lymphatic vessel      90.45  48.80    54.0\nimmune cell                              199.43    NaN     NaN\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.",
    "crumbs": [
      "Distance Analysis: lung-codex-urmc"
    ]
  },
  {
    "objectID": "distance_analysis__intestine-codex-stanford.html",
    "href": "distance_analysis__intestine-codex-stanford.html",
    "title": "Distance Analysis: codex-intestine-stanford",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"intestine-codex-stanford\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: codex-intestine-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__intestine-codex-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__intestine-codex-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: codex-intestine-stanford",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n1503.64128\n1278.32154\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n1\n1958.05496\n1553.46072\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n2\n2290.93940\n1187.36332\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n3\n2863.48554\n891.08862\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n4\n2563.43664\n1468.54122\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 25\nLevel Three Cell Type: 25\nLevel Two Cell Type: 17\nLevel One Cell Type: 5\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell of lymphatic vessel\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell of lymphatic vessel\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: codex-intestine-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__intestine-codex-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__intestine-codex-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: codex-intestine-stanford",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# List of regions (based on filenames) in small intestine (si) and large intestine (li).\nsi = ['Duodenum', 'Ileum', 'Mid', 'ProximalJejunum', 'Midjejunum', 'Proximaljejunum']\nli = ['Ascending', 'Descending', 'Transverse', 'Left', 'Right', 'Sigmoid', 'Trans']\n\n# Create a dictionary to map si and li regions to correct region names.\nregion_map = {\n    'Duodenum': 'Duodenum',\n    'Ileum': 'Ileum',\n    'Mid': 'Mid Jejunum',\n    'ProximalJejunum': 'Proximal Jejunum',\n    'Midjejunum': 'Mid Jejunum',\n    'Proximaljejunum': 'Proximal Jejunum',\n    'Ascending': 'Ascending',\n    'Descending': 'Descending',\n    'Transverse': 'Transverse',\n    'Left': 'Descending',\n    'Right': 'Ascending',\n    'Sigmoid': 'Sigmoid',\n    'Trans': 'Transverse'\n}\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n1503.64128\n1278.32154\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n1\n1958.05496\n1553.46072\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n2\n2290.93940\n1187.36332\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n3\n2863.48554\n891.08862\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n4\n2563.43664\n1468.54122\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new columns \"Donor\" and \"Unique Region\" based on the \"Dataset\" column.\n# The \"Donor\" column is created by extracting the donor name from the \"Dataset\" column, for example B004 from B004_Duodenum.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Donor'] = df_all_nodes['Dataset'].str.split('_').str[0]\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('_').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Donor', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nDonor\nUnique Region\n\n\n\n\n0\nB004_Ascending\nB004\nAscending\n\n\n1\nB004_Ascending\nB004\nAscending\n\n\n2\nB004_Ascending\nB004\nAscending\n\n\n3\nB004_Ascending\nB004\nAscending\n\n\n4\nB004_Ascending\nB004\nAscending\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create a new column \"Tissue Subtype\" based on Dataset column value after \"_\".\ndf_all_nodes['Tissue Subtype'] = df_all_nodes['Dataset'].str.split('_').str[1].apply(lambda x: 'Small Intestine' if x in si else ('Large Intestine' if x in li else 'Unknown'))\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print all unique donors in the data.\nprint(\"\\nUnique Donors in the data:\")\nprint(df_all_nodes['Donor'].unique())\n\n# Print unique values in Tissue Subtype.\nprint(\"\\nUnique Tissue Subtypes in the data:\")\nprint(df_all_nodes['Tissue Subtype'].unique())\n\n# Print number of donors in small intestine and large intestine.\nprint(\"\\nNumber of donors in Small Intestine:\")\nprint(df_all_nodes[df_all_nodes['Tissue Subtype'] == 'Small Intestine']['Donor'].nunique())\nprint(\"\\nNumber of donors in Large Intestine:\")\nprint(df_all_nodes[df_all_nodes['Tissue Subtype'] == 'Large Intestine']['Donor'].nunique())\n\n# Print the total number of unique donors and unique regions.\nprint(f\"\\nTotal number of unique donors: {df_all_nodes['Donor'].nunique()}\")\nprint(f\"\\nTotal number of unique donors: {df_all_nodes['Donor'].nunique()}\")\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per small intestine and large intestine.\nprint(f\"\\nTotal number of unique datasets in Small Intestine: {df_all_nodes[df_all_nodes['Tissue Subtype'] == 'Small Intestine']['Dataset'].nunique()}\")\nprint(f\"Total number of unique datasets in Large Intestine: {df_all_nodes[df_all_nodes['Tissue Subtype'] == 'Large Intestine']['Dataset'].nunique()}\")\n\n\nUnique Regions in the data:\n['Ascending' 'Descending' 'Duodenum' 'Ileum' 'Mid Jejunum'\n 'Proximal Jejunum' 'Transverse' 'Sigmoid']\n\nUnique Donors in the data:\n['B004' 'B005' 'B006' 'B009' 'B010' 'B011' 'B012' 'B008']\n\nUnique Tissue Subtypes in the data:\n['Large Intestine' 'Small Intestine']\n\nNumber of donors in Small Intestine:\n8\n\nNumber of donors in Large Intestine:\n8\n\nTotal number of unique donors: 8\n\nTotal number of unique donors: 8\nTotal number of unique regions: 8\n\nTotal number of unique datasets in Small Intestine: 32\nTotal number of unique datasets in Large Intestine: 32",
    "crumbs": [
      "Distance Analysis: codex-intestine-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__intestine-codex-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__intestine-codex-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: codex-intestine-stanford",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n1503.64128\n1278.32154\n0\n1541.00586\n1229.63436\n0\n61.372252\nB004_Ascending\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n\n\n1\n726\n1428.15728\n1210.38594\n0\n1404.75724\n1149.62132\n0\n65.114522\nB004_Ascending\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n\n\n2\n727\n1428.15728\n1216.80208\n0\n1404.75724\n1149.62132\n0\n71.139415\nB004_Ascending\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n\n\n3\n729\n1433.06374\n1202.83754\n0\n1404.75724\n1149.62132\n0\n60.276231\nB004_Ascending\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n\n\n4\n730\n1437.21536\n1248.50536\n0\n1404.75724\n1149.62132\n0\n104.074891\nB004_Ascending\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Donor\", \"Unique Region\" and Tissue Subtype based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Donor'] = df_all_edges['Dataset'].str.split('_').str[0]\ndf_all_edges['Unique Region'] = df_all_edges['Dataset'].str.split('_').str[1].map(region_map)\ndf_all_edges['Tissue Subtype'] = df_all_edges['Dataset'].str.split('_').str[1].apply(lambda x: 'Small Intestine' if x in si else ('Large Intestine' if x in li else 'Unknown'))\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Donor', 'Unique Region', 'Tissue Subtype']].head(5)\n\n\n\n\n\n\n\n\nDataset\nDonor\nUnique Region\nTissue Subtype\n\n\n\n\n0\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n1\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n2\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n3\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n4\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print all unique donors in the data.\nprint(\"\\nUnique Donors in the data:\")\nprint(df_all_edges['Donor'].unique())\n\n# Print unique values in Tissue Subtype.\nprint(\"\\nUnique Tissue Subtypes in the data:\")\nprint(df_all_edges['Tissue Subtype'].unique())\n\n# Print number of donors in small intestine and large intestine.\nprint(\"\\nNumber of donors in Small Intestine:\")\nprint(df_all_edges[df_all_edges['Tissue Subtype'] == 'Small Intestine']['Donor'].nunique())\nprint(\"\\nNumber of donors in Large Intestine:\")\nprint(df_all_edges[df_all_edges['Tissue Subtype'] == 'Large Intestine']['Donor'].nunique())\n\n# Print the total number of unique donors and unique regions.\nprint(f\"\\nTotal number of unique donors: {df_all_edges['Donor'].nunique()}\")\nprint(f\"\\nTotal number of unique donors: {df_all_edges['Donor'].nunique()}\")\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per small intestine and large intestine.\nprint(f\"\\nTotal number of unique datasets in Small Intestine: {df_all_edges[df_all_edges['Tissue Subtype'] == 'Small Intestine']['Dataset'].nunique()}\")\nprint(f\"Total number of unique datasets in Large Intestine: {df_all_edges[df_all_edges['Tissue Subtype'] == 'Large Intestine']['Dataset'].nunique()}\")\n\n\nUnique Regions in the data:\n['Ascending' 'Descending' 'Duodenum' 'Ileum' 'Mid Jejunum'\n 'Proximal Jejunum' 'Transverse' 'Sigmoid']\n\nUnique Donors in the data:\n['B004' 'B005' 'B006' 'B009' 'B010' 'B011' 'B012' 'B008']\n\nUnique Tissue Subtypes in the data:\n['Large Intestine' 'Small Intestine']\n\nNumber of donors in Small Intestine:\n8\n\nNumber of donors in Large Intestine:\n8\n\nTotal number of unique donors: 8\n\nTotal number of unique donors: 8\nTotal number of unique regions: 8\n\nTotal number of unique datasets in Small Intestine: 32\nTotal number of unique datasets in Large Intestine: 32\n\n\n\ndf_all_edges_with_cell_types['Donor'] = df_all_edges_with_cell_types['Dataset'].str.split('_').str[0]\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].str.split('_').str[1].map(region_map)\ndf_all_edges_with_cell_types['Tissue Subtype'] = df_all_edges_with_cell_types['Dataset'].str.split('_').str[1].apply(lambda x: 'Small Intestine' if x in si else ('Large Intestine' if x in li else 'Unknown'))\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Donor', 'Unique Region', 'Tissue Subtype']].head(5)\n\n\n\n\n\n\n\n\nDataset\nDonor\nUnique Region\nTissue Subtype\n\n\n\n\n0\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n1\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n2\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n3\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n4\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nDonor\nUnique Region\nTissue Subtype\n\n\n\n\n0\n1503.64128\n1278.32154\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nB004_Ascending\nB004\nAscending\nLarge Intestine\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nDonor\nUnique Region\nTissue Subtype\n\n\n\n\n0\n0\n1503.64128\n1278.32154\n0\n1541.00586\n1229.63436\n0\n61.372252\nB004_Ascending\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\nB004\nAscending\nLarge Intestine\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nDonor\nUnique Region\nTissue Subtype\n\n\n\n\n0\n0\n1503.64128\n1278.32154\n0\n1541.00586\n1229.63436\n0\n61.372252\nB004_Ascending\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\nnatural killer cell\nnatural killer cell\nimmune cell\nB004\nAscending\nLarge Intestine",
    "crumbs": [
      "Distance Analysis: codex-intestine-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__intestine-codex-stanford.html#node-analysis",
    "href": "distance_analysis__intestine-codex-stanford.html#node-analysis",
    "title": "Distance Analysis: codex-intestine-stanford",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in large intestine in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, intestine_type, output_dir):\n    plt.figure(figsize=(14, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df[df['Tissue Subtype'] == intestine_type], x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in {intestine_type}')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}_{intestine_type}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}_{intestine_type}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, 'Large Intestine', os.path.join(basepath, figures_output_dir))\n# Plot number of cells per cell type in small intestine in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, 'Small Intestine', os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: codex-intestine-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__intestine-codex-stanford.html#distance-analysis",
    "href": "distance_analysis__intestine-codex-stanford.html#distance-analysis",
    "title": "Distance Analysis: codex-intestine-stanford",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region in each tissue subtype per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Tissue Subtype', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nTissue Subtype\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nAscending\nLarge Intestine\nendothelial cell\nLevel One Cell Type\n32.465985\n23.412212\n0.377420\n199.984527\n\n\n1\nAscending\nLarge Intestine\nendothelial cell\nLevel Three Cell Type\n41.197999\n31.965045\n0.533752\n199.984527\n\n\n2\nAscending\nLarge Intestine\nendothelial cell\nLevel Two Cell Type\n41.197999\n31.965045\n0.533752\n199.984527\n\n\n3\nAscending\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n48.645392\n36.122071\n0.377420\n199.984527\n\n\n4\nAscending\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n48.645392\n36.122071\n0.377420\n199.984527\n\n\n5\nDescending\nLarge Intestine\nendothelial cell\nLevel One Cell Type\n33.751636\n24.981099\n0.000000\n199.998416\n\n\n6\nDescending\nLarge Intestine\nendothelial cell\nLevel Three Cell Type\n40.669880\n31.271246\n0.000000\n199.998416\n\n\n7\nDescending\nLarge Intestine\nendothelial cell\nLevel Two Cell Type\n40.669880\n31.271246\n0.000000\n199.998416\n\n\n8\nDescending\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n55.376327\n44.605871\n0.377420\n199.985951\n\n\n9\nDescending\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n55.376327\n44.605871\n0.377420\n199.985951\n\n\n10\nDuodenum\nSmall Intestine\nendothelial cell\nLevel One Cell Type\n32.457991\n22.898541\n0.533752\n199.954608\n\n\n11\nDuodenum\nSmall Intestine\nendothelial cell\nLevel Three Cell Type\n36.243342\n26.615470\n0.533752\n199.987020\n\n\n12\nDuodenum\nSmall Intestine\nendothelial cell\nLevel Two Cell Type\n36.243342\n26.615470\n0.533752\n199.987020\n\n\n13\nDuodenum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n57.516441\n45.767525\n0.843937\n199.997703\n\n\n14\nDuodenum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n57.516441\n45.767525\n0.843937\n199.997703\n\n\n15\nIleum\nSmall Intestine\nendothelial cell\nLevel One Cell Type\n32.578045\n22.318897\n0.000000\n199.975979\n\n\n16\nIleum\nSmall Intestine\nendothelial cell\nLevel Three Cell Type\n37.434302\n27.216143\n0.000000\n199.977404\n\n\n17\nIleum\nSmall Intestine\nendothelial cell\nLevel Two Cell Type\n37.434302\n27.216143\n0.000000\n199.977404\n\n\n18\nIleum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n51.209250\n39.180850\n0.000000\n199.977404\n\n\n19\nIleum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n51.209250\n39.180850\n0.000000\n199.977404\n\n\n20\nMid Jejunum\nSmall Intestine\nendothelial cell\nLevel One Cell Type\n37.485418\n24.636595\n0.000000\n199.994498\n\n\n21\nMid Jejunum\nSmall Intestine\nendothelial cell\nLevel Three Cell Type\n41.185966\n29.137215\n0.000000\n199.987020\n\n\n22\nMid Jejunum\nSmall Intestine\nendothelial cell\nLevel Two Cell Type\n41.185966\n29.137215\n0.000000\n199.987020\n\n\n23\nMid Jejunum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n55.117326\n41.727532\n0.000000\n199.997703\n\n\n24\nMid Jejunum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n55.117326\n41.727532\n0.000000\n199.997703\n\n\n25\nProximal Jejunum\nSmall Intestine\nendothelial cell\nLevel One Cell Type\n36.900594\n24.532300\n0.000000\n199.983458\n\n\n26\nProximal Jejunum\nSmall Intestine\nendothelial cell\nLevel Three Cell Type\n41.262498\n29.392756\n0.000000\n199.974554\n\n\n27\nProximal Jejunum\nSmall Intestine\nendothelial cell\nLevel Two Cell Type\n41.262498\n29.392756\n0.000000\n199.974554\n\n\n28\nProximal Jejunum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n56.616775\n42.250816\n0.533752\n199.987020\n\n\n29\nProximal Jejunum\nSmall Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n56.616775\n42.250816\n0.533752\n199.987020\n\n\n30\nSigmoid\nLarge Intestine\nendothelial cell\nLevel One Cell Type\n37.371448\n28.286364\n1.687874\n199.975979\n\n\n31\nSigmoid\nLarge Intestine\nendothelial cell\nLevel Three Cell Type\n48.924570\n38.727412\n1.687874\n199.984527\n\n\n32\nSigmoid\nLarge Intestine\nendothelial cell\nLevel Two Cell Type\n48.924570\n38.727412\n1.687874\n199.984527\n\n\n33\nSigmoid\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n59.624433\n45.405053\n2.416667\n199.984527\n\n\n34\nSigmoid\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n59.624433\n45.405053\n2.416667\n199.984527\n\n\n35\nTransverse\nLarge Intestine\nendothelial cell\nLevel One Cell Type\n34.822264\n25.800184\n0.377420\n199.977404\n\n\n36\nTransverse\nLarge Intestine\nendothelial cell\nLevel Three Cell Type\n44.694353\n35.455390\n0.843937\n199.977404\n\n\n37\nTransverse\nLarge Intestine\nendothelial cell\nLevel Two Cell Type\n44.694353\n35.455390\n0.843937\n199.977404\n\n\n38\nTransverse\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Three Cell Type\n53.638178\n39.751124\n0.377420\n199.997703\n\n\n39\nTransverse\nLarge Intestine\nendothelial cell of lymphatic vessel\nLevel Two Cell Type\n53.638178\n39.751124\n0.377420\n199.997703\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all tissue subtypes.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Tissue Subtype']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nTissue Subtype\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nLarge Intestine\n32.875946\n26.085702\n0.377420\n199.984527\n\n\n1\nepithelial cell\nSmall Intestine\n43.213764\n29.083389\n0.000000\n199.994498\n\n\n2\nimmune cell\nLarge Intestine\n25.267128\n18.151509\n0.000000\n199.947128\n\n\n3\nimmune cell\nSmall Intestine\n26.838213\n17.229543\n0.000000\n199.987020\n\n\n4\nmesenchymal cell\nLarge Intestine\n42.273309\n32.458120\n0.000000\n199.998416\n\n\n5\nmesenchymal cell\nSmall Intestine\n32.811427\n24.166671\n0.000000\n199.793187\n\n\n6\nneural cell\nLarge Intestine\n37.306252\n28.396936\n0.377420\n198.398031\n\n\n7\nneural cell\nSmall Intestine\n27.669692\n20.812925\n0.533752\n198.517180\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in small intestine and large intestine separately.\ndef get_top_bottom_cell_types(df, cell_type_level, tissue_subtype, top_n=5):\n    # Filter the DataFrame for the specified tissue subtype and cell type level\n    df_filtered = df[df['Tissue Subtype'] == tissue_subtype]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n# Get top and bottom cell types for small intestine\ntop_bottom_si = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Small Intestine')\nprint(\"\\nTop 5 cell types in Small Intestine:\")\nprint(top_bottom_si[0])\nprint(\"\\nBottom 5 cell types in Small Intestine:\")\nprint(top_bottom_si[1])\n# Get top and bottom cell types for large intestine\ntop_bottom_li = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Large Intestine')\nprint(\"\\nTop 5 cell types in Large Intestine:\")\nprint(top_bottom_li[0])\nprint(\"\\nBottom 5 cell types in Large Intestine:\")\nprint(top_bottom_li[1])\n\n\nTop 5 cell types in Small Intestine:\n  Level One Cell Type  mean_distance\n0     epithelial cell      43.213764\n2    mesenchymal cell      32.811427\n3         neural cell      27.669692\n1         immune cell      26.838213\n\nBottom 5 cell types in Small Intestine:\n  Level One Cell Type  mean_distance\n0     epithelial cell      43.213764\n2    mesenchymal cell      32.811427\n3         neural cell      27.669692\n1         immune cell      26.838213\n\nTop 5 cell types in Large Intestine:\n  Level One Cell Type  mean_distance\n2    mesenchymal cell      42.273309\n3         neural cell      37.306252\n0     epithelial cell      32.875946\n1         immune cell      25.267128\n\nBottom 5 cell types in Large Intestine:\n  Level One Cell Type  mean_distance\n2    mesenchymal cell      42.273309\n3         neural cell      37.306252\n0     epithelial cell      32.875946\n1         immune cell      25.267128\n\n\n\n# Get top five and bottom five cell types with respect to median distance in small intestine and large intestine separately.\ndef get_top_bottom_cell_types(df, cell_type_level, tissue_subtype, top_n=5):\n    # Filter the DataFrame for the specified tissue subtype and cell type level\n    df_filtered = df[df['Tissue Subtype'] == tissue_subtype]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n# Get top and bottom cell types for small intestine\ntop_bottom_si = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Small Intestine')\nprint(\"\\nTop 5 cell types in Small Intestine:\")\nprint(top_bottom_si[0])\nprint(\"\\nBottom 5 cell types in Small Intestine:\")\nprint(top_bottom_si[1])\n# Get top and bottom cell types for large intestine\ntop_bottom_li = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Large Intestine')\nprint(\"\\nTop 5 cell types in Large Intestine:\")\nprint(top_bottom_li[0])\nprint(\"\\nBottom 5 cell types in Large Intestine:\")\nprint(top_bottom_li[1])\n\n\nTop 5 cell types in Small Intestine:\n  Level One Cell Type  median_distance\n0     epithelial cell        29.083389\n2    mesenchymal cell        24.166671\n3         neural cell        20.812925\n1         immune cell        17.229543\n\nBottom 5 cell types in Small Intestine:\n  Level One Cell Type  median_distance\n0     epithelial cell        29.083389\n2    mesenchymal cell        24.166671\n3         neural cell        20.812925\n1         immune cell        17.229543\n\nTop 5 cell types in Large Intestine:\n  Level One Cell Type  median_distance\n2    mesenchymal cell        32.458120\n3         neural cell        28.396936\n0     epithelial cell        26.085702\n1         immune cell        18.151509\n\nBottom 5 cell types in Large Intestine:\n  Level One Cell Type  median_distance\n2    mesenchymal cell        32.458120\n3         neural cell        28.396936\n0     epithelial cell        26.085702\n1         immune cell        18.151509\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                   mean    std  CV (%)\nUnique Region                         \nAscending         32.47  29.00    89.3\nDescending        33.75  28.99    85.9\nDuodenum          32.46  31.37    96.6\nIleum             32.58  32.14    98.6\nMid Jejunum       37.49  37.58   100.2\nProximal Jejunum  36.90  35.99    97.5\nSigmoid           37.37  29.56    79.1\nTransverse        34.82  29.29    84.1\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nimmune cell          26.29  27.85   105.9\nepithelial cell      39.19  35.37    90.3\nmesenchymal cell     37.66  31.52    83.7\nneural cell          32.18  26.83    83.4\n\n\n\n# Define the standard region sequence for plots\nregions = ['Duodenum', 'Proximal Jejunum', 'Mid Jejunum', 'Ileum', 'Ascending', 'Transverse', 'Descending', 'Sigmoid']\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype_small_vs_large_intestine(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    plt.figure(figsize=(10, 5))\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", hue=\"Tissue Subtype\", density_norm=\"area\", common_norm=True, cut=0, inner=\"box\", split=True, palette='Spectral', alpha=.9, hue_order=['Small Intestine', 'Large Intestine'])\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.xlabel('Cell Type', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype__small_vs_large_intestine_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype__small_vs_large_intestine_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype_small_vs_large_intestine(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(20, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    plt.xticks(rotation=90, ha='right')\n    plt.title(f'Distribution of distances by {cell_type_level} and region')\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 15))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title('Heatmap of median distances')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    fig, axs = plt.subplots(4, 2, figsize=(15, 18))\n    fig.suptitle(f'Distance distribution per {cell_type_level} in small and large intestine (density normalization = {density_norm})', fontsize=18)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i//2, i%2], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i//2, i%2].set_title(region)\n        axs[i//2, i%2].set_xlabel('Cell Type', fontsize=13)\n        axs[i//2, i%2].set_ylabel('Distance (\\u03bcm)', fontsize=13)\n        axs[i//2, i%2].tick_params(axis='x', labelrotation=90, labelsize=8)\n        axs[i//2, i%2].tick_params(axis='both', labelsize=8)\n        axs[i//2, i%2].set_ylim(0, 200)\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\"\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all tissue subtypes.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Tissue Subtype']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nTissue Subtype\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nLarge Intestine\n27.053305\n21.526179\n0.843937\n197.546834\n\n\n1\nb cell\nSmall Intestine\n21.818137\n17.894644\n0.000000\n191.707070\n\n\n2\ndendritic cell\nLarge Intestine\n28.327602\n21.410062\n0.843937\n198.968722\n\n\n3\ndendritic cell\nSmall Intestine\n22.322890\n16.056992\n0.377420\n198.825486\n\n\n4\nendocrine cell\nLarge Intestine\n36.294670\n31.225661\n1.601257\n199.648045\n\n\n5\nendocrine cell\nSmall Intestine\n40.786922\n31.225661\n1.193507\n199.569903\n\n\n6\nendothelial cell of lymphatic vessel\nLarge Intestine\n37.245417\n27.113891\n0.377420\n199.705116\n\n\n7\nendothelial cell of lymphatic vessel\nSmall Intestine\n26.096485\n17.802866\n0.377420\n199.313497\n\n\n8\nenterocyte\nLarge Intestine\n41.954515\n34.853669\n0.377420\n199.984527\n\n\n9\nenterocyte\nSmall Intestine\n49.309524\n34.872056\n0.000000\n199.987020\n\n\n10\ngoblet cell\nLarge Intestine\n39.134738\n33.146416\n0.377420\n199.371021\n\n\n11\ngoblet cell\nSmall Intestine\n42.001191\n32.346017\n0.000000\n199.977404\n\n\n12\nlymphoid cell\nLarge Intestine\n40.153142\n32.768230\n2.387014\n189.225983\n\n\n13\nlymphoid cell\nSmall Intestine\n63.133067\n43.305553\n0.000000\n199.951759\n\n\n14\nmacrophage\nLarge Intestine\n41.718298\n27.551660\n0.533752\n199.895115\n\n\n15\nmacrophage\nSmall Intestine\n28.724084\n18.041308\n0.533752\n199.984527\n\n\n16\nmuscle cell\nLarge Intestine\n53.677561\n45.674058\n0.000000\n199.998416\n\n\n17\nmuscle cell\nSmall Intestine\n35.881348\n28.706259\n0.000000\n199.772153\n\n\n18\nnatural killer cell\nLarge Intestine\n29.557145\n22.920304\n3.042857\n193.128436\n\n\n19\nnatural killer cell\nSmall Intestine\n36.501047\n22.686050\n0.000000\n199.987020\n\n\n20\nneurecto-epithelial cell\nLarge Intestine\n37.836789\n26.159318\n0.377420\n199.877655\n\n\n21\nneurecto-epithelial cell\nSmall Intestine\n27.136101\n18.871000\n0.843937\n199.829545\n\n\n22\nneuron\nLarge Intestine\n48.971272\n39.629100\n0.377420\n199.878012\n\n\n23\nneuron\nSmall Intestine\n34.567294\n27.058671\n0.533752\n197.159960\n\n\n24\nneutrophil\nLarge Intestine\n40.546310\n24.832400\n0.533752\n199.580610\n\n\n25\nneutrophil\nSmall Intestine\n32.473085\n18.431857\n0.377420\n199.860551\n\n\n26\npaneth cell\nLarge Intestine\n138.624783\n154.596150\n12.821175\n199.554914\n\n\n27\npaneth cell\nSmall Intestine\n32.606219\n29.450854\n0.533752\n199.977404\n\n\n28\nstromal cell\nLarge Intestine\n53.780477\n41.228708\n0.533752\n199.984527\n\n\n29\nstromal cell\nSmall Intestine\n45.676768\n33.698344\n0.000000\n199.900103\n\n\n30\nt cell\nLarge Intestine\n29.954248\n23.765475\n0.000000\n199.947128\n\n\n31\nt cell\nSmall Intestine\n34.966318\n23.636257\n0.000000\n199.984527\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in small intestine and large intestine separately.\ndef get_top_bottom_cell_types(df, cell_type_level, tissue_subtype, top_n=5):\n    # Filter the DataFrame for the specified tissue subtype and cell type level\n    df_filtered = df[df['Tissue Subtype'] == tissue_subtype]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n# Get top and bottom cell types for small intestine\ntop_bottom_si = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Small Intestine')\nprint(\"\\nTop 5 cell types in Small Intestine:\")\nprint(top_bottom_si[0])\nprint(\"\\nBottom 5 cell types in Small Intestine:\")\nprint(top_bottom_si[1])\n# Get top and bottom cell types for large intestine\ntop_bottom_li = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Large Intestine')\nprint(\"\\nTop 5 cell types in Large Intestine:\")\nprint(top_bottom_li[0])\nprint(\"\\nBottom 5 cell types in Large Intestine:\")\nprint(top_bottom_li[1])\n\n\nTop 5 cell types in Small Intestine:\n   Level Two Cell Type  mean_distance\n6        lymphoid cell      63.133067\n4           enterocyte      49.309524\n14        stromal cell      45.676768\n5          goblet cell      42.001191\n2       endocrine cell      40.786922\n\nBottom 5 cell types in Small Intestine:\n                     Level Two Cell Type  mean_distance\n7                             macrophage      28.724084\n10              neurecto-epithelial cell      27.136101\n3   endothelial cell of lymphatic vessel      26.096485\n1                         dendritic cell      22.322890\n0                                 b cell      21.818137\n\nTop 5 cell types in Large Intestine:\n   Level Two Cell Type  mean_distance\n13         paneth cell     138.624783\n14        stromal cell      53.780477\n8          muscle cell      53.677561\n11              neuron      48.971272\n4           enterocyte      41.954515\n\nBottom 5 cell types in Large Intestine:\n    Level Two Cell Type  mean_distance\n2        endocrine cell      36.294670\n15               t cell      29.954248\n9   natural killer cell      29.557145\n1        dendritic cell      28.327602\n0                b cell      27.053305\n\n\n\n# Get top five and bottom five cell types with respect to median distance in small intestine and large intestine separately.\ndef get_top_bottom_cell_types(df, cell_type_level, tissue_subtype, top_n=5):\n    # Filter the DataFrame for the specified tissue subtype and cell type level\n    df_filtered = df[df['Tissue Subtype'] == tissue_subtype]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n# Get top and bottom cell types for small intestine\ntop_bottom_si = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Small Intestine')\nprint(\"\\nTop 5 cell types in Small Intestine:\")\nprint(top_bottom_si[0])\nprint(\"\\nBottom 5 cell types in Small Intestine:\")\nprint(top_bottom_si[1])\n# Get top and bottom cell types for large intestine\ntop_bottom_li = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Large Intestine')\nprint(\"\\nTop 5 cell types in Large Intestine:\")\nprint(top_bottom_li[0])\nprint(\"\\nBottom 5 cell types in Large Intestine:\")\nprint(top_bottom_li[1])\n\n\nTop 5 cell types in Small Intestine:\n   Level Two Cell Type  median_distance\n6        lymphoid cell        43.305553\n4           enterocyte        34.872056\n14        stromal cell        33.698344\n5          goblet cell        32.346017\n2       endocrine cell        31.225661\n\nBottom 5 cell types in Small Intestine:\n                     Level Two Cell Type  median_distance\n12                            neutrophil        18.431857\n7                             macrophage        18.041308\n0                                 b cell        17.894644\n3   endothelial cell of lymphatic vessel        17.802866\n1                         dendritic cell        16.056992\n\nTop 5 cell types in Large Intestine:\n   Level Two Cell Type  median_distance\n13         paneth cell       154.596150\n8          muscle cell        45.674058\n14        stromal cell        41.228708\n11              neuron        39.629100\n4           enterocyte        34.853669\n\nBottom 5 cell types in Large Intestine:\n    Level Two Cell Type  median_distance\n12           neutrophil        24.832400\n15               t cell        23.765475\n9   natural killer cell        22.920304\n0                b cell        21.526179\n1        dendritic cell        21.410062\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                   mean    std  CV (%)\nUnique Region                         \nAscending         41.20  32.11    77.9\nDescending        40.67  32.26    79.3\nDuodenum          36.24  32.45    89.5\nIleum             37.43  33.54    89.6\nMid Jejunum       41.19  37.64    91.4\nProximal Jejunum  41.26  36.84    89.3\nSigmoid           48.92  35.83    73.2\nTransverse        44.69  33.58    75.1\n\nCell Type Variability Analysis (sorted by CV):\n                                       mean    std  CV (%)\nLevel Two Cell Type                                       \nneutrophil                            35.60  38.33   107.7\nnatural killer cell                   33.64  33.72   100.2\nmacrophage                            34.30  34.07    99.3\nt cell                                33.65  32.40    96.3\nneurecto-epithelial cell              31.59  29.57    93.6\nendothelial cell of lymphatic vessel  30.87  28.45    92.2\ndendritic cell                        25.43  22.42    88.2\nlymphoid cell                         57.05  47.42    83.1\nstromal cell                          49.58  40.53    81.7\nenterocyte                            46.48  36.86    79.3\nneuron                                41.30  32.40    78.5\nendocrine cell                        39.37  30.36    77.1\nmuscle cell                           45.43  34.12    75.1\ngoblet cell                           40.65  29.59    72.8\nb cell                                23.99  17.20    71.7\npaneth cell                           34.14  22.89    67.0\n\n\n\nplot_violin_cells_per_celltype_small_vs_large_intestine(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\"\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all tissue subtypes.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Tissue Subtype']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nTissue Subtype\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nLarge Intestine\n29.018398\n22.347599\n1.193507\n195.356325\n\n\n1\nb cell\nSmall Intestine\n27.518600\n22.960665\n0.377420\n156.771564\n\n\n2\ndendritic cell\nLarge Intestine\n28.327602\n21.410062\n0.843937\n198.968722\n\n\n3\ndendritic cell\nSmall Intestine\n22.322890\n16.056992\n0.377420\n198.825486\n\n\n4\nendothelial cell of lymphatic vessel\nLarge Intestine\n37.245417\n27.113891\n0.377420\n199.705116\n\n\n5\nendothelial cell of lymphatic vessel\nSmall Intestine\n26.096485\n17.802866\n0.377420\n199.313497\n\n\n6\nenterocyte\nLarge Intestine\n39.822866\n33.086197\n0.377420\n199.984527\n\n\n7\nenterocyte\nSmall Intestine\n50.623921\n35.085853\n0.000000\n199.977404\n\n\n8\nenterocyte:cd57+\nLarge Intestine\n33.451914\n30.388738\n2.641940\n156.161145\n\n\n9\nenterocyte:cd57+\nSmall Intestine\n31.409334\n25.782228\n3.717156\n199.954608\n\n\n10\nenterocyte:cd66+\nLarge Intestine\n54.150643\n44.593095\n1.193507\n199.899034\n\n\n11\nenterocyte:cd66+\nSmall Intestine\n77.146245\n62.703991\n0.533752\n199.878724\n\n\n12\nenterocyte:muc1+\nLarge Intestine\n45.036560\n40.120296\n1.360807\n198.518974\n\n\n13\nenterocyte:muc1+\nSmall Intestine\n32.640887\n29.031916\n1.132260\n198.929343\n\n\n14\ngoblet cell\nLarge Intestine\n39.134738\n33.146416\n0.377420\n199.371021\n\n\n15\ngoblet cell\nSmall Intestine\n42.001191\n32.346017\n0.000000\n199.977404\n\n\n16\ninterstitial cell of cajal\nLarge Intestine\n37.836789\n26.159318\n0.377420\n199.877655\n\n\n17\ninterstitial cell of cajal\nSmall Intestine\n27.136101\n18.871000\n0.843937\n199.829545\n\n\n18\nlymphocyte:cd7+\nLarge Intestine\n40.153142\n32.768230\n2.387014\n189.225983\n\n\n19\nlymphocyte:cd7+\nSmall Intestine\n63.133067\n43.305553\n0.000000\n199.951759\n\n\n20\nmacrophage\nLarge Intestine\n44.336284\n29.528141\n0.533752\n199.895115\n\n\n21\nmacrophage\nSmall Intestine\n30.807581\n19.614950\n0.843937\n199.984527\n\n\n22\nmacrophage:inflammatory\nLarge Intestine\n27.235706\n20.935756\n1.360807\n193.407037\n\n\n23\nmacrophage:inflammatory\nSmall Intestine\n18.758805\n12.986758\n0.533752\n199.290626\n\n\n24\nmuscle cell:smooth\nLarge Intestine\n53.677561\n45.674058\n0.000000\n199.998416\n\n\n25\nmuscle cell:smooth\nSmall Intestine\n35.881348\n28.706259\n0.000000\n199.772153\n\n\n26\nnatural killer cell\nLarge Intestine\n29.557145\n22.920304\n3.042857\n193.128436\n\n\n27\nnatural killer cell\nSmall Intestine\n36.501047\n22.686050\n0.000000\n199.987020\n\n\n28\nneuroendocrine cell\nLarge Intestine\n36.294670\n31.225661\n1.601257\n199.648045\n\n\n29\nneuroendocrine cell\nSmall Intestine\n40.786922\n31.225661\n1.193507\n199.569903\n\n\n30\nneuron\nLarge Intestine\n48.971272\n39.629100\n0.377420\n199.878012\n\n\n31\nneuron\nSmall Intestine\n34.567294\n27.058671\n0.533752\n197.159960\n\n\n32\nneutrophil\nLarge Intestine\n40.546310\n24.832400\n0.533752\n199.580610\n\n\n33\nneutrophil\nSmall Intestine\n32.473085\n18.431857\n0.377420\n199.860551\n\n\n34\npaneth cell\nLarge Intestine\n138.624783\n154.596150\n12.821175\n199.554914\n\n\n35\npaneth cell\nSmall Intestine\n32.606219\n29.450854\n0.533752\n199.977404\n\n\n36\nplasma cell\nLarge Intestine\n26.523197\n21.330074\n0.843937\n197.546834\n\n\n37\nplasma cell\nSmall Intestine\n20.214029\n16.849172\n0.000000\n191.707070\n\n\n38\nstromal cell\nLarge Intestine\n53.780477\n41.228708\n0.533752\n199.984527\n\n\n39\nstromal cell\nSmall Intestine\n45.676768\n33.698344\n0.000000\n199.900103\n\n\n40\nt cell:cd4+\nLarge Intestine\n27.552400\n21.516250\n0.000000\n199.626640\n\n\n41\nt cell:cd4+\nSmall Intestine\n23.445133\n17.802866\n0.377420\n199.681220\n\n\n42\nt cell:cd8+ alpha-beta\nLarge Intestine\n32.725200\n26.289680\n1.193507\n199.947128\n\n\n43\nt cell:cd8+ alpha-beta\nSmall Intestine\n40.672900\n27.197819\n0.000000\n199.984527\n\n\n44\ntransit amplifying cell\nLarge Intestine\n40.889106\n34.347294\n0.754840\n199.984527\n\n\n45\ntransit amplifying cell\nSmall Intestine\n47.585919\n35.930304\n0.377420\n199.987020\n\n\n46\ntransit amplifying cell:proliferating\nLarge Intestine\n38.313899\n33.266528\n1.132260\n199.946060\n\n\n47\ntransit amplifying cell:proliferating\nSmall Intestine\n39.587575\n32.425189\n0.843937\n199.793187\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in small intestine and large intestine separately.\ndef get_top_bottom_cell_types(df, cell_type_level, tissue_subtype, top_n=5):\n    # Filter the DataFrame for the specified tissue subtype and cell type level\n    df_filtered = df[df['Tissue Subtype'] == tissue_subtype]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n# Get top and bottom cell types for small intestine\ntop_bottom_si = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Small Intestine')\nprint(\"\\nTop 5 cell types in Small Intestine:\")\nprint(top_bottom_si[0])\nprint(\"\\nBottom 5 cell types in Small Intestine:\")\nprint(top_bottom_si[1])\n# Get top and bottom cell types for large intestine\ntop_bottom_li = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Large Intestine')\nprint(\"\\nTop 5 cell types in Large Intestine:\")\nprint(top_bottom_li[0])\nprint(\"\\nBottom 5 cell types in Large Intestine:\")\nprint(top_bottom_li[1])\n\n\nTop 5 cell types in Small Intestine:\n      Level Three Cell Type  mean_distance\n5          enterocyte:cd66+      77.146245\n9           lymphocyte:cd7+      63.133067\n3                enterocyte      50.623921\n22  transit amplifying cell      47.585919\n19             stromal cell      45.676768\n\nBottom 5 cell types in Small Intestine:\n                   Level Three Cell Type  mean_distance\n2   endothelial cell of lymphatic vessel      26.096485\n20                           t cell:cd4+      23.445133\n1                         dendritic cell      22.322890\n18                           plasma cell      20.214029\n11               macrophage:inflammatory      18.758805\n\nTop 5 cell types in Large Intestine:\n   Level Three Cell Type  mean_distance\n17           paneth cell     138.624783\n5       enterocyte:cd66+      54.150643\n19          stromal cell      53.780477\n12    muscle cell:smooth      53.677561\n15                neuron      48.971272\n\nBottom 5 cell types in Large Intestine:\n      Level Three Cell Type  mean_distance\n0                    b cell      29.018398\n1            dendritic cell      28.327602\n20              t cell:cd4+      27.552400\n11  macrophage:inflammatory      27.235706\n18              plasma cell      26.523197\n\n\n\n# Get top five and bottom five cell types with respect to median distance in small intestine and large intestine separately.\ndef get_top_bottom_cell_types(df, cell_type_level, tissue_subtype, top_n=5):\n    # Filter the DataFrame for the specified tissue subtype and cell type level\n    df_filtered = df[df['Tissue Subtype'] == tissue_subtype]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n# Get top and bottom cell types for small intestine\ntop_bottom_si = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Small Intestine')\nprint(\"\\nTop 5 cell types in Small Intestine:\")\nprint(top_bottom_si[0])\nprint(\"\\nBottom 5 cell types in Small Intestine:\")\nprint(top_bottom_si[1])\n# Get top and bottom cell types for large intestine\ntop_bottom_li = get_top_bottom_cell_types(df_all_edges_with_cell_type_level, cell_type_level, 'Large Intestine')\nprint(\"\\nTop 5 cell types in Large Intestine:\")\nprint(top_bottom_li[0])\nprint(\"\\nBottom 5 cell types in Large Intestine:\")\nprint(top_bottom_li[1])\n\n\nTop 5 cell types in Small Intestine:\n      Level Three Cell Type  median_distance\n5          enterocyte:cd66+        62.703991\n9           lymphocyte:cd7+        43.305553\n22  transit amplifying cell        35.930304\n3                enterocyte        35.085853\n19             stromal cell        33.698344\n\nBottom 5 cell types in Small Intestine:\n                   Level Three Cell Type  median_distance\n2   endothelial cell of lymphatic vessel        17.802866\n20                           t cell:cd4+        17.802866\n18                           plasma cell        16.849172\n1                         dendritic cell        16.056992\n11               macrophage:inflammatory        12.986758\n\nTop 5 cell types in Large Intestine:\n   Level Three Cell Type  median_distance\n17           paneth cell       154.596150\n12    muscle cell:smooth        45.674058\n5       enterocyte:cd66+        44.593095\n19          stromal cell        41.228708\n6       enterocyte:muc1+        40.120296\n\nBottom 5 cell types in Large Intestine:\n      Level Three Cell Type  median_distance\n0                    b cell        22.347599\n20              t cell:cd4+        21.516250\n1            dendritic cell        21.410062\n18              plasma cell        21.330074\n11  macrophage:inflammatory        20.935756\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                   mean    std  CV (%)\nUnique Region                         \nAscending         41.20  32.11    77.9\nDescending        40.67  32.26    79.3\nDuodenum          36.24  32.45    89.5\nIleum             37.43  33.54    89.6\nMid Jejunum       41.19  37.64    91.4\nProximal Jejunum  41.26  36.84    89.3\nSigmoid           48.92  35.83    73.2\nTransverse        44.69  33.58    75.1\n\nCell Type Variability Analysis (sorted by CV):\n                                        mean    std  CV (%)\nLevel Three Cell Type                                      \nneutrophil                             35.60  38.33   107.7\nnatural killer cell                    33.64  33.72   100.2\nmacrophage                             36.69  35.65    97.2\nt cell:cd8+ alpha-beta                 39.10  37.03    94.7\ninterstitial cell of cajal             31.59  29.57    93.6\nmacrophage:inflammatory                22.15  20.61    93.0\nendothelial cell of lymphatic vessel   30.87  28.45    92.2\ndendritic cell                         25.43  22.42    88.2\nlymphocyte:cd7+                        57.05  47.42    83.1\nenterocyte                             47.21  38.67    81.9\nstromal cell                           49.58  40.53    81.7\nt cell:cd4+                            24.94  20.31    81.4\nneuron                                 41.30  32.40    78.5\nneuroendocrine cell                    39.37  30.36    77.1\nenterocyte:cd57+                       31.65  23.87    75.4\nmuscle cell:smooth                     45.43  34.12    75.1\ntransit amplifying cell                44.71  32.94    73.7\ngoblet cell                            40.65  29.59    72.8\nplasma cell                            22.84  16.21    71.0\nb cell                                 28.13  19.82    70.5\nenterocyte:cd66+                       58.73  39.94    68.0\ntransit amplifying cell:proliferating  38.97  26.29    67.5\npaneth cell                            34.14  22.89    67.0\nenterocyte:muc1+                       38.46  24.06    62.6\n\n\n\nplot_violin_cells_per_celltype_small_vs_large_intestine(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\"",
    "crumbs": [
      "Distance Analysis: codex-intestine-stanford"
    ]
  },
  {
    "objectID": "data_processing__crosswalk_cell_type_names.html",
    "href": "data_processing__crosswalk_cell_type_names.html",
    "title": "Data Processing: Harmonize Cell Types",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\n\npd.set_option('display.max_columns', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\nmapping_files_dir = \"mapping_files\"\nmapping_file_1 = \"cell_type_mappings_1.xlsx\"\nmapping_file_2 = \"cell_type_mappings_2.xlsx\"\norig_filedir = \"data-processed-nodes\"\ndest_filedir = \"data-processed-nodes-with-harmonized-cell-types\"\n# Function to load your data\ndef load_data(path):\n    data = pd.read_csv(path)\n    return data\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")\nprint(len(os.listdir(os.path.join(basepath, orig_filedir))), os.listdir(os.path.join(basepath, orig_filedir)))\n\n14 ['intestine-codex-stanford', 'tonsil-codex-stanford', 'esophagus-codex-stanford', 'colon-xenium-stanford', 'lymphnode-codex-yale', 'maternalfetalinterface-mibitof-stanford', 'oralcavity-codex-czi', 'pancreas-geomx-ufl', 'skin-celldive-ge', 'skin-confocal-sorgerlab', 'spleen-codex-ufl', 'lung-codex-urmc', 'bonemarrow-codex-chop', 'colon-cycif-sorgerlab']\n# Create destination directory. Overwrite if it exists.\nif os.path.exists(os.path.join(basepath, dest_filedir)):\n    shutil.rmtree(os.path.join(basepath, dest_filedir))\n    print(f\"Directory '{dest_filedir}' already exists and has been removed. New directory will be created.\")\nelse:\n    print(f\"Directory '{dest_filedir}' does not exist and will be created.\")\nos.makedirs(os.path.join(basepath, dest_filedir), exist_ok=False)\n\nDirectory 'data-processed-nodes-with-harmonized-cell-types' already exists and has been removed. New directory will be created.",
    "crumbs": [
      "Data Processing: Harmonize Cell Types"
    ]
  },
  {
    "objectID": "data_processing__crosswalk_cell_type_names.html#mapping-first-cell-type-crosswalks",
    "href": "data_processing__crosswalk_cell_type_names.html#mapping-first-cell-type-crosswalks",
    "title": "Data Processing: Harmonize Cell Types",
    "section": "Mapping first Cell Type Crosswalks",
    "text": "Mapping first Cell Type Crosswalks\n\ncrosswalk_data = pd.read_excel(os.path.join(basepath, mapping_files_dir, mapping_file_1), sheet_name=None)\nprint(crosswalk_data.keys())\n\ndict_keys(['intestine-codex-stanford', 'esophagus-codex-stanford', 'tonsil-codex-stanford', 'colon-xenium-stanford', 'spleen-codex-ufl', 'colon-cycif-sorgerlab', 'lung-codex-urmc', 'lymphnode-codex-yale', 'skin-celldive-ge', 'skin-confocal-sorgerlab', 'maternalfetalinterface-mibitof', 'pancreas-geomx-ufl', 'BuccalMuscosaMinorSalivaryGland', 'Parotid Major Salivary Gland Su', 'Gingiva-PhenocyclerFusion', 'Tongue-PhenocyclerFusion', 'bonemarrow-codex-chop'])\n\n\n\n# Merge different oral cavity crosswalks ['BuccalMuscosaMinorSalivaryGland', 'Parotid Major Salivary Gland-Ph', 'Gingiva-PhenocyclerFusion', 'Tongue-PhenocyclerFusion'] into a single crosswalk ['oral-cavity-czi']. Drop duplicate rows, check by Cell Type column.\ncrosswalk_data[\"oralcavity-codex-czi\"] = pd.concat([crosswalk_data['BuccalMuscosaMinorSalivaryGland'], crosswalk_data['Parotid Major Salivary Gland Su'], crosswalk_data['Gingiva-PhenocyclerFusion'], crosswalk_data['Tongue-PhenocyclerFusion']]).drop_duplicates(subset=['Cell Type'])\n\n# length of the merged crosswalk\nlen(crosswalk_data[\"oralcavity-codex-czi\"])\n\n39\n\n\n\n# Remove duplicate rows in the lung crosswalk data in crosswalk_data[\"lung-codex-urmc\"].\ncrosswalk_data[\"lung-codex-urmc\"] = crosswalk_data[\"lung-codex-urmc\"].drop_duplicates(subset=['Cell Type'])\n\n\n# Dataset name to crosswalk name mapping\ndataset_crosswalk_mapping = {\n    \"colon-cycif-sorgerlab\": \"colon-cycif-sorgerlab\",\n    \"esophagus-codex-stanford\": \"esophagus-codex-stanford\",\n    \"intestine-codex-stanford\": \"intestine-codex-stanford\",\n    \"lung-codex-urmc\": \"lung-codex-urmc\", # NOTE: Structure of the lung-codex-urmc crosswalk is different from other crosswalks.\n    \"maternalfetalinterface-mibitof-stanford\": \"maternalfetalinterface-mibitof\",\n    \"skin-celldive-ge\": \"skin-celldive-ge\",\n    \"skin-confocal-sorgerlab\": \"skin-confocal-sorgerlab\",\n    \"spleen-codex-ufl\": \"spleen-codex-ufl\",\n    \"tonsil-codex-stanford\": \"tonsil-codex-stanford\",\n    \"colon-xenium-stanford\": \"colon-xenium-stanford\",\n    \"lymphnode-codex-yale\": \"lymphnode-codex-yale\",\n    \"oralcavity-codex-czi\": \"oralcavity-codex-czi\", # Using merged crosswalk instead of individual. See previous cell where the merged crosswalk is created.\n    \"pancreas-geomx-ufl\": \"pancreas-geomx-ufl\",\n    \"bonemarrow-codex-chop\": \"bonemarrow-codex-chop\"\n}\n\n\n# Cleanup crosswalk data\nprint(\"Before cleanup:\")\nall_cell_types = set()\nfor key in crosswalk_data.keys():\n    if 'CL Label' in crosswalk_data[key].columns:\n        all_cell_types.update(crosswalk_data[key]['Cell Type'].dropna().unique())\nprint(f\"Total unique cell types: {len(all_cell_types)}\")\n\nfor key in crosswalk_data.keys(): \n    # Clean CL Label values\n    if 'CL Label' in crosswalk_data[key].columns:\n        # Convert NaN to empty string first\n        crosswalk_data[key]['CL Label'] = crosswalk_data[key]['CL Label'].fillna('')\n        \n        # Only process non-empty strings\n        mask = crosswalk_data[key]['CL Label'] != ''\n        if mask.any():\n            # Convert to lowercase and strip whitespace\n            crosswalk_data[key].loc[mask, 'CL Label'] = crosswalk_data[key].loc[mask, 'CL Label'].str.lower().str.strip()\n            \n            # Replace 'cells' with 'cell'\n            crosswalk_data[key].loc[mask, 'CL Label'] = crosswalk_data[key].loc[mask, 'CL Label'].str.replace('cells', 'cell')\n    \n    # Clean Cell Type values for consistency\n    if 'CL Label' in crosswalk_data[key].columns:\n        # Convert NaN to empty string first\n        crosswalk_data[key]['CL Label'] = crosswalk_data[key]['CL Label'].fillna('')\n        \n        # Only process non-empty strings\n        mask = crosswalk_data[key]['CL Label'] != ''\n        if mask.any():\n            crosswalk_data[key].loc[mask, 'CL Label'] = crosswalk_data[key].loc[mask, 'CL Label'].str.strip()\n    \n    # Convert empty strings to NaN\n    crosswalk_data[key] = crosswalk_data[key].replace('', np.nan)\n\nprint(\"\\nAfter cleanup:\")\nall_cell_types = set()\nfor key in crosswalk_data.keys():\n    if 'CL Label' in crosswalk_data[key].columns:\n        all_cell_types.update(crosswalk_data[key]['CL Label'].dropna().unique())\nprint(f\"Total unique cell types: {len(all_cell_types)}\")\n\nBefore cleanup:\nTotal unique cell types: 294\n\nAfter cleanup:\nTotal unique cell types: 159\n\n\n\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, orig_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        dataset_name = dirpath.split(\"/\")[-1]\n\n        if dataset_name in dataset_crosswalk_mapping:\n            nodes_df = load_data(os.path.join(dirpath, filename))\n            og_df = nodes_df.shape[0]\n            crosswalk = crosswalk_data[dataset_crosswalk_mapping[dataset_name]]\n\n            # Store Cell Type column in a new column (\"Initial CT\")\n            nodes_df['Original Cell Type'] = nodes_df['Cell Type']\n\n            # Merge nodes_df with crosswalk on Cell Type column. If CL Label is not null, replace Cell Type with CL Label, else keep original cell type name. \n            nodes_df = pd.merge(nodes_df, crosswalk, on='Cell Type', how='left')\n            nodes_df['Cell Type'] = np.where(nodes_df['CL Label'].isnull(), nodes_df['Cell Type'], nodes_df['CL Label'])\n            # nodes_df = nodes_df.drop(columns=['CL Label'])\n\n            # Drop CL Label column.\n            nodes_df = nodes_df.drop(columns=['CL Label'])\n\n            # Convert to lowercase and strip whitespace for all values in Cell Type column.\n            nodes_df['Cell Type'] = nodes_df['Cell Type'].str.lower().str.strip()\n\n            # Replace \"cells\" with \"cell\" for all values in Cell Type column.\n            nodes_df['Cell Type'] = nodes_df['Cell Type'].str.lower().str.replace(\"cells\", \"cell\")\n\n            # Check if number of rows before and after merge are same.\n            if nodes_df.shape[0] != og_df:\n                print(f\"Number of rows before merge: {og_df}\")\n                print(f\"Number of rows after merge: {nodes_df.shape[0]}\")\n\n            # Create destination directory for the dataset if it doesn't exist.\n            dest_dir = os.path.join(basepath, dest_filedir, dataset_name)\n            create_directory(dest_dir)\n\n            # Write the updated nodes_df to a new file.\n            nodes_df.to_csv(os.path.join(dest_dir, filename), index=False)\n\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/intestine-codex-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/tonsil-codex-stanford' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/esophagus-codex-stanford' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-xenium-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/lymphnode-codex-yale' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/lymphnode-codex-yale' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/lymphnode-codex-yale' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/lymphnode-codex-yale' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/lymphnode-codex-yale' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/maternalfetalinterface-mibitof-stanford' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/oralcavity-codex-czi' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/pancreas-geomx-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-celldive-ge' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-confocal-sorgerlab' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/skin-confocal-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/spleen-codex-ufl' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/spleen-codex-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/spleen-codex-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/spleen-codex-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/spleen-codex-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/spleen-codex-ufl' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/lung-codex-urmc' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/lung-codex-urmc' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/bonemarrow-codex-chop' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' created successfully.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.\nDirectory '/u/yashjain/hra-cell-distance-analysis/data/data-processed-nodes-with-harmonized-cell-types/colon-cycif-sorgerlab' already exists.",
    "crumbs": [
      "Data Processing: Harmonize Cell Types"
    ]
  },
  {
    "objectID": "data_processing__crosswalk_cell_type_names.html#mapping-second-cell-type-crosswalks",
    "href": "data_processing__crosswalk_cell_type_names.html#mapping-second-cell-type-crosswalks",
    "title": "Data Processing: Harmonize Cell Types",
    "section": "Mapping second Cell Type Crosswalks",
    "text": "Mapping second Cell Type Crosswalks\n\nsecondary_crosswalk_data = pd.read_excel(os.path.join(basepath, mapping_files_dir, mapping_file_2))\n\n\n# Clean up secondary crosswalk data. \n# Drop Tissue Type and Organ_ID columns.\nsecondary_crosswalk_data = secondary_crosswalk_data.drop(columns=['Tissue Type', 'Organ_ID'])\n\n# Print number of unique cell types in the secondary crosswalk data based on Original Cell Type column.\nprint(f\"Number of unique cell types in secondary crosswalk data: {secondary_crosswalk_data['Original Cell Type'].nunique()}\")\n\n# Print number of rows. \nprint(f\"Number of rows in secondary crosswalk data: {secondary_crosswalk_data.shape[0]}\")\n\n# Remove duplicate rows based on Original Cell Type column.\nsecondary_crosswalk_data = secondary_crosswalk_data.drop_duplicates(subset=['Original Cell Type'])\n\n# Print number of unique cell types in the secondary crosswalk data after removing duplicates.\nprint(f\"Number of unique cell types in secondary crosswalk data after removing duplicates: {secondary_crosswalk_data['Original Cell Type'].nunique()}\")\n\n# Print number of rows after removing duplicates.\nprint(f\"Number of rows in secondary crosswalk data after removing duplicates: {secondary_crosswalk_data.shape[0]}\")\n\nNumber of unique cell types in secondary crosswalk data: 239\nNumber of rows in secondary crosswalk data: 309\nNumber of unique cell types in secondary crosswalk data after removing duplicates: 239\nNumber of rows in secondary crosswalk data after removing duplicates: 239\n\n\n\n# Bring in secondary crosswalk data with multiple merge levels.\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, dest_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        dataset_name = dirpath.split(\"/\")[-1]\n        # if dataset_name in dataset_crosswalk_mapping:\n        nodes_df = load_data(os.path.join(dirpath, filename))\n        og_df_num_rows = nodes_df.shape[0]\n\n        # Merge nodes_df with crosswalk_data on Cell Type column in nodes_df and Original Cell Type column in secondary_crosswalk_data.\n        nodes_df = pd.merge(nodes_df, secondary_crosswalk_data, left_on='Cell Type', right_on='Original Cell Type', how='left')\n        # print(nodes_df.columns)\n\n        # Rename Original Cell Type_x column.\n        nodes_df = nodes_df.rename(columns={'Original Cell Type_x': 'Original Cell Type'})\n\n        # Drop columns: Original Cell Type_y\n        # Drop columns if they exist\n        columns_to_drop = ['Original Cell Type_y', 'Cell Type']\n        existing_columns = [col for col in columns_to_drop if col in nodes_df.columns]\n        nodes_df = nodes_df.drop(columns=existing_columns)\n\n        # Check if number of rows before and after merge are same.\n        if nodes_df.shape[0] != og_df_num_rows:\n            print(f\"Number of rows before merge: {og_df_num_rows}\")\n            print(f\"Number of rows after merge: {nodes_df.shape[0]}\")\n\n        # Write the updated nodes_df to a new file.\n        nodes_df.to_csv(os.path.join(dirpath, filename), index=False)\n\n\n# Print final message\nprint(\"All datasets processed and saved with harmonized cell types.\")\n\nAll datasets processed and saved with harmonized cell types.",
    "crumbs": [
      "Data Processing: Harmonize Cell Types"
    ]
  },
  {
    "objectID": "data_processing__crosswalk_cell_type_names.html#data-validation",
    "href": "data_processing__crosswalk_cell_type_names.html#data-validation",
    "title": "Data Processing: Harmonize Cell Types",
    "section": "Data Validation",
    "text": "Data Validation\n\n# Data Validation: Compute and print total number of unique values for each specified column across all datasets in the destination directory.\ncolumns = [\"Original Cell Type\", \"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"]\nunique_counts = {col: set() for col in columns}\n\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, dest_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        nodes_df = load_data(os.path.join(dirpath, filename))\n        for col in columns:\n            if col in nodes_df.columns:\n                unique_counts[col].update(nodes_df[col].dropna().unique())\n\nfor col in columns:\n    print(f\"Total unique values in '{col}': {len(unique_counts[col])}\")\n\nTotal unique values in 'Original Cell Type': 295\nTotal unique values in 'Level Three Cell Type': 161\nTotal unique values in 'Level Two Cell Type': 57\nTotal unique values in 'Level One Cell Type': 8\n\n\n\n# Data Validation: Compute the total number of rows in data-processed-nodes and data-processed-nodes-with-harmonized-cell-types directories.\norig_nodes_count = 0\nharmonized_nodes_count = 0\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, orig_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        nodes_df = load_data(os.path.join(dirpath, filename))\n        orig_nodes_count += nodes_df.shape[0]\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, dest_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        nodes_df = load_data(os.path.join(dirpath, filename))\n        harmonized_nodes_count += nodes_df.shape[0]\nprint(f\"Total number of nodes in data-processed-nodes: {orig_nodes_count}\")\nprint(f\"Total number of nodes in data-processed-nodes-with-harmonized-cell-types: {harmonized_nodes_count}\")\n# print difference. \nprint(f\"Difference in number of nodes: {harmonized_nodes_count - orig_nodes_count}\")\n\nTotal number of nodes in data-processed-nodes: 47349496\nTotal number of nodes in data-processed-nodes-with-harmonized-cell-types: 47349496\nDifference in number of nodes: 0\n\n\n\n# Data Validation: Compute the total number of rows in data-processed-nodes and data-processed-nodes-with-harmonized-cell-types directories.\n# Compute it per file, and print the file name if the number of rows is different.\norig_nodes_count_per_file = {}\nharmonized_nodes_count_per_file = {}\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, orig_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        nodes_df = load_data(os.path.join(dirpath, filename))\n        orig_nodes_count_per_file[filename] = nodes_df.shape[0]\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, dest_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        nodes_df = load_data(os.path.join(dirpath, filename))\n        harmonized_nodes_count_per_file[filename] = nodes_df.shape[0]\n# Compare the two dictionaries and print the file name if the number of rows is different.\nfor filename in orig_nodes_count_per_file.keys():\n    if filename in harmonized_nodes_count_per_file:\n        if orig_nodes_count_per_file[filename] != harmonized_nodes_count_per_file[filename]:\n            print(f\"File '{filename}' has different number of rows: {orig_nodes_count_per_file[filename]} (original) vs {harmonized_nodes_count_per_file[filename]} (harmonized)\")\n    else:\n        print(f\"File '{filename}' not found in harmonized directory.\")\nfor filename in harmonized_nodes_count_per_file.keys():\n    if filename not in orig_nodes_count_per_file:\n        print(f\"File '{filename}' not found in original directory.\")\n# Print final message\nprint(\"Data validation completed. Check the output for any discrepancies in row counts between original and harmonized datasets.\")\n\nData validation completed. Check the output for any discrepancies in row counts between original and harmonized datasets.\n\n\n\n# Read all datasets and check if there are any missing or null values in any columns.\nfor dirpath, dirnames, filenames in os.walk(os.path.join(basepath, dest_filedir)):\n    for filename in [f for f in filenames if f.endswith(\"-nodes.csv\")]:\n        dataset_name = dirpath.split(\"/\")[-1]\n        nodes_df = load_data(os.path.join(dirpath, filename))\n        if nodes_df.isnull().values.any():\n            print(f\"Missing values found in {dataset_name}\")\n\nprint(\"NOTE: Bone marrow dataset is expected to be flagged here since the cell type mutant blast:npm1 does not have a corresponding value in CL Label/ID/Match columns for Level Three Cell Type.\\nThis should not impact any downstream analysis.\\nIf any other datasets are flagged, then investigate further.\")\n\nMissing values found in bonemarrow-codex-chop\nMissing values found in bonemarrow-codex-chop\nMissing values found in bonemarrow-codex-chop\nMissing values found in bonemarrow-codex-chop\nMissing values found in bonemarrow-codex-chop\nNOTE: Bone marrow dataset is expected to be flagged here since the cell type mutant blast:npm1 does not have a corresponding value in CL Label/ID/Match columns for Level Three Cell Type.\nThis should not impact any downstream analysis.\nIf any other datasets are flagged, then investigate further.",
    "crumbs": [
      "Data Processing: Harmonize Cell Types"
    ]
  },
  {
    "objectID": "distance_analysis__maternalfetalinterface-mibitof-stanford.html",
    "href": "distance_analysis__maternalfetalinterface-mibitof-stanford.html",
    "title": "Distance Analysis: maternalfetalinterface-mibitof-stanford",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"maternalfetalinterface-mibitof-stanford\" \ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: maternalfetalinterface-mibitof-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: maternalfetalinterface-mibitof-stanford",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n448.086\n13.685\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\n10_31742_1_2\n\n\n1\n486.795\n245.939\nother\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\n10_31742_1_2\n\n\n2\n297.160\n464.899\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\n10_31742_1_2\n\n\n3\n450.041\n748.374\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\n10_31742_1_2\n\n\n4\n3.910\n125.902\nother\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\n10_31742_1_2\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 26\nLevel Three Cell Type: 23\nLevel Two Cell Type: 11\nLevel One Cell Type: 5\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: maternalfetalinterface-mibitof-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: maternalfetalinterface-mibitof-stanford",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n448.086\n13.685\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\n10_31742_1_2\n\n\n1\n486.795\n245.939\nother\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\n10_31742_1_2\n\n\n2\n297.160\n464.899\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\n10_31742_1_2\n\n\n3\n450.041\n748.374\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\n10_31742_1_2\n\n\n4\n3.910\n125.902\nother\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\n10_31742_1_2\n\n\n\n\n\n\n\n\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name. For this dataset (maternalfetalinterface-mibitof-stanford), the region is the dataset name itself.\ndf_all_nodes['Unique Region'] = dataset_dir\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n1\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n2\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n3\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n4\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['maternalfetalinterface-mibitof-stanford']\nTotal number of unique regions: 1\n\nNumber of unique datasets per unique region:\nmaternalfetalinterface-mibitof-stanford: 209",
    "crumbs": [
      "Distance Analysis: maternalfetalinterface-mibitof-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: maternalfetalinterface-mibitof-stanford",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n448.086\n13.685\n0\n475.456\n50.439\n0\n45.825467\n10_31742_1_2\nendothelial cell\nLevel Three Cell Type\n\n\n1\n7\n465.290\n133.722\n0\n469.982\n70.380\n0\n63.515540\n10_31742_1_2\nendothelial cell\nLevel Three Cell Type\n\n\n2\n59\n450.041\n1.173\n0\n475.456\n50.439\n0\n55.435196\n10_31742_1_2\nendothelial cell\nLevel Three Cell Type\n\n\n3\n82\n477.411\n163.438\n0\n469.982\n70.380\n0\n93.354065\n10_31742_1_2\nendothelial cell\nLevel Three Cell Type\n\n\n4\n99\n420.325\n31.671\n0\n389.045\n42.619\n0\n33.140566\n10_31742_1_2\nendothelial cell\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name. For this dataset (maternalfetalinterface-mibitof-stanford), the region is the dataset name itself.\ndf_all_edges['Unique Region'] = dataset_dir\n\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n1\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n2\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n3\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n4\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['maternalfetalinterface-mibitof-stanford']\nTotal number of unique regions: 1\n\nNumber of unique datasets per unique region:\nmaternalfetalinterface-mibitof-stanford: 201\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = dataset_dir\n# df_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n1\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n2\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n3\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n4\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n448.086\n13.685\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\n10_31742_1_2\nmaternalfetalinterface-mibitof-stanford\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n0\n448.086\n13.685\n0\n475.456\n50.439\n0\n45.825467\n10_31742_1_2\nendothelial cell\nLevel Three Cell Type\nmaternalfetalinterface-mibitof-stanford\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n0\n448.086\n13.685\n0\n475.456\n50.439\n0\n45.825467\n10_31742_1_2\nendothelial cell\nLevel Three Cell Type\nmacrophage:2a\nmacrophage\nimmune cell\nmaternalfetalinterface-mibitof-stanford",
    "crumbs": [
      "Distance Analysis: maternalfetalinterface-mibitof-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#node-analysis",
    "href": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#node-analysis",
    "title": "Distance Analysis: maternalfetalinterface-mibitof-stanford",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: maternalfetalinterface-mibitof-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#distance-analysis",
    "href": "distance_analysis__maternalfetalinterface-mibitof-stanford.html#distance-analysis",
    "title": "Distance Analysis: maternalfetalinterface-mibitof-stanford",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nmaternalfetalinterface-mibitof-stanford\nendothelial cell\nLevel One Cell Type\n67.89132\n57.54213\n3.49721\n199.994111\n\n\n1\nmaternalfetalinterface-mibitof-stanford\nendothelial cell\nLevel Three Cell Type\n67.89132\n57.54213\n3.49721\n199.994111\n\n\n2\nmaternalfetalinterface-mibitof-stanford\nendothelial cell\nLevel Two Cell Type\n67.89132\n57.54213\n3.49721\n199.994111\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nmaternalfetalinterface-mibitof-stanford\n71.729685\n60.817785\n5.083000\n199.994111\n\n\n1\nimmune cell\nmaternalfetalinterface-mibitof-stanford\n69.292915\n59.560480\n3.497210\n199.992200\n\n\n2\nmesenchymal cell\nmaternalfetalinterface-mibitof-stanford\n67.481963\n57.231769\n3.910000\n199.987996\n\n\n3\nunknown cell\nmaternalfetalinterface-mibitof-stanford\n58.887208\n47.444914\n4.211199\n199.992200\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in maternalfetalinterface-mibitof-stanford:\n  Level One Cell Type  mean_distance\n0     epithelial cell      71.729685\n1         immune cell      69.292915\n2    mesenchymal cell      67.481963\n3        unknown cell      58.887208\n\nBottom 5 cell types in maternalfetalinterface-mibitof-stanford:\n  Level One Cell Type  mean_distance\n0     epithelial cell      71.729685\n1         immune cell      69.292915\n2    mesenchymal cell      67.481963\n3        unknown cell      58.887208\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in maternalfetalinterface-mibitof-stanford:\n  Level One Cell Type  median_distance\n0     epithelial cell        60.817785\n1         immune cell        59.560480\n2    mesenchymal cell        57.231769\n3        unknown cell        47.444914\n\nBottom 5 cell types in maternalfetalinterface-mibitof-stanford:\n  Level One Cell Type  median_distance\n0     epithelial cell        60.817785\n1         immune cell        59.560480\n2    mesenchymal cell        57.231769\n3        unknown cell        47.444914\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                                          mean    std  CV (%)\nUnique Region                                                \nmaternalfetalinterface-mibitof-stanford  67.89  44.96    66.2\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nunknown cell         58.89  41.57    70.6\nmesenchymal cell     67.48  45.43    67.3\nepithelial cell      71.73  46.54    64.9\nimmune cell          69.29  44.09    63.6\n\n\n\n# Define the standard region sequence for plots (Get all unique values in Unique Region column as a list.)\nregions = df_all_edges_with_cell_types['Unique Region'].unique().tolist()\n\nprint(\"\\nRegions in the data:\")\nprint(regions)\n\n\nRegions in the data:\n['maternalfetalinterface-mibitof-stanford']\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    font_size = 10\n    plt.figure(figsize=(15, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    # Create the violin plot for the entire dataset\n    sns.violinplot(\n        data=df_all_edges_with_cell_type_level, \n        x=cell_type_level, \n        y=\"Distance\", \n        density_norm=density_norm, \n        common_norm=True, \n        cut=0, \n        inner=\"box\", \n        split=False, \n        palette=class_color_dict, \n        alpha=.9, \n        hue=cell_type_level, \n        legend=False, \n        order=cell_types, \n        fill=True\n    )\n\n    # Set title and labels\n    plt.title(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (μm)', fontsize=font_size)\n    \n    # Rotate x-axis labels and adjust font size\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\ndendritic cell\nmaternalfetalinterface-mibitof-stanford\n58.324142\n47.317462\n5.098016\n199.666668\n\n\n1\nfibroblast\nmaternalfetalinterface-mibitof-stanford\n67.813447\n57.627086\n3.910000\n199.987996\n\n\n2\ngland epithelium cell\nmaternalfetalinterface-mibitof-stanford\n51.287235\n42.921044\n5.981150\n199.885151\n\n\n3\nmacrophage\nmaternalfetalinterface-mibitof-stanford\n72.110494\n62.600309\n3.604842\n199.992200\n\n\n4\nmast cell\nmaternalfetalinterface-mibitof-stanford\n63.148860\n54.321564\n6.448537\n195.472628\n\n\n5\nmuscle cell\nmaternalfetalinterface-mibitof-stanford\n45.641366\n33.661210\n5.487947\n197.687141\n\n\n6\nnatural killer cell\nmaternalfetalinterface-mibitof-stanford\n67.902679\n58.362562\n3.497210\n199.930654\n\n\n7\nt cell\nmaternalfetalinterface-mibitof-stanford\n62.509286\n52.500396\n4.576538\n199.463659\n\n\n8\ntrophoblast\nmaternalfetalinterface-mibitof-stanford\n81.257066\n72.895027\n5.083000\n199.994111\n\n\n9\nunknown cell\nmaternalfetalinterface-mibitof-stanford\n58.887208\n47.444914\n4.211199\n199.992200\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in maternalfetalinterface-mibitof-stanford:\n   Level Two Cell Type  mean_distance\n8         trophoblast       81.257066\n3           macrophage      72.110494\n6  natural killer cell      67.902679\n1           fibroblast      67.813447\n4            mast cell      63.148860\n\nBottom 5 cell types in maternalfetalinterface-mibitof-stanford:\n     Level Two Cell Type  mean_distance\n7                 t cell      62.509286\n9           unknown cell      58.887208\n0         dendritic cell      58.324142\n2  gland epithelium cell      51.287235\n5            muscle cell      45.641366\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in maternalfetalinterface-mibitof-stanford:\n   Level Two Cell Type  median_distance\n8         trophoblast         72.895027\n3           macrophage        62.600309\n6  natural killer cell        58.362562\n1           fibroblast        57.627086\n4            mast cell        54.321564\n\nBottom 5 cell types in maternalfetalinterface-mibitof-stanford:\n     Level Two Cell Type  median_distance\n7                 t cell        52.500396\n9           unknown cell        47.444914\n0         dendritic cell        47.317462\n2  gland epithelium cell        42.921044\n5            muscle cell        33.661210\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                                          mean    std  CV (%)\nUnique Region                                                \nmaternalfetalinterface-mibitof-stanford  67.89  44.96    66.2\n\nCell Type Variability Analysis (sorted by CV):\n                        mean    std  CV (%)\nLevel Two Cell Type                        \nmuscle cell            45.64  35.99    78.9\ndendritic cell         58.32  41.41    71.0\nunknown cell           58.89  41.57    70.6\ngland epithelium cell  51.29  34.72    67.7\nfibroblast             67.81  45.48    67.1\nt cell                 62.51  41.77    66.8\nmast cell              63.15  41.34    65.5\nnatural killer cell    67.90  42.91    63.2\nmacrophage             72.11  45.38    62.9\ntrophoblast            81.26  48.25    59.4\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\ndendritic cell\nmaternalfetalinterface-mibitof-stanford\n58.324142\n47.317462\n5.098016\n199.666668\n\n\n1\nfibroblast\nmaternalfetalinterface-mibitof-stanford\n77.889958\n69.612277\n3.910000\n199.987996\n\n\n2\nglandular cell of placenta\nmaternalfetalinterface-mibitof-stanford\n51.287235\n42.921044\n5.981150\n199.885151\n\n\n3\nhofbauer cell\nmaternalfetalinterface-mibitof-stanford\n51.969181\n51.969181\n51.969181\n51.969181\n\n\n4\nmacrophage:1a\nmaternalfetalinterface-mibitof-stanford\n75.795827\n68.247143\n4.724471\n199.456378\n\n\n5\nmacrophage:1b\nmaternalfetalinterface-mibitof-stanford\n69.105499\n58.802292\n5.431946\n199.992200\n\n\n6\nmacrophage:2a\nmaternalfetalinterface-mibitof-stanford\n71.011379\n61.357107\n3.604842\n199.978822\n\n\n7\nmacrophage:2b\nmaternalfetalinterface-mibitof-stanford\n76.811644\n67.782982\n6.839707\n199.575914\n\n\n8\nmacrophage:2c\nmaternalfetalinterface-mibitof-stanford\n79.310856\n70.081228\n5.098016\n199.924919\n\n\n9\nmast cell\nmaternalfetalinterface-mibitof-stanford\n63.148860\n54.321564\n6.448537\n195.472628\n\n\n10\nmuscle cell\nmaternalfetalinterface-mibitof-stanford\n45.641366\n33.661210\n5.487947\n197.687141\n\n\n11\nmyofibroblast\nmaternalfetalinterface-mibitof-stanford\n44.639942\n33.840141\n4.423660\n199.978440\n\n\n12\nnatural killer cell\nmaternalfetalinterface-mibitof-stanford\n67.902679\n58.362562\n3.497210\n199.930654\n\n\n13\nt cell:cd4+ alpha-beta\nmaternalfetalinterface-mibitof-stanford\n57.463278\n47.325539\n4.976618\n198.665326\n\n\n14\nt cell:cd8+ alpha-beta\nmaternalfetalinterface-mibitof-stanford\n61.399550\n51.377460\n4.576538\n198.576424\n\n\n15\nt cell:mature natural killer\nmaternalfetalinterface-mibitof-stanford\n67.510450\n58.018392\n5.878019\n199.463659\n\n\n16\nt cell:regulatory\nmaternalfetalinterface-mibitof-stanford\n67.053392\n56.678818\n8.924741\n179.373567\n\n\n17\ntrophoblast:hla-g minus, cd57- ck7 low extravi...\nmaternalfetalinterface-mibitof-stanford\n72.329049\n59.481490\n5.968356\n198.836091\n\n\n18\ntrophoblast:hla-g+ cd56+ extravillous\nmaternalfetalinterface-mibitof-stanford\n62.454379\n51.417615\n5.083000\n199.396583\n\n\n19\ntrophoblast:hla-g+ ck7+ extravillous\nmaternalfetalinterface-mibitof-stanford\n83.334643\n75.236264\n5.981150\n199.994111\n\n\n20\ntrophoblast:hla-g+ ck7- extravillous\nmaternalfetalinterface-mibitof-stanford\n83.224385\n75.506038\n5.529575\n199.973471\n\n\n21\nunknown cell\nmaternalfetalinterface-mibitof-stanford\n58.887208\n47.444914\n4.211199\n199.992200\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in maternalfetalinterface-mibitof-stanford:\n                   Level Three Cell Type  mean_distance\n19  trophoblast:hla-g+ ck7+ extravillous      83.334643\n20  trophoblast:hla-g+ ck7- extravillous      83.224385\n8                          macrophage:2c      79.310856\n1                             fibroblast      77.889958\n7                          macrophage:2b      76.811644\n\nBottom 5 cell types in maternalfetalinterface-mibitof-stanford:\n         Level Three Cell Type  mean_distance\n13      t cell:cd4+ alpha-beta      57.463278\n3                hofbauer cell      51.969181\n2   glandular cell of placenta      51.287235\n10                 muscle cell      45.641366\n11               myofibroblast      44.639942\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in maternalfetalinterface-mibitof-stanford:\n                   Level Three Cell Type  median_distance\n20  trophoblast:hla-g+ ck7- extravillous        75.506038\n19  trophoblast:hla-g+ ck7+ extravillous        75.236264\n8                          macrophage:2c        70.081228\n1                             fibroblast        69.612277\n4                          macrophage:1a        68.247143\n\nBottom 5 cell types in maternalfetalinterface-mibitof-stanford:\n         Level Three Cell Type  median_distance\n13      t cell:cd4+ alpha-beta        47.325539\n0               dendritic cell        47.317462\n2   glandular cell of placenta        42.921044\n11               myofibroblast        33.840141\n10                 muscle cell        33.661210\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                                          mean    std  CV (%)\nUnique Region                                                \nmaternalfetalinterface-mibitof-stanford  67.89  44.96    66.2\n\nCell Type Variability Analysis (sorted by CV):\n                                                     mean    std  CV (%)\nLevel Three Cell Type                                                   \nmyofibroblast                                       44.64  35.31    79.1\nmuscle cell                                         45.64  35.99    78.9\ndendritic cell                                      58.32  41.41    71.0\nunknown cell                                        58.89  41.57    70.6\nt cell:cd4+ alpha-beta                              57.46  40.41    70.3\ntrophoblast:hla-g+ cd56+ extravillous               62.45  42.43    67.9\nglandular cell of placenta                          51.29  34.72    67.7\nt cell:regulatory                                   67.05  45.09    67.2\ntrophoblast:hla-g minus, cd57- ck7 low extravil...  72.33  48.30    66.8\nt cell:cd8+ alpha-beta                              61.40  40.96    66.7\nmast cell                                           63.15  41.34    65.5\nt cell:mature natural killer                        67.51  43.43    64.3\nmacrophage:1b                                       69.11  44.25    64.0\nmacrophage:2a                                       71.01  45.29    63.8\nnatural killer cell                                 67.90  42.91    63.2\nmacrophage:2b                                       76.81  46.70    60.8\nmacrophage:2c                                       79.31  47.08    59.4\nmacrophage:1a                                       75.80  44.50    58.7\nfibroblast                                          77.89  45.73    58.7\ntrophoblast:hla-g+ ck7- extravillous                83.22  48.60    58.4\ntrophoblast:hla-g+ ck7+ extravillous                83.33  48.07    57.7\nhofbauer cell                                       51.97    NaN     NaN\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.",
    "crumbs": [
      "Distance Analysis: maternalfetalinterface-mibitof-stanford"
    ]
  },
  {
    "objectID": "distance_analysis__skin-confocal-sorgerlab.html",
    "href": "distance_analysis__skin-confocal-sorgerlab.html",
    "title": "Distance Analysis: skin-confocal-sorgerlab",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"skin-confocal-sorgerlab\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: skin-confocal-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__skin-confocal-sorgerlab.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__skin-confocal-sorgerlab.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: skin-confocal-sorgerlab",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nz\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n732.21\n18.569\n0.87001\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n1\n733.07\n22.936\n4.77910\nTumor\ntumor cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n2\n736.84\n29.739\n4.43490\nTumor\ntumor cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n3\n732.12\n143.700\n15.22900\nTumor\ntumor cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n4\n714.57\n544.400\n1.40060\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 15\nLevel Three Cell Type: 15\nLevel Two Cell Type: 11\nLevel One Cell Type: 4\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: skin-confocal-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__skin-confocal-sorgerlab.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__skin-confocal-sorgerlab.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: skin-confocal-sorgerlab",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# Create a dictionary to map skin regions to correct condition.\nregion_map = {'phenotypes_invasive_margin':'Invasive Margin',\n 'phenotypes_melanoma_in_situ':'Melanoma In Situ', \n}\n\n# Define the standard region sequence for plots\nregions = ['Invasive Margin', 'Melanoma In Situ']\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nz\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n732.21\n18.569\n0.87001\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n1\n733.07\n22.936\n4.77910\nTumor\ntumor cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n2\n736.84\n29.739\n4.43490\nTumor\ntumor cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n3\n732.12\n143.700\n15.22900\nTumor\ntumor cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n4\n714.57\n544.400\n1.40060\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nphenotypes_invasive_margin\nInvasive Margin\n\n\n1\nphenotypes_invasive_margin\nInvasive Margin\n\n\n2\nphenotypes_invasive_margin\nInvasive Margin\n\n\n3\nphenotypes_invasive_margin\nInvasive Margin\n\n\n4\nphenotypes_invasive_margin\nInvasive Margin\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['Invasive Margin' 'Melanoma In Situ']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\nInvasive Margin: 1\nMelanoma In Situ: 1",
    "crumbs": [
      "Distance Analysis: skin-confocal-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__skin-confocal-sorgerlab.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__skin-confocal-sorgerlab.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: skin-confocal-sorgerlab",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n732.21\n18.569\n0.87001\n662.23\n117.79\n28.219\n124.458726\nphenotypes_invasive_margin\nendothelial cell\nLevel Three Cell Type\n\n\n1\n1\n733.07\n22.936\n4.77910\n662.23\n117.79\n28.219\n120.685607\nphenotypes_invasive_margin\nendothelial cell\nLevel Three Cell Type\n\n\n2\n2\n736.84\n29.739\n4.43490\n662.23\n117.79\n28.219\n117.835963\nphenotypes_invasive_margin\nendothelial cell\nLevel Three Cell Type\n\n\n3\n3\n732.12\n143.700\n15.22900\n670.45\n159.88\n25.529\n64.583832\nphenotypes_invasive_margin\nendothelial cell\nLevel Three Cell Type\n\n\n4\n5\n748.79\n80.906\n12.39500\n662.23\n117.79\n28.219\n95.412064\nphenotypes_invasive_margin\nendothelial cell\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nphenotypes_invasive_margin\nInvasive Margin\n\n\n1\nphenotypes_invasive_margin\nInvasive Margin\n\n\n2\nphenotypes_invasive_margin\nInvasive Margin\n\n\n3\nphenotypes_invasive_margin\nInvasive Margin\n\n\n4\nphenotypes_invasive_margin\nInvasive Margin\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['Invasive Margin' 'Melanoma In Situ']\nTotal number of unique regions: 2\n\nNumber of unique datasets per unique region:\nInvasive Margin: 1\nMelanoma In Situ: 1\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nphenotypes_invasive_margin\nInvasive Margin\n\n\n1\nphenotypes_invasive_margin\nInvasive Margin\n\n\n2\nphenotypes_invasive_margin\nInvasive Margin\n\n\n3\nphenotypes_invasive_margin\nInvasive Margin\n\n\n4\nphenotypes_invasive_margin\nInvasive Margin\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nz\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n732.21\n18.569\n0.87001\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nphenotypes_invasive_margin\nInvasive Margin\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n0\n732.21\n18.569\n0.87001\n662.23\n117.79\n28.219\n124.458726\nphenotypes_invasive_margin\nendothelial cell\nLevel Three Cell Type\nInvasive Margin\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n0\n732.21\n18.569\n0.87001\n662.23\n117.79\n28.219\n124.458726\nphenotypes_invasive_margin\nendothelial cell\nLevel Three Cell Type\nunknown cell\nunknown cell\nunknown cell\nInvasive Margin",
    "crumbs": [
      "Distance Analysis: skin-confocal-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__skin-confocal-sorgerlab.html#node-analysis",
    "href": "distance_analysis__skin-confocal-sorgerlab.html#node-analysis",
    "title": "Distance Analysis: skin-confocal-sorgerlab",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: skin-confocal-sorgerlab"
    ]
  },
  {
    "objectID": "distance_analysis__skin-confocal-sorgerlab.html#distance-analysis",
    "href": "distance_analysis__skin-confocal-sorgerlab.html#distance-analysis",
    "title": "Distance Analysis: skin-confocal-sorgerlab",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nInvasive Margin\nendothelial cell\nLevel One Cell Type\n36.952338\n27.206913\n1.116692\n164.060518\n\n\n1\nInvasive Margin\nendothelial cell\nLevel Three Cell Type\n36.952338\n27.206913\n1.116692\n164.060518\n\n\n2\nInvasive Margin\nendothelial cell\nLevel Two Cell Type\n36.952338\n27.206913\n1.116692\n164.060518\n\n\n3\nMelanoma In Situ\nendothelial cell\nLevel One Cell Type\n26.642030\n20.559508\n1.857488\n132.248984\n\n\n4\nMelanoma In Situ\nendothelial cell\nLevel Three Cell Type\n26.642030\n20.559508\n1.857488\n132.248984\n\n\n5\nMelanoma In Situ\nendothelial cell\nLevel Two Cell Type\n26.642030\n20.559508\n1.857488\n132.248984\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nInvasive Margin\n12.513268\n9.156887\n2.954969\n47.494145\n\n\n1\nepithelial cell\nMelanoma In Situ\n39.799206\n36.606082\n10.294391\n101.840063\n\n\n2\nimmune cell\nInvasive Margin\n16.909552\n12.588745\n1.837015\n157.657774\n\n\n3\nimmune cell\nMelanoma In Situ\n19.275017\n14.685411\n2.029235\n123.084108\n\n\n4\nunknown cell\nInvasive Margin\n49.094668\n41.982022\n1.116692\n164.060518\n\n\n5\nunknown cell\nMelanoma In Situ\n30.822976\n24.278950\n1.857488\n132.248984\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Invasive Margin:\n  Level One Cell Type  mean_distance\n2        unknown cell      49.094668\n1         immune cell      16.909552\n0     epithelial cell      12.513268\n\nBottom 5 cell types in Invasive Margin:\n  Level One Cell Type  mean_distance\n2        unknown cell      49.094668\n1         immune cell      16.909552\n0     epithelial cell      12.513268\n\nTop 5 cell types in Melanoma In Situ:\n  Level One Cell Type  mean_distance\n0     epithelial cell      39.799206\n2        unknown cell      30.822976\n1         immune cell      19.275017\n\nBottom 5 cell types in Melanoma In Situ:\n  Level One Cell Type  mean_distance\n0     epithelial cell      39.799206\n2        unknown cell      30.822976\n1         immune cell      19.275017\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Invasive Margin:\n  Level One Cell Type  median_distance\n2        unknown cell        41.982022\n1         immune cell        12.588745\n0     epithelial cell         9.156887\n\nBottom 5 cell types in Invasive Margin:\n  Level One Cell Type  median_distance\n2        unknown cell        41.982022\n1         immune cell        12.588745\n0     epithelial cell         9.156887\n\nTop 5 cell types in Melanoma In Situ:\n  Level One Cell Type  median_distance\n0     epithelial cell        36.606082\n2        unknown cell        24.278950\n1         immune cell        14.685411\n\nBottom 5 cell types in Melanoma In Situ:\n  Level One Cell Type  median_distance\n0     epithelial cell        36.606082\n2        unknown cell        24.278950\n1         immune cell        14.685411\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                   mean    std  CV (%)\nUnique Region                         \nInvasive Margin   36.95  31.48    85.2\nMelanoma In Situ  26.64  20.20    75.8\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nimmune cell          17.45  15.16    86.9\nunknown cell         46.02  31.84    69.2\nepithelial cell      38.94  16.67    42.8\n\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(2, 1, figsize=(10, 15)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n# Generate Split Violin Plot\ndef plot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", hue=\"Unique Region\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=True, palette='Spectral', alpha=.9, hue_order=regions)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size, loc='upper right', bbox_to_anchor=(1.15, 1))\n\n    plt.title(f'Split violin plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel('Cell Type', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_plot_violin_cells_per_celltype_split_by_condition_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nabnormal cell\nInvasive Margin\n53.754723\n46.413112\n2.627413\n164.060518\n\n\n1\nabnormal cell\nMelanoma In Situ\n24.330461\n20.336106\n3.055009\n96.398198\n\n\n2\nb cell\nInvasive Margin\n16.133313\n12.748624\n2.619609\n60.873911\n\n\n3\nb cell\nMelanoma In Situ\n13.188554\n9.952653\n3.154159\n54.089116\n\n\n4\ndendritic cell\nInvasive Margin\n18.041947\n13.133429\n2.264001\n157.657774\n\n\n5\ndendritic cell\nMelanoma In Situ\n21.917961\n16.043931\n2.149989\n123.084108\n\n\n6\nkeratinocyte\nInvasive Margin\n12.513268\n9.156887\n2.954969\n47.494145\n\n\n7\nkeratinocyte\nMelanoma In Situ\n39.799206\n36.606082\n10.294391\n101.840063\n\n\n8\nlangerhans cell\nMelanoma In Situ\n19.308598\n19.872430\n5.592065\n32.988076\n\n\n9\nleukocyte\nInvasive Margin\n14.150628\n9.487645\n2.133846\n122.610377\n\n\n10\nmacrophage\nInvasive Margin\n12.816781\n8.688118\n2.553700\n140.116350\n\n\n11\nmacrophage\nMelanoma In Situ\n19.304383\n14.321913\n2.029235\n105.486349\n\n\n12\nmyeloid cell\nInvasive Margin\n36.488780\n39.542376\n4.989397\n56.290766\n\n\n13\nt cell\nInvasive Margin\n16.649191\n12.753359\n1.837015\n156.967478\n\n\n14\nt cell\nMelanoma In Situ\n16.647669\n14.136532\n2.877093\n94.944415\n\n\n15\nunknown cell\nInvasive Margin\n19.548098\n12.104844\n1.116692\n157.564532\n\n\n16\nunknown cell\nMelanoma In Situ\n32.603833\n25.717688\n1.857488\n132.248984\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Invasive Margin:\n  Level Two Cell Type  mean_distance\n0       abnormal cell      53.754723\n6        myeloid cell      36.488780\n8        unknown cell      19.548098\n2      dendritic cell      18.041947\n7              t cell      16.649191\n\nBottom 5 cell types in Invasive Margin:\n  Level Two Cell Type  mean_distance\n7              t cell      16.649191\n1              b cell      16.133313\n4           leukocyte      14.150628\n5          macrophage      12.816781\n3        keratinocyte      12.513268\n\nTop 5 cell types in Melanoma In Situ:\n  Level Two Cell Type  mean_distance\n3        keratinocyte      39.799206\n7        unknown cell      32.603833\n0       abnormal cell      24.330461\n2      dendritic cell      21.917961\n4     langerhans cell      19.308598\n\nBottom 5 cell types in Melanoma In Situ:\n  Level Two Cell Type  mean_distance\n2      dendritic cell      21.917961\n4     langerhans cell      19.308598\n5          macrophage      19.304383\n6              t cell      16.647669\n1              b cell      13.188554\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Invasive Margin:\n  Level Two Cell Type  median_distance\n0       abnormal cell        46.413112\n6        myeloid cell        39.542376\n2      dendritic cell        13.133429\n7              t cell        12.753359\n1              b cell        12.748624\n\nBottom 5 cell types in Invasive Margin:\n  Level Two Cell Type  median_distance\n1              b cell        12.748624\n8        unknown cell        12.104844\n4           leukocyte         9.487645\n3        keratinocyte         9.156887\n5          macrophage         8.688118\n\nTop 5 cell types in Melanoma In Situ:\n  Level Two Cell Type  median_distance\n3        keratinocyte        36.606082\n7        unknown cell        25.717688\n0       abnormal cell        20.336106\n4     langerhans cell        19.872430\n2      dendritic cell        16.043931\n\nBottom 5 cell types in Melanoma In Situ:\n  Level Two Cell Type  median_distance\n4     langerhans cell        19.872430\n2      dendritic cell        16.043931\n5          macrophage        14.321913\n6              t cell        14.136532\n1              b cell         9.952653\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                   mean    std  CV (%)\nUnique Region                         \nInvasive Margin   36.95  31.48    85.2\nMelanoma In Situ  26.64  20.20    75.8\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel Two Cell Type                      \nleukocyte            14.15  14.65   103.5\ndendritic cell       18.93  17.41    92.0\nmacrophage           17.47  15.38    88.0\nunknown cell         26.57  23.34    87.8\nt cell               16.65  13.55    81.4\nb cell               15.89  11.25    70.8\nabnormal cell        52.34  31.67    60.5\nmyeloid cell         36.49  16.89    46.3\nkeratinocyte         38.94  16.67    42.8\nlangerhans cell      19.31   6.59    34.1\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nb cell\nInvasive Margin\n16.133313\n12.748624\n2.619609\n60.873911\n\n\n1\nb cell\nMelanoma In Situ\n13.188554\n9.952653\n3.154159\n54.089116\n\n\n2\ndendritic cell\nInvasive Margin\n18.041947\n13.133429\n2.264001\n157.657774\n\n\n3\ndendritic cell\nMelanoma In Situ\n16.444097\n13.720679\n2.149989\n113.986184\n\n\n4\ndendritic cell:cd11b+\nMelanoma In Situ\n27.756263\n21.201260\n2.307007\n123.084108\n\n\n5\nkeratinocyte\nInvasive Margin\n12.513268\n9.156887\n2.954969\n47.494145\n\n\n6\nkeratinocyte\nMelanoma In Situ\n39.799206\n36.606082\n10.294391\n101.840063\n\n\n7\nlangerhans cell\nMelanoma In Situ\n19.308598\n19.872430\n5.592065\n32.988076\n\n\n8\nleukocyte\nInvasive Margin\n14.150628\n9.487645\n2.133846\n122.610377\n\n\n9\nmacrophage\nInvasive Margin\n12.816781\n8.688118\n2.553700\n140.116350\n\n\n10\nmacrophage\nMelanoma In Situ\n19.304383\n14.321913\n2.029235\n105.486349\n\n\n11\nmyeloid cell\nInvasive Margin\n36.488780\n39.542376\n4.989397\n56.290766\n\n\n12\nt cell\nInvasive Margin\n18.817402\n16.529503\n2.679228\n94.281492\n\n\n13\nt cell\nMelanoma In Situ\n14.458865\n12.312060\n2.877093\n94.944415\n\n\n14\nt cell:cd4+\nInvasive Margin\n16.783732\n12.927457\n1.837015\n156.967478\n\n\n15\nt cell:cd4+\nMelanoma In Situ\n15.262424\n12.078852\n4.083577\n81.476293\n\n\n16\nt cell:memory\nInvasive Margin\n18.882762\n13.510906\n2.649535\n146.884635\n\n\n17\nt cell:memory\nMelanoma In Situ\n19.229108\n17.045629\n3.338121\n69.390221\n\n\n18\nt cell:regulatory\nInvasive Margin\n13.805652\n11.268087\n2.410394\n108.511577\n\n\n19\nt cell:regulatory\nMelanoma In Situ\n15.844224\n12.851213\n3.645520\n56.987161\n\n\n20\ntumor cell\nInvasive Margin\n53.754723\n46.413112\n2.627413\n164.060518\n\n\n21\ntumor cell\nMelanoma In Situ\n24.330461\n20.336106\n3.055009\n96.398198\n\n\n22\nunknown cell\nInvasive Margin\n19.548098\n12.104844\n1.116692\n157.564532\n\n\n23\nunknown cell\nMelanoma In Situ\n32.603833\n25.717688\n1.857488\n132.248984\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Invasive Margin:\n   Level Three Cell Type  mean_distance\n10            tumor cell      53.754723\n5           myeloid cell      36.488780\n11          unknown cell      19.548098\n8          t cell:memory      18.882762\n6                 t cell      18.817402\n\nBottom 5 cell types in Invasive Margin:\n  Level Three Cell Type  mean_distance\n0                b cell      16.133313\n3             leukocyte      14.150628\n9     t cell:regulatory      13.805652\n4            macrophage      12.816781\n2          keratinocyte      12.513268\n\nTop 5 cell types in Melanoma In Situ:\n    Level Three Cell Type  mean_distance\n3            keratinocyte      39.799206\n11           unknown cell      32.603833\n2   dendritic cell:cd11b+      27.756263\n10             tumor cell      24.330461\n4         langerhans cell      19.308598\n\nBottom 5 cell types in Melanoma In Situ:\n  Level Three Cell Type  mean_distance\n1        dendritic cell      16.444097\n9     t cell:regulatory      15.844224\n7           t cell:cd4+      15.262424\n6                t cell      14.458865\n0                b cell      13.188554\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Invasive Margin:\n   Level Three Cell Type  median_distance\n10            tumor cell        46.413112\n5           myeloid cell        39.542376\n6                 t cell        16.529503\n8          t cell:memory        13.510906\n1         dendritic cell        13.133429\n\nBottom 5 cell types in Invasive Margin:\n   Level Three Cell Type  median_distance\n11          unknown cell        12.104844\n9      t cell:regulatory        11.268087\n3              leukocyte         9.487645\n2           keratinocyte         9.156887\n4             macrophage         8.688118\n\nTop 5 cell types in Melanoma In Situ:\n    Level Three Cell Type  median_distance\n3            keratinocyte        36.606082\n11           unknown cell        25.717688\n2   dendritic cell:cd11b+        21.201260\n10             tumor cell        20.336106\n4         langerhans cell        19.872430\n\nBottom 5 cell types in Melanoma In Situ:\n  Level Three Cell Type  median_distance\n1        dendritic cell        13.720679\n9     t cell:regulatory        12.851213\n6                t cell        12.312060\n7           t cell:cd4+        12.078852\n0                b cell         9.952653\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                   mean    std  CV (%)\nUnique Region                         \nInvasive Margin   36.95  31.48    85.2\nMelanoma In Situ  26.64  20.20    75.8\n\nCell Type Variability Analysis (sorted by CV):\n                        mean    std  CV (%)\nLevel Three Cell Type                      \nleukocyte              14.15  14.65   103.5\ndendritic cell         17.83  16.38    91.9\nmacrophage             17.47  15.38    88.0\nunknown cell           26.57  23.34    87.8\nt cell:cd4+            16.74  13.80    82.4\ndendritic cell:cd11b+  27.76  22.23    80.1\nt cell:memory          19.05  14.91    78.3\nt cell:regulatory      14.21  10.79    75.9\nb cell                 15.89  11.25    70.8\nt cell                 14.65   9.80    66.9\ntumor cell             52.34  31.67    60.5\nmyeloid cell           36.49  16.89    46.3\nkeratinocyte           38.94  16.67    42.8\nlangerhans cell        19.31   6.59    34.1\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_violin_cells_per_celltype_split_by_condition(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.",
    "crumbs": [
      "Distance Analysis: skin-confocal-sorgerlab"
    ]
  },
  {
    "objectID": "data_analysis__cell_distribution_across_datasets.html",
    "href": "data_analysis__cell_distribution_across_datasets.html",
    "title": "Data Analysis: Call Distribution Across Datasets",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\n# NOTE: If you are using Plotly within the VS Code Notebook Editor you will need to add a line of code to ensure that your plots can be seen both within VS Code and when rendered to HTML by Quarto.\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\" \n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndata_filedir = \"data-processed-nodes-with-harmonized-cell-types\"\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path):\n    data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# An additional column `Tissue Type` is added to identify the dataset each row belongs to which comes from the subdirectory name in `data_filedir` that the file belongs to. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename befrore the `-nodes.csv` suffix.\ndef read_all_datasets(basepath, data_filedir):\n    all_files = []\n    for subdir, dirs, files in os.walk(os.path.join(basepath, data_filedir)):\n        for file in files:\n            if file.endswith(\"-nodes.csv\"):\n                file_path = os.path.join(subdir, file)\n                tissue_type = os.path.basename(subdir)\n                dataset_name = file.replace(\"-nodes.csv\", \"\")\n                df = load_data(file_path)\n                df['Tissue Type'] = tissue_type\n                df['Dataset'] = dataset_name\n                all_files.append(df)\n\n    merged = pd.concat(all_files, ignore_index=True)\n    # reset index after concatenation\n    # merged.reset_index(drop=True, inplace=True)\n    return merged\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")\nprint(len(os.listdir(os.path.join(basepath, data_filedir))))\n\n14\n# Create destination directory. Overwrite if it exists.\nif os.path.exists(os.path.join(basepath, figures_output_dir)):\n    shutil.rmtree(os.path.join(basepath, figures_output_dir))\n    print(f\"Directory '{figures_output_dir}' already exists and has been removed. New directory will be created.\")\nelse:\n    print(f\"Directory '{figures_output_dir}' does not exist and will be created.\")\nos.makedirs(os.path.join(basepath, figures_output_dir), exist_ok=False)\n\nDirectory 'generated-figures' already exists and has been removed. New directory will be created.",
    "crumbs": [
      "Data Analysis: Call Distribution Across Datasets"
    ]
  },
  {
    "objectID": "data_analysis__cell_distribution_across_datasets.html#per-dataset-cell-summary",
    "href": "data_analysis__cell_distribution_across_datasets.html#per-dataset-cell-summary",
    "title": "Data Analysis: Call Distribution Across Datasets",
    "section": "Per Dataset Cell Summary",
    "text": "Per Dataset Cell Summary\n\n# Call the function to read all datasets\ndf_all_data = read_all_datasets(basepath, data_filedir)\n\n\n# Print the first few rows of the DataFrame\ndf_all_data.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nTissue Type\nDataset\nz\n\n\n\n\n0\n1503.64128\n1278.32154\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\nB004_Ascending\nNaN\n\n\n1\n1958.05496\n1553.46072\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\nB004_Ascending\nNaN\n\n\n2\n2290.93940\n1187.36332\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\nB004_Ascending\nNaN\n\n\n3\n2863.48554\n891.08862\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\nB004_Ascending\nNaN\n\n\n4\n2563.43664\n1468.54122\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\nB004_Ascending\nNaN\n\n\n\n\n\n\n\n\n# Print the total number of unique datasets per each tissue type\nprint(\"Total number of unique datasets per each tissue type:\")\nprint(df_all_data.groupby('Tissue Type')['Dataset'].nunique())\n\n# Print the sum of number of unique datasets overall.\nprint(\"\\nTotal number of unique datasets overall:\")\nprint(df_all_data['Dataset'].nunique())\n\nTotal number of unique datasets per each tissue type:\nTissue Type\nbonemarrow-codex-chop                       20\ncolon-cycif-sorgerlab                       25\ncolon-xenium-stanford                       29\nesophagus-codex-stanford                     1\nintestine-codex-stanford                    64\nlung-codex-urmc                              2\nlymphnode-codex-yale                         5\nmaternalfetalinterface-mibitof-stanford    209\noralcavity-codex-czi                        13\npancreas-geomx-ufl                          12\nskin-celldive-ge                            10\nskin-confocal-sorgerlab                      2\nspleen-codex-ufl                             6\ntonsil-codex-stanford                        1\nName: Dataset, dtype: int64\n\nTotal number of unique datasets overall:\n399\n\n\n\n# Print the total number of cells per tissue type\nprint(\"Total number of cells per tissue type:\")\ntissue_counts = df_all_data.groupby('Tissue Type')['Original Cell Type'].count()\nfor tissue, count in tissue_counts.items():\n    print(f\"{tissue}: {count:,}\")\n\n# Print the sum of number of cells overall. Format the output number to be more readable.\nprint(\"\\nTotal number of cells overall:\")\nprint(f\"{df_all_data['Original Cell Type'].count():,}\")\n\nTotal number of cells per tissue type:\nbonemarrow-codex-chop: 1,214,088\ncolon-cycif-sorgerlab: 12,758,141\ncolon-xenium-stanford: 2,639,215\nesophagus-codex-stanford: 45,958\nintestine-codex-stanford: 2,512,185\nlung-codex-urmc: 1,209,309\nlymphnode-codex-yale: 8,918,845\nmaternalfetalinterface-mibitof-stanford: 477,747\noralcavity-codex-czi: 1,412,189\npancreas-geomx-ufl: 14,891,875\nskin-celldive-ge: 48,323\nskin-confocal-sorgerlab: 55,255\nspleen-codex-ufl: 992,398\ntonsil-codex-stanford: 173,968\n\nTotal number of cells overall:\n47,349,496\n\n\n\n# Print the total number of unique cell types per tissue type. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per tissue type:\")\n\n# Create a summary table\ntissue_types = df_all_data['Tissue Type'].unique()\ncolumns = ['Original Cell Type', 'Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']\n\n# Create a dictionary to store results\nresults = {}\nfor tissue in tissue_types:\n    tissue_data = df_all_data[df_all_data['Tissue Type'] == tissue]\n    results[tissue] = {}\n    for col in columns:\n        results[tissue][col] = tissue_data[col].nunique()\n\n# Convert to DataFrame for better formatting\nsummary_df = pd.DataFrame(results).T\nsummary_df = summary_df[columns]  # Reorder columns\n\n# Add a row for \"Overall Unique Cell Types\" which contains the total number of unique cell types across all tissue types from df_all_data for each column.\noverall_unique = df_all_data[columns].nunique()\nsummary_df.loc['Total Unique Cell Types'] = overall_unique\n\nsummary_df\n\nTotal number of unique cell types per tissue type:\n\n\n\n\n\n\n\n\n\nOriginal Cell Type\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\n\n\n\n\nintestine-codex-stanford\n25\n25\n17\n5\n\n\ntonsil-codex-stanford\n10\n10\n8\n5\n\n\nesophagus-codex-stanford\n12\n12\n11\n5\n\n\ncolon-xenium-stanford\n41\n38\n20\n6\n\n\nlymphnode-codex-yale\n34\n29\n10\n3\n\n\nmaternalfetalinterface-mibitof-stanford\n26\n23\n11\n5\n\n\noralcavity-codex-czi\n39\n28\n20\n6\n\n\npancreas-geomx-ufl\n4\n4\n4\n3\n\n\nskin-celldive-ge\n8\n8\n4\n3\n\n\nskin-confocal-sorgerlab\n15\n15\n11\n4\n\n\nspleen-codex-ufl\n12\n12\n9\n3\n\n\nlung-codex-urmc\n54\n20\n17\n7\n\n\nbonemarrow-codex-chop\n37\n33\n22\n6\n\n\ncolon-cycif-sorgerlab\n21\n21\n7\n5\n\n\nTotal Unique Cell Types\n295\n161\n57\n8\n\n\n\n\n\n\n\n\n# Extract the following columns from df_all_data: Original Cell Type, Level Three Cell Type, Level Three CL Label, Level Three CL ID, CL_Match/3, Level Two Cell Type, Level Two CL Label, Level Two CL ID, CL_Match/2, Level One Cell Type, Level One CL Label, Level One CL ID, CL_Match/1.\n# Create a table containing these columns but have the rows be unique combinations of these columns.\n\ncolumns = [\n    'Original Cell Type',\n    'Level Three Cell Type',\n    'Level Three CL Label',\n    'Level Three CL ID',\n    'CL_Match/3',\n    'Level Two Cell Type',\n    'Level Two CL Label',\n    'Level Two CL ID',\n    'CL_Match/2',\n    'Level One Cell Type',\n    'Level One CL Label',\n    'Level One CL ID',\n    'CL_Match/1',\n    'Tissue Type',\n]\n\n# Extract the unique combinations of these columns from df_all_data. Sort the DataFrame by 'Level Three Cell Type' in ascending order.\nunique_combinations = df_all_data[columns].drop_duplicates().sort_values(by='Level Three Cell Type', ascending=True)\n\nunique_combinations.reset_index(drop=True, inplace=True)\n\nunique_combinations\n\n\n\n\n\n\n\n\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nTissue Type\n\n\n\n\n0\nAcinar Cells\nacinar cell of salivary gland\nacinar cell of salivary gland\nCL:0002623\nskos:exactMatch\ngland epithelium cell\nglandular secretory epithelial cell\nCL:0000150\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n1\nAcini\nacinar cell of salivary gland\nacinar cell of salivary gland\nCL:0002623\nskos:exactMatch\ngland epithelium cell\nglandular secretory epithelial cell\nCL:0000150\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n2\nAdipocytes\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\noralcavity-codex-czi\n\n\n3\nAdipocytes\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n4\nAdipocyte\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n5\nB-Cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n6\nB\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n7\nB cell\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n8\nB cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n9\nB Cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n10\nB cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n11\nB\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n12\nB cells, red pulp\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n13\nB_cell_1\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n14\nB_activated\nb cell:activated\nB cell:activated\nCL:0000236\nskos:narrowMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n15\nFol B cells\nb cell:follicular\nfollicular B cell\nCL:0000843\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n16\nB_GC_DZ\nb cell:germinal center\ngerminal center B cell\nCL:0000844\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n17\nB_GC_LZ\nb cell:germinal center\ngerminal center B cell\nCL:0000844\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n18\nB_GC_prePB\nb cell:germinal center pre-plasmablast\ngerminal center B cell:pre-plasmablast\nCL:0000844\nskos:narrowMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n19\nImmature_B_Cell\nb cell:immature\nimmature B cell\nCL:0000816\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n20\nB_IFN\nb cell:interferon\nB cell:interferon-stimulated\nCL:0000236\nskos:narrowMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n21\nB_mem\nb cell:memory\nmemory B cell\nCL:0000787\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n22\nMemory B\nb cell:memory\nmemory B cell\nCL:0000787\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n23\nB_naive\nb cell:naive\nnaive B cell\nCL:0000788\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n24\nNaive B\nb cell:naive\nnaive B cell\nCL:0000788\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n25\nB_preGC\nb cell:pre-germinal center\nB cell:pre-germinal center\nCL:0000236\nskos:narrowMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n26\nB_Cycling\nb cell:proliferating\ncycling B cell\nCL:4033068\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n27\nBeta cell\nbeta cell:pancreatic\ntype B pancreatic cell\nCL:0000169\nskos:exactMatch\nbeta cell\ntype B pancreatic cell\nCL:0000169\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\npancreas-geomx-ufl\n\n\n28\nCD34+ CD61+\ncell:cd34+ cd61+\nleukocyte:cd34-positive cd61-positive\nCL:0000738\nskos:narrowMatch\nmegakaryocyte\nmegakaryocyte\nCL:0000556\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n29\nKi67 proliferating\ncell:proliferating\ncell:proliferating\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nspleen-codex-ufl\n\n\n30\nDC\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n31\nDendritic cells\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n32\nDC\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n33\nDC\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n34\nDendritic Cells\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n35\nCD11B+ CD11C- cells\ndendritic cell:cd11b+\nCD11b-positive dendritic cell\nCL:0002465\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n36\nDC_cDC1\ndendritic cell:conventional 1\nCD141-positive myeloid dendritic cell\nCL:0002394\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n37\nDC_cDC2\ndendritic cell:conventional 2\nCD1c-positive myeloid dendritic cell\nCL:0002399\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n38\nFDC\ndendritic cell:follicular\nfollicular dendritic cell\nCL:0000442\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nlymphnode-codex-yale\n\n\n39\nDC_CCR7+\ndendritic cell:migratory\nmigratory dendtritic cell\nCL:4047054\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n40\nDC_pDC\ndendritic cell:plasmacytoid\nplasmacytoid dendritic cell\nCL:0000784\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n41\npDC\ndendritic cell:plasmacytoid\nplasmacytoid dendritic cell\nCL:0000784\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n42\nEndosteal\nendosteal cell\nendosteal cell\nCL:0002157\nskos:exactMatch\nskeletal stromal cell\nbone cell:stromal\nCL:0001035\nskos:narrowMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n43\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlymphnode-codex-yale\n\n\n44\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nskin-celldive-ge\n\n\n45\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n46\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\npancreas-geomx-ufl\n\n\n47\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nintestine-codex-stanford\n\n\n48\nEndo_p\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlung-codex-urmc\n\n\n49\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ntonsil-codex-stanford\n\n\n50\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ncolon-xenium-stanford\n\n\n51\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n52\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n53\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nesophagus-codex-stanford\n\n\n54\nENDO_SMC\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlung-codex-urmc\n\n\n55\nEndo_2\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlung-codex-urmc\n\n\n56\nENDO_1\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlung-codex-urmc\n\n\n57\nAEC\nendothelial cell of artery\nendothelial cell of artery\nCL:1000413\nskos:exactMatch\nendothelial cell of artery\nendothelial cell of artery\nCL:1000413\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n58\nCAP_ENDO\nendothelial cell of capillary\ncapillary endothelial cell\nCL:0002144\nskos:exactMatch\nendothelial cell of capillary\ncapillary endothelial cell\nCL:0002144\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlung-codex-urmc\n\n\n59\nPodoplanin\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nspleen-codex-ufl\n\n\n60\nLymphatic endothelial cells\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ncolon-xenium-stanford\n\n\n61\nLymphatic\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nintestine-codex-stanford\n\n\n62\nLymphatic_Endothelium\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlung-codex-urmc\n\n\n63\nlymphatic Endothelium\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlung-codex-urmc\n\n\n64\nLymphatic Endothelial Cells\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\noralcavity-codex-czi\n\n\n65\nLymphatic Vascular Cells\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell of lymphatic vessel\nendothelial cell of lymphatic vessel\nCL:0002138\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\noralcavity-codex-czi\n\n\n66\nSEC\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n67\nSinusoidal cells\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell of sinusoid\nendothelial cell of sinusoid\nCL:0002262\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nspleen-codex-ufl\n\n\n68\nVascular Endothelial Cells\nendothelial cell of vascular tree\nendothelial cell of vascular tree\nCL:0002139\nskos:exactMatch\nendothelial cell of vascular tree\nendothelial cell of vascular tree\nCL:0002139\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\noralcavity-codex-czi\n\n\n69\nblood endothelial\nendothelial cell of vascular tree\nendothelial cell of vascular tree\nCL:0002139\nskos:exactMatch\nendothelial cell of vascular tree\nendothelial cell of vascular tree\nCL:0002139\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nspleen-codex-ufl\n\n\n70\nVEC Progen\nendothelial cell of vascular tree\nendothelial cell of vascular tree\nCL:0002139\nskos:exactMatch\nendothelial cell of vascular tree\nendothelial cell of vascular tree\nCL:0002139\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\noralcavity-codex-czi\n\n\n71\nEnterocytes\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n72\nEnterocyte\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n73\nCD57+ Enterocyte\nenterocyte:cd57+\nCD57-positive enterocyte\nCL:4033092\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n74\nCD66+ Enterocyte\nenterocyte:cd66+\nenterocyte:cd66-positive\nCL:0000584\nskos:narrowMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n75\nImmature Enterocytes\nenterocyte:immature\nenterocyte:immature\nCL:0000584\nskos:narrowMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n76\nMUC1+ Enterocyte\nenterocyte:muc1+\nenterocyte:muc1-positive\nCL:0000584\nskos:narrowMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n77\nEnterocyte Progenitors\nenterocyte:progenitor\nenterocyte:progenitor\nCL:0000584\nskos:narrowMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n78\nEnteroendocrine\nenteroendocrine cell\nenteroendocrine cell\nCL:0000164\nskos:exactMatch\nendocrine cell\nendocrine cell\nCL:0000163\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n79\nBest4+ Enterocytes\nenteroycte:best4+\nBEST4+ enterocyte\nCL:4030026\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n80\nEpithelial\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n81\nIonocytes\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n82\nMelanocytes\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n83\nLung_Epithelial_1\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n84\nLung_Epithelial_4\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n85\nMerkel Cells\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n86\nLung_Epithelial_p\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n87\nDucts\nepithelial cell:ductal\nduct epithelial cell\nCL:0000068\nskos:exactMatch\ngland epithelium cell\nepithelial cell:gland\nCL:0000066\nskos:narrowMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n88\nDuctal Epithelial Cells\nepithelial cell:ductal\nduct epithelial cell\nCL:0000068\nskos:exactMatch\ngland epithelium cell\nepithelial cell:gland\nCL:0000066\nskos:narrowMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n89\nDuctal cell\nepithelial cell:ductal\nduct epithelial cell\nCL:0000068\nskos:exactMatch\ngland epithelium cell\nepithelial cell:gland\nCL:0000066\nskos:narrowMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\npancreas-geomx-ufl\n\n\n90\nKi67+ Tumor/Epithelial\nepithelial cell:ki67+ proliferating tumor\nepithelial cell:ki67-positive proliferating tumor\nCL:0000066\nskos:narrowMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n91\nPDL1+ Tumor/Epithelial\nepithelial cell:pdl1+ tumor\nepithelial cell:pdl1-positive tumor\nCL:0000066\nskos:narrowMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n92\nSecretory_epithelial\nepithelial cell:secretory\nsecretory epithelial cell\nCL:1100001\nskos:exactMatch\nsecretory cell of esophagus\nglandular cell of esophagus\nCL:0002657\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nesophagus-codex-stanford\n\n\n93\nErythroblast\nerythroblast\nerythroblast\nCL:0000765\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n94\nMEP/Early Erythroblast\nerythroblast:basophilic\nbasophilic erythroblast\nCL:0000549\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n95\nErythroid\nerythroid lineage cell\nerythroid lineage cell\nCL:0000764\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n96\nFibroblasts\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\noralcavity-codex-czi\n\n\n97\nFibroblasts\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n98\nCancer Associated Fibroblasts\nfibroblast:cancer associated\nfibroblast:cancer associated\nCL:0000057\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n99\nCrypt Fibroblasts 1\nfibroblast:crypt 1\ncrypt-top fibroblast:1\nCL:4052009\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n100\nCrypt Fibroblasts 2\nfibroblast:crypt 2\ncrypt-top fibroblast:2\nCL:4052009\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n101\nCrypt Fibroblasts 3\nfibroblast:crypt 3\ncrypt-top fibroblast:3\nCL:4052009\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n102\nCrypt Fibroblasts 4\nfibroblast:crypt 4\ncrypt-top fibroblast:4\nCL:4052009\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n103\nVillus Fibroblasts WNT5B+\nfibroblast:wnt5b+ villus\nfibroblast:wnt5b+ villus\nCL:0000057\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n104\nGlandular_epi\nglandular cell of esophagus\nglandular cell of esophagus\nCL:0002657\nskos:exactMatch\ngland epithelium cell\nglandular secretory epithelial cell\nCL:0000150\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nesophagus-codex-stanford\n\n\n105\nGlandular\nglandular cell of placenta\nglandular secretory epithelial cell:placenta\nCL:0000150\nskos:narrowMatch\ngland epithelium cell\nglandular secretory epithelial cell\nCL:0000150\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n106\nGlia\nglial cell\nglial cell\nCL:0000125\nskos:exactMatch\nneuroglial cell\nglial cell\nCL:0000125\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\ncolon-xenium-stanford\n\n\n107\nGlial/Neuron\nglial cell/neuron\nneural cell:glial/neuron\nCL:0002319\nskos:narrowMatch\nneuroglial cell/neuron\nneural cell:neuroglial/neuron\nCL:0002319\nskos:narrowMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\noralcavity-codex-czi\n\n\n108\nGC\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n109\nGoblet\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n110\nGoblet\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n111\nImmature Goblet\ngoblet cell:immature\ngoblet cell:immature\nCL:0000160\nskos:narrowMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n112\nGMP\ngranulocyte monocyte progenitor cell\ngranulocyte monocyte progenitor cell\nCL:0000557\nskos:exactMatch\nmyeloid precursor\ncommon myeloid progenitor\nCL:0000049\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n113\nGMP/Myeloblast\ngranulocyte monocyte progenitor cell/myeloblast\nmyeloid lineage restricted progenitor cell:gra...\nCL:0000839\nskos:narrowMatch\nmyeloid precursor\ncommon myeloid progenitor\nCL:0000049\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n114\nSPINK2+ HSPC\nhematopoietic stem and progenitor cell:spink2+\nhematopoietic multipotent progenitor cell:spin...\nCL:0000837\nskos:narrowMatch\nhematopoietic stem and progenitor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n115\nHSC\nhematopoietic stem cell\nhematopoietic stem cell\nCL:0000037\nskos:exactMatch\nstem cell\nstem cell\nCL:0000034\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n116\nHSPC\nhematopoietic stem cell\nhematopoietic stem cell\nCL:0000037\nskos:exactMatch\nstem cell\nstem cell\nCL:0000034\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n117\nPlacental_Mac\nhofbauer cell\nHofbauer cell\nCL:3000001\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n118\nB_cell_macrophage_p?\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n119\nICC\ninterstitial cell of cajal\ninterstitial cell of Cajal\nCL:0002088\nskos:exactMatch\nneurecto-epithelial cell\nneurecto-epithelial cell\nCL:0000710\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nintestine-codex-stanford\n\n\n120\nKeratinocyte\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n121\nBasal Keratincytes\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n122\nSuprabasal Keratinocytes\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n123\nkeratinocytes\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n124\nDDB2\nkeratinocyte:ddb2+\nkeratinocyte:ddb2-positive\nCL:0000312\nskos:narrowMatch\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nskin-celldive-ge\n\n\n125\nKI67\nkeratinocyte:ki67+ proliferating\nkeratinocyte:ki67-positive proliferating\nCL:0000312\nskos:narrowMatch\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nskin-celldive-ge\n\n\n126\nP53\nkeratinocyte:p53+\nkeratinocyte:p53-positive\nCL:0000312\nskos:narrowMatch\nkeratinocyte\nkeratinocyte\nCL:0000312\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nskin-celldive-ge\n\n\n127\nLangerhan cells\nlangerhans cell\nLangerhans cell\nCL:0000453\nskos:exactMatch\nlangerhans cell\nLangerhans cell\nCL:0000453\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n128\nLangerhans Cells\nlangerhans cell\nLangerhans cell\nCL:0000453\nskos:exactMatch\nlangerhans cell\nLangerhans cell\nCL:0000453\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n129\nLeukocyte\nleukocyte\nleukocyte\nCL:0000738\nskos:exactMatch\nleukocyte\nleukocyte\nCL:0000738\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n130\nOther Immune\nleukocyte\nleukocyte\nCL:0000738\nskos:exactMatch\nleukocyte\nleukocyte\nCL:0000738\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n131\nCD7+ Immune\nlymphocyte:cd7+\nCD7-positive lymphoid progenitor cell\nCL:0001028\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n132\nDN Lymphocyte\nlymphocyte:double-negative\ndouble negative thymocyte\nCL:0002489\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n133\nDP Lymphocyte\nlymphocyte:double-positive alpha-beta\ndouble-positive, alpha-beta thymocyte\nCL:0000809\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n134\nLymphocyte(III)\nlymphocyte:iii\nlymphocyte:III\nCL:0000542\nskos:narrowMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n135\nPDL1+ lymphocyte\nlymphocyte:pdl1+\nlymphocyte:pdl1-positive\nCL:0000542\nskos:narrowMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n136\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n137\nILC\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n138\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nesophagus-codex-stanford\n\n\n139\nILCs\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n140\nCLP\nlymphoid progenitor cell:common\ncommon lymphoid progenitor\nCL:0000051\nskos:exactMatch\nprogenitor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n141\nMacrophages_M2\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n142\nM2 Macrophage\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n143\nMacrophage\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n144\nmacrophage_CD1c+_myeloidDC\nmacrophage\nalveolar macrophage\nCL:0000583\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n145\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n146\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n147\nCD68\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-celldive-ge\n\n\n148\nMacrophage\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n149\nmacrophage\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n150\nmacrophage_3\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n151\nmacrophage_2\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n152\nMacrophages_M1\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n153\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n154\nmacrophage_p\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n155\nMac1a\nmacrophage:1a\nmacrophage:1a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n156\nMac1b\nmacrophage:1b\nmacrophage:1b\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n157\nMac2a\nmacrophage:2a\nmacrophage:2a\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n158\nMac2b\nmacrophage:2b\nmacrophage:2b\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n159\nMac2c\nmacrophage:2c\nmacrophage:2c\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n160\nMacrophage(I)\nmacrophage:i\nmacrophage:I\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n161\nMacrophage(II)\nmacrophage:ii\nmacrophage:II\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n162\nMacrophage(III)\nmacrophage:iii\nmacrophage:III\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n163\nM1 Macrophage\nmacrophage:inflammatory\ninflammatory macrophage\nCL:0000863\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n164\nlung Intersitial macrophage\nmacrophage:interstitial\nlung interstitial macrophage\nCL:4033043\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n165\nMacrophage(IV)\nmacrophage:iv\nmacrophage:IV\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n166\nPDL1+ Macrophage\nmacrophage:pdl1+\nmacrophage:pdl1-positive\nCL:0000235\nskos:narrowMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n167\nMast\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n168\nMast Cells\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n169\nMast\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n170\nMast\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n171\nMast cell\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n172\nmegakaryocyte\nmegakaryocyte\nmegakaryocyte\nCL:0000556\nskos:exactMatch\nmegakaryocyte\nmegakaryocyte\nCL:0000556\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nlung-codex-urmc\n\n\n173\nGATA1pos_Mks\nmegakaryocyte:gata1+\nmegakaryocyte:gata1-positive\nCL:0000556\nskos:narrowMatch\nmegakaryocyte\nmegakaryocyte\nCL:0000556\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n174\nGATA1neg_Mks\nmegakaryocyte:gata1-\nmegakaryocyte:gata1-negative\nCL:0000556\nskos:narrowMatch\nmegakaryocyte\nmegakaryocyte\nCL:0000556\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n175\nAdipo-MSC\nmesenchymal stem cell of adipose tissue\nmesenchymal stem cell of adipose tissue\nCL:0002570\nskos:exactMatch\nmesenchymal stem cell\nmesenchymal stem cell\nCL:0000134\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n176\nTHY1+ MSC\nmesenchymal stem/stromal cell:thy1+\nmesenchymal stem cell:thy1-positive\nCL:0000134\nskos:narrowMatch\nmesenchymal stem/stromal cell\nmesenchymal stem cell\nCL:0000134\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n177\nLung_Epithelil_2_CD4+_T_cell\nmixed t cell/epithelial cell population\ncell:mixed t cell/epithelial cell population\nCL:0000000\nskos:narrowMatch\nmixed t cell/epithelial cell population\nT cell/epithelial cell\nCL:0000084/CL:0000066\nskos:narrowMatch\nmixed immune/epithelial cell population\nT cell/epithelial cell\nCL:0000084/CL:0000066\nskos:narrowMatch\nlung-codex-urmc\n\n\n178\nMonocytes\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n179\nMonocytes\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n180\nMonocyte-Macrophage\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n181\nNon-Classical Monocyte\nmonocyte:non-classical\nnon-classical monocyte\nCL:0000875\nskos:exactMatch\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n182\nMural Cells\nmural cell\nmural cell\nCL:0008034\nskos:exactMatch\nperivascular cell\nperivascular cell\nCL:4033054\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\noralcavity-codex-czi\n\n\n183\nmuscle\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n184\nSkeletal Myocytes\nmuscle cell:skeletal\ncell of skeletal muscle\nCL:0000188\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\noralcavity-codex-czi\n\n\n185\nSmooth muscle\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nintestine-codex-stanford\n\n\n186\nSMC_1\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nlung-codex-urmc\n\n\n187\nVSMC\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nlymphnode-codex-yale\n\n\n188\nSMC_2\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nlung-codex-urmc\n\n\n189\nSmoothMuscle\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil-codex-stanford\n\n\n190\nsmooth muscle_2\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nlung-codex-urmc\n\n\n191\nSmoothMuscle\nmuscle cell:smooth\nsmooth muscle cell of the esophagus\nCL:0002599\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nesophagus-codex-stanford\n\n\n192\nVSMC\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n193\nsmooth muscle 1\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nlung-codex-urmc\n\n\n194\nNPM1 Mutant Blast\nmutant blast:npm1\nNaN\nNaN\nNaN\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n195\nMyeloid\nmyeloid cell\nmyeloid cell\nCL:0000763\nskos:exactMatch\nmyeloid cell\nmyeloid cell\nCL:0000763\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n196\nMyeloid cells\nmyeloid cell\nmyeloid cell\nCL:0000763\nskos:exactMatch\nmyeloid cell\nmyeloid cell\nCL:0000763\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n197\nIntermediate Myeloid\nmyeloid cell:intermediate\nmyeloid cell:intermediate\nCL:0000763\nskos:narrowMatch\nmyeloid precursor\ncommon myeloid progenitor\nCL:0000049\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n198\nMature Myeloid\nmyeloid cell:mature\nmyeloid cell:mature\nCL:0000763\nskos:narrowMatch\nmyeloid cell\nmyeloid cell\nCL:0000763\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n199\nEarly Myeloid Progenitor\nmyeloid progenitor cell:common\ncommon myeloid progenitor\nCL:0000049\nskos:exactMatch\nprogenitor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n200\nMyoepithelial Cells\nmyoepithelial cell\nmyoepithelial cell\nCL:0000185\nskos:exactMatch\nmyoepithelial cell\nmyoepithelial cell\nCL:0000185\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\noralcavity-codex-czi\n\n\n201\nMuscle/Fibroblast\nmyofibroblast\nmyofibroblast cell\nCL:0000186\nskos:exactMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n202\nMyofibroblasts\nmyofibroblast\nmyofibroblast cell\nCL:0000186\nskos:exactMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n203\nmyofibroblast\nmyofibroblast\nmyofibroblast cell\nCL:0000186\nskos:exactMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\noralcavity-codex-czi\n\n\n204\nMyofibroblasts/Smooth Muscle 1\nmyofibroblast cell:smooth muscle 1\nmyofibroblast cell:smooth muscle-like 1\nCL:0000186\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n205\nMyofibroblasts/Smooth Muscle 2\nmyofibroblast cell:smooth muscle 2\nmyofibroblast cell:smooth muscle-like 2\nCL:0000186\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n206\nMyofibroblasts/Smooth Muscle 3\nmyofibroblast cell:smooth muscle 3\nmyofibroblast cell:smooth muscle-like 3\nCL:0000186\nskos:narrowMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n207\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n208\nNK1\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n209\nNK2\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n210\nNK3\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n211\nNK4\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n212\nNK Cells\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n213\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n214\nTumor/Epithelial\nneoplastic cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n215\nNeuroendocrine\nneuroendocrine cell\nneuroendocrine cell\nCL:0000165\nskos:exactMatch\nendocrine cell\nendocrine cell\nCL:0000163\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n216\nNerve\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\nesophagus-codex-stanford\n\n\n217\nNeurons\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\ncolon-xenium-stanford\n\n\n218\nNerve\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\ntonsil-codex-stanford\n\n\n219\nNerve\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\nintestine-codex-stanford\n\n\n220\nNeutrophil\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n221\nneutrophil_2\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n222\nNeutrophils\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n223\nneutrophil\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n224\nNeutrophils/Monocytes\nneutrophil/monocyte\nmyeloid leukocyte:neutrophil/monocyte\nCL:0000766\nskos:narrowMatch\nneutrophil\nneutrophil\nCL:0000775\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n225\nPaneth\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n226\nPaneth\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nesophagus-codex-stanford\n\n\n227\nPericytes\npericyte\npericyte\nCL:0000669\nskos:exactMatch\npericyte\npericyte\nCL:0000669\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n228\nPlasma Cells\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n229\nB_plasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n230\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n231\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n232\nPlasma Cells\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n233\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n234\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nesophagus-codex-stanford\n\n\n235\nAT1_1\npneumocyte:type 1\npulmonary alveolar type 1 cell\nCL:0002062\nskos:exactMatch\ntype 1 pneumocyte\npulmonary alveolar type 1 cell\nCL:0002062\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n236\nAT1 _2\npneumocyte:type 1\npulmonary alveolar type 1 cell\nCL:0002062\nskos:exactMatch\ntype 1 pneumocyte\npulmonary alveolar type 1 cell\nCL:0002062\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n237\nAT2_p\npneumocyte:type 2\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\ntype 2 pneumocyte\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n238\nAT2_2\npneumocyte:type 2\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\ntype 2 pneumocyte\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n239\nAT2\npneumocyte:type 2\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\ntype 2 pneumocyte\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n240\nAT2_1\npneumocyte:type 2\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\ntype 2 pneumocyte\npulmonary alveolar type 2 cell\nCL:0002063\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nlung-codex-urmc\n\n\n241\nSchwann Cells\nschwann cell\nSchwann cell\nCL:0002573\nskos:exactMatch\nneuroglial cell\nglial cell\nCL:0000125\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n242\nSquamous_epithelial\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nesophagus-codex-stanford\n\n\n243\nSquamous_epithelial\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ntonsil-codex-stanford\n\n\n244\nStem\nstem cell\nstem cell\nCL:0000034\nskos:exactMatch\nstem cell\nstem cell\nCL:0000034\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n245\nStroma\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nesophagus-codex-stanford\n\n\n246\nStroma\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nintestine-codex-stanford\n\n\n247\nStroma\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil-codex-stanford\n\n\n248\nPDPN\nstromal cell:podoplanin+\nstromal cell:podoplanin-positive\nCL:0000499\nskos:narrowMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nesophagus-codex-stanford\n\n\n249\nPDPN\nstromal cell:podoplanin+\nstromal cell:podoplanin-positive\nCL:0000499\nskos:narrowMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil-codex-stanford\n\n\n250\nT\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nesophagus-codex-stanford\n\n\n251\ngd T Cells\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n252\nT\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n253\nCD8 T\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n254\nCD8+_T_cell_CD_4+_T_cell\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n255\nCD4 T Cells\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n256\nCD4 T\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n257\nCD4+ T cell\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n258\nTh\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n259\nT helper\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n260\nT-Helper\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-celldive-ge\n\n\n261\nCD4+ T-Cell\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n262\nCD4+\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n263\nCD4+_T_cell_2\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n264\nCD4+_T_cell_3\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n265\nCD4_+_Tcell/macrophage\nt cell:cd4+ alpha-beta\nlung resident memory CD4-positive, alpha-beta ...\nCL:4033038\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n266\nCD4+_T_cell_1\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n267\nCD4+ T cell\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n268\nCD4T\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n269\nT_CD4+\nt cell:cd4+ alpha-beta effector\neffector CD4-positive, alpha-beta T cell\nCL:0001044\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n270\nCD4 Memory T cells\nt cell:cd4+ alpha-beta memory\nCD4-positive, alpha-beta memory T cell\nCL:0000897\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n271\nT_CD4+_naive\nt cell:cd4+ alpha-beta naive thymus-derived\nnaive thymus-derived CD4-positive, alpha-beta ...\nCL:0000895\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n272\nPD1+ T helper\nt cell:cd4+ pdl1+\nCD4-positive, alpha-beta T cell:pdl1-positive\nCL:0000624\nskos:narrowMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n273\nT-Killer\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-celldive-ge\n\n\n274\nCD8+ T cell_2\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n275\nCD8 T Cells\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n276\nCD8+_T_cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n277\nT_CD8+_cytotoxic\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n278\nT_CD8+_naive\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n279\nTc\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n280\nCD8 + T cell_1\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n281\nCD8+_T_cell_3\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n282\nTc cell\nt cell:cd8+\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n283\nCD8+_T_cell_2\nt cell:cd8+\nlung resident memory CD8-positive, alpha-beta ...\nCL:4033039\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n284\nCD8+ T\nt cell:cd8+ alpha-beta\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n285\nCD8T\nt cell:cd8+ alpha-beta\nCD8-positive, alpha-beta T cell\nCL:0000625\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n286\nCD8+\nt cell:cd8+ alpha-beta effector memory\neffector memory CD8-positive, alpha-beta T cell\nCL:0000913\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n287\nCD8 Memory T cells\nt cell:cd8+ alpha-beta memory\nCD8-positive, alpha-beta memory T cell\nCL:0000909\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n288\nCD8+ T-Cell\nt cell:cd8+ alpha-beta regulatory\nCD8-positive, alpha-beta regulatory T cell\nCL:0000795\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n289\nT_CD8+_CD161+\nt cell:cd8+ cd161+\nCD8-positive, alpha-beta T cell:CD161-positive\nCL:0000625\nskos:narrowMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n290\nPD1+ Tc\nt cell:cd8+ pdl1+\nCD8-positive, alpha-beta T cell:pdl1-positive\nCL:0000625\nskos:narrowMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n291\nT_CD4+_TfH_GC\nt cell:follicular helper\nT follicular helper cell\nCL:0002038\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n292\nT_CD4+_TfH\nt cell:follicular helper\nT follicular helper cell\nCL:0002038\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n293\nNKT\nt cell:mature natural killer\nmature NK T cell\nCL:0000814\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n294\nNKT\nt cell:mature natural killer\nmature NK T cell\nCL:0000814\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n295\nTissue T\nt cell:memory\nmemory T cell\nCL:0000813\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n296\nNaive T\nt cell:naive\nnaive T cell\nCL:0000898\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n297\nT reg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n298\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n299\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n300\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n301\nT_Treg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n302\nT-Reg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-celldive-ge\n\n\n303\nTregs\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n304\nT_TfR\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n305\nT_TIM3+\nt cell:tim3+\nT cell:tim3-positive\nCL:0000084\nskos:narrowMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n306\nDP\nthymocyte:cd4-intermediate cd8+ double-positive\nCD4-intermediate, CD8-positive double-positive...\nCL:0002430\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n307\nTA2\ntransit amplifying cell\ntransit amplifying cell\nCL:0009010\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n308\nTA\ntransit amplifying cell\ntransit amplifying cell\nCL:0009010\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n309\nTA1\ntransit amplifying cell\ntransit amplifying cell\nCL:0009010\nskos:exactMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n310\nCyclingTA\ntransit amplifying cell:proliferating\ntransit amplifying cell:proliferating\nCL:0009010\nskos:narrowMatch\ntransit amplifying cell\ntransit amplifying cell\nCL:0009010\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n311\nCycling TA\ntransit amplifying cell:proliferating\ntransit amplifying cell:proliferating\nCL:0009010\nskos:narrowMatch\nenterocyte\nenterocyte\nCL:0000584\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n312\nEVT2\ntrophoblast:hla-g minus, cd57- ck7 low extravi...\nextravillous trophoblast:hla-g-negative cd57-n...\nCL:0008036\nskos:narrowMatch\ntrophoblast\ntrophoblast cell\nCL:0000351\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n313\nEVT1c\ntrophoblast:hla-g+ cd56+ extravillous\nextravillous trophoblast:hla-g-positive cd56-p...\nCL:0008036\nskos:narrowMatch\ntrophoblast\ntrophoblast cell\nCL:0000351\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n314\nEVT1a\ntrophoblast:hla-g+ ck7+ extravillous\nextravillous trophoblast:hla-g-positive ck7-po...\nCL:0008036\nskos:narrowMatch\ntrophoblast\ntrophoblast cell\nCL:0000351\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n315\nEVT1b\ntrophoblast:hla-g+ ck7- extravillous\nextravillous trophoblast:hla-g-positive ck7-ne...\nCL:0008036\nskos:narrowMatch\ntrophoblast\ntrophoblast cell\nCL:0000351\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n316\nTuft\ntuft cell:intestinal\nintestinal tuft cell\nCL:0019032\nskos:exactMatch\ntuft cell\nbrush cell\nCL:0002204\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n317\nTumor\ntumor cell\nneoplastic cell\nCL:0001063\nskos:exactMatch\nabnormal cell\nabnormal cell\nCL:0001061\nskos:exactMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nskin-confocal-sorgerlab\n\n\n318\nindistinct\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nspleen-codex-ufl\n\n\n319\nOthers\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\noralcavity-codex-czi\n\n\n320\nUNK_3\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n321\nUNK_2\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n322\nUNK_5_ambiguous\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n323\nUNK_1_APC\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n324\nUNK_3_(col1a1-driven_cluster)\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n325\nUNK_4_(col1a1_driven_cluster)\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n326\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\ncolon-xenium-stanford\n\n\n327\nother\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n328\nUNK_1\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n329\nUnknown_lowcount\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\ncolon-xenium-stanford\n\n\n330\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\npancreas-geomx-ufl\n\n\n331\nArtifact\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nbonemarrow-codex-chop\n\n\n332\nUndetermined\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nbonemarrow-codex-chop\n\n\n333\nAutofluorescent\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nbonemarrow-codex-chop\n\n\n334\nCD44+ Undetermined\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nbonemarrow-codex-chop\n\n\n335\nOther\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\ncolon-cycif-sorgerlab\n\n\n336\nENDO_CD8+_T_Cell\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nlung-codex-urmc\n\n\n337\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nskin-confocal-sorgerlab\n\n\n\n\n\n\n\n\n# Save unique_combinations DataFrame to a CSV file in the data/mapping_files directory.\nunique_combinations.to_csv(os.path.join(basepath, \"mapping_files\", \"generated_cell_type_complete_crosswalk.csv\"), index=False)\n\n\n# Print if there are any duplicates in the Original Cell Type column of the unique combinations DataFrame.\nif unique_combinations['Original Cell Type'].duplicated().any():\n    print(\"There are duplicates in the Original Cell Type column of the unique combinations DataFrame. This is expected because same Original Cell Type can be in multiple Tissue Types.\")\n\n# Print the duplicate values with their row indices.\nduplicates = unique_combinations[unique_combinations['Original Cell Type'].duplicated(keep=False)]\nduplicates\n\nThere are duplicates in the Original Cell Type column of the unique combinations DataFrame. This is expected because same Original Cell Type can be in multiple Tissue Types.\n\n\n\n\n\n\n\n\n\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nTissue Type\n\n\n\n\n2\nAdipocytes\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\noralcavity-codex-czi\n\n\n3\nAdipocytes\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nadipocyte\nadipocyte\nCL:0000136\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ncolon-xenium-stanford\n\n\n6\nB\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n8\nB cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n10\nB cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n11\nB\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n30\nDC\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n32\nDC\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n33\nDC\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\ndendritic cell\ndendritic cell\nCL:0000451\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n43\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nlymphnode-codex-yale\n\n\n44\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nskin-celldive-ge\n\n\n45\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n46\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\npancreas-geomx-ufl\n\n\n47\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nintestine-codex-stanford\n\n\n49\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ntonsil-codex-stanford\n\n\n50\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ncolon-xenium-stanford\n\n\n51\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n52\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n53\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nesophagus-codex-stanford\n\n\n96\nFibroblasts\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\noralcavity-codex-czi\n\n\n97\nFibroblasts\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nfibroblast\nfibroblast\nCL:0000057\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n109\nGoblet\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n110\nGoblet\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\ngoblet cell\ngoblet cell\nCL:0000160\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ncolon-xenium-stanford\n\n\n136\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n138\nInnate\nlymphoid cell:innate\ninnate lymphoid cell\nCL:0001065\nskos:exactMatch\nlymphoid cell\nlymphocyte\nCL:0000542\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nesophagus-codex-stanford\n\n\n143\nMacrophage\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n145\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n146\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n148\nMacrophage\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nskin-confocal-sorgerlab\n\n\n153\nMacrophages\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nmacrophage\nmacrophage\nCL:0000235\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nspleen-codex-ufl\n\n\n167\nMast\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n169\nMast\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n170\nMast\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nmast cell\nmast cell\nCL:0000097\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n178\nMonocytes\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n179\nMonocytes\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nmonocyte\nmonocyte\nCL:0000576\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n187\nVSMC\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nlymphnode-codex-yale\n\n\n189\nSmoothMuscle\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil-codex-stanford\n\n\n191\nSmoothMuscle\nmuscle cell:smooth\nsmooth muscle cell of the esophagus\nCL:0002599\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nesophagus-codex-stanford\n\n\n192\nVSMC\nmuscle cell:smooth\nsmooth muscle cell\nCL:0000192\nskos:exactMatch\nmuscle cell\nmuscle cell\nCL:0000187\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n207\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n213\nNK\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nnatural killer cell\nnatural killer cell\nCL:0000623\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n216\nNerve\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\nesophagus-codex-stanford\n\n\n218\nNerve\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\ntonsil-codex-stanford\n\n\n219\nNerve\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneuron\nneuron\nCL:0000540\nskos:exactMatch\nneural cell\nneural cell\nCL:0002319\nskos:exactMatch\nintestine-codex-stanford\n\n\n225\nPaneth\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nintestine-codex-stanford\n\n\n226\nPaneth\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\npaneth cell\npaneth cell\nCL:0000510\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nesophagus-codex-stanford\n\n\n228\nPlasma Cells\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nbonemarrow-codex-chop\n\n\n230\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n231\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-xenium-stanford\n\n\n232\nPlasma Cells\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n233\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n234\nPlasma\nplasma cell\nplasma cell\nCL:0000786\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nesophagus-codex-stanford\n\n\n242\nSquamous_epithelial\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\nesophagus-codex-stanford\n\n\n243\nSquamous_epithelial\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nsquamous epithelial cell\nsquamous epithelial cell\nCL:0000076\nskos:exactMatch\nepithelial cell\nepithelial cell\nCL:0000066\nskos:exactMatch\ntonsil-codex-stanford\n\n\n245\nStroma\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nesophagus-codex-stanford\n\n\n246\nStroma\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nintestine-codex-stanford\n\n\n247\nStroma\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil-codex-stanford\n\n\n248\nPDPN\nstromal cell:podoplanin+\nstromal cell:podoplanin-positive\nCL:0000499\nskos:narrowMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\nesophagus-codex-stanford\n\n\n249\nPDPN\nstromal cell:podoplanin+\nstromal cell:podoplanin-positive\nCL:0000499\nskos:narrowMatch\nstromal cell\nstromal cell\nCL:0000499\nskos:exactMatch\nmesenchymal cell\nmesenchymal cell\nCL:0008019\nskos:exactMatch\ntonsil-codex-stanford\n\n\n250\nT\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nesophagus-codex-stanford\n\n\n252\nT\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ntonsil-codex-stanford\n\n\n257\nCD4+ T cell\nt cell:cd4+\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nintestine-codex-stanford\n\n\n267\nCD4+ T cell\nt cell:cd4+ alpha-beta\nCD4-positive, alpha-beta T cell\nCL:0000624\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlung-codex-urmc\n\n\n293\nNKT\nt cell:mature natural killer\nmature NK T cell\nCL:0000814\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nlymphnode-codex-yale\n\n\n294\nNKT\nt cell:mature natural killer\nmature NK T cell\nCL:0000814\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n298\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\noralcavity-codex-czi\n\n\n299\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nmaternalfetalinterface-mibitof-stanford\n\n\n300\nTreg\nt cell:regulatory\nregulatory T cell\nCL:0000815\nskos:exactMatch\nt cell\nT cell\nCL:0000084\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\ncolon-cycif-sorgerlab\n\n\n326\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\ncolon-xenium-stanford\n\n\n337\nUnknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nskin-confocal-sorgerlab",
    "crumbs": [
      "Data Analysis: Call Distribution Across Datasets"
    ]
  },
  {
    "objectID": "data_analysis__cell_distribution_across_datasets.html#heatmap-for-cell-type-distribution-at-different-levels-of-cell-type-annotation-across-datasets",
    "href": "data_analysis__cell_distribution_across_datasets.html#heatmap-for-cell-type-distribution-at-different-levels-of-cell-type-annotation-across-datasets",
    "title": "Data Analysis: Call Distribution Across Datasets",
    "section": "Heatmap for Cell Type Distribution at Different Levels of Cell Type Annotation Across Datasets",
    "text": "Heatmap for Cell Type Distribution at Different Levels of Cell Type Annotation Across Datasets\n\n# Method to create a heatmap visualization of cell type distribution across datasets.\ndef create_heatmap(df, normalize_method='percent', cell_type_level='Level Three Cell Type'):\n    \"\"\"\n    Create an aesthetically enhanced heatmap visualization.\n    \"\"\"\n    # Set the style and font\n    plt.style.use(\"seaborn-v0_8-white\") \n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    \n    # Transpose the dataframe and sort index (cell types) alphabetically\n    df_plot = df\n    df_plot = df_plot.sort_index(axis=1)\n    \n    # Normalize the data\n    if normalize_method == 'percent':\n        df_plot = df_plot.div(df_plot.sum(axis=1), axis=0) * 100\n    \n    # Create binary mask for coloring\n    binary_mask = (df_plot &gt; 0).astype(float)\n    \n    # Calculate figure size\n    width = max(16, len(df_plot.columns) * 0.4)\n    height = max(8, len(df_plot.index) * 0.4)\n    \n    # Create figure with higher DPI for better quality\n    fig, ax = plt.subplots(figsize=(width, height), dpi=150)\n    \n    # Define custom colors\n    bg_color = '#ffffff'  # Pure white background\n    present_color = '#D5A023'  # Professional blue, #D5A023\n    absent_color = '#f8f9fa'  # Very light gray\n    text_color = '#333333'  # Dark gray for text\n    grid_color = '#e6e6e6'  # Light gray for grid\n    \n    # Set figure background color\n    fig.patch.set_facecolor(bg_color)\n    ax.set_facecolor(bg_color)\n    \n    # Create custom colormap\n    custom_cmap = sns.color_palette([absent_color, present_color], n_colors=2)\n    \n    # Create annotations with custom formatting (float for non-zero, integer for zero)\n    annotations = df_plot.copy()\n    for i in range(len(annotations)):\n        for j in range(len(annotations.columns)):\n            val = annotations.iloc[i, j]\n            if val == 0:\n                annotations.iloc[i, j] = '0'\n            else:\n                annotations.iloc[i, j] = f'{val:.1f}'\n    \n    # Create heatmap with enhanced styling\n    ax = sns.heatmap(binary_mask,\n                     cmap=custom_cmap,\n                     annot=annotations,\n                     fmt='',\n                     cbar=False,\n                     linewidths=0.5,\n                     linecolor=grid_color,\n                     annot_kws={\n                         'size': 7,\n                         'color': text_color,\n                         'ha': 'center',\n                         'va': 'center'\n                     },\n                     square=True)\n    \n    # Style the axis labels with better positioning\n    plt.xticks(rotation=90, color=text_color, ha='center', va='top')\n    plt.yticks(rotation=0, color=text_color, va='center')\n    \n    # Enhance axis labels with adjusted positioning\n    ax.set_xlabel(cell_type_level, fontsize=11, fontweight='bold', color=text_color, labelpad=15)\n    ax.set_ylabel('Tissue Type', fontsize=11, fontweight='bold', color=text_color, labelpad=10)\n    \n    # Add title with styling\n    plt.title('Cell Type Distribution Across Datasets', \n             pad=20,\n             fontsize=13,\n             fontweight='bold',\n             color=text_color)\n    \n    # Remove spines\n    for spine in ax.spines.values():\n        spine.set_visible(False)\n    \n    # Adjust layout with specific margins\n    plt.tight_layout(pad=1.5)\n    \n    # Save figure with high quality\n    plt.savefig(f'{os.path.join(basepath, figures_output_dir)}/cell_type_distribution_binary_heatmap_{cell_type_level}.png',\n                dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5,\n                facecolor=bg_color)\n    \n    # Save fig as svg\n    plt.savefig(f'{os.path.join(basepath, figures_output_dir)}/cell_type_distribution_binary_heatmap_{cell_type_level}.svg',\n                dpi=600,\n                bbox_inches='tight',\n                pad_inches=0.5,\n                facecolor=bg_color)\n    plt.show()\n\n\nheatmap_df_loriginal = df_all_data.groupby(['Tissue Type', 'Original Cell Type']).size().unstack(fill_value=0)\n# Create a heatmap of the summary DataFrame\ncreate_heatmap(heatmap_df_loriginal, normalize_method='percent', cell_type_level='Original Cell Type')\nheatmap_df_loriginal\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOriginal Cell Type\nAEC\nAT1 _2\nAT1_1\nAT2\nAT2_1\nAT2_2\nAT2_p\nAcinar Cells\nAcini\nAdipo-MSC\nAdipocyte\nAdipocytes\nArtifact\nAutofluorescent\nB\nB Cells\nB cell\nB cells\nB cells, red pulp\nB-Cells\nB_Cycling\nB_GC_DZ\nB_GC_LZ\nB_GC_prePB\nB_IFN\nB_activated\nB_cell_1\nB_cell_macrophage_p?\nB_mem\nB_naive\nB_plasma\nB_preGC\nBasal Keratincytes\nBest4+ Enterocytes\nBeta cell\nCAP_ENDO\nCD11B+ CD11C- cells\nCD34+ CD61+\nCD4 Memory T cells\nCD4 T\nCD4 T Cells\nCD4+\nCD4+ T cell\nCD4+ T-Cell\nCD4+_T_cell_1\nCD4+_T_cell_2\nCD4+_T_cell_3\nCD44+ Undetermined\nCD4T\nCD4_+_Tcell/macrophage\nCD57+ Enterocyte\nCD66+ Enterocyte\nCD68\nCD7+ Immune\nCD8 + T cell_1\nCD8 Memory T cells\nCD8 T\nCD8 T Cells\nCD8+\nCD8+ T\nCD8+ T cell_2\nCD8+ T-Cell\nCD8+_T_cell_1\nCD8+_T_cell_2\nCD8+_T_cell_3\nCD8+_T_cell_CD_4+_T_cell\nCD8T\nCLP\nCancer Associated Fibroblasts\nCrypt Fibroblasts 1\nCrypt Fibroblasts 2\nCrypt Fibroblasts 3\nCrypt Fibroblasts 4\nCycling TA\nCyclingTA\nDC\nDC_CCR7+\nDC_cDC1\nDC_cDC2\nDC_pDC\nDDB2\nDN Lymphocyte\nDP\nDP Lymphocyte\nDendritic Cells\nDendritic cells\nDuctal Epithelial Cells\nDuctal cell\nDucts\nENDO_1\nENDO_CD8+_T_Cell\nENDO_SMC\nEVT1a\nEVT1b\nEVT1c\nEVT2\nEarly Myeloid Progenitor\nEndo_2\nEndo_p\nEndosteal\nEndothelial\nEnterocyte\nEnterocyte Progenitors\nEnterocytes\nEnteroendocrine\nEpithelial\nErythroblast\nErythroid\nFDC\nFibroblasts\nFol B cells\nGATA1neg_Mks\nGATA1pos_Mks\nGC\nGMP\nGMP/Myeloblast\nGlandular\nGlandular_epi\nGlia\nGlial/Neuron\nGoblet\nHSC\nHSPC\nICC\nILC\nILCs\nImmature Enterocytes\nImmature Goblet\nImmature_B_Cell\nInnate\nIntermediate Myeloid\nIonocytes\nKI67\nKeratinocyte\nKi67 proliferating\nKi67+ Tumor/Epithelial\nLangerhan cells\nLangerhans Cells\nLeukocyte\nLung_Epithelial_1\nLung_Epithelial_4\nLung_Epithelial_p\nLung_Epithelil_2_CD4+_T_cell\nLymphatic\nLymphatic Endothelial Cells\nLymphatic Vascular Cells\nLymphatic endothelial cells\nLymphatic_Endothelium\nLymphocyte(III)\nM1 Macrophage\nM2 Macrophage\nMEP/Early Erythroblast\nMUC1+ Enterocyte\nMac1a\nMac1b\nMac2a\nMac2b\nMac2c\nMacrophage\nMacrophage(I)\nMacrophage(II)\nMacrophage(III)\nMacrophage(IV)\nMacrophages\nMacrophages_M1\nMacrophages_M2\nMast\nMast Cells\nMast cell\nMature Myeloid\nMelanocytes\nMemory B\nMerkel Cells\nMonocyte-Macrophage\nMonocytes\nMural Cells\nMuscle/Fibroblast\nMyeloid\nMyeloid cells\nMyoepithelial Cells\nMyofibroblasts\nMyofibroblasts/Smooth Muscle 1\nMyofibroblasts/Smooth Muscle 2\nMyofibroblasts/Smooth Muscle 3\nNK\nNK Cells\nNK1\nNK2\nNK3\nNK4\nNKT\nNPM1 Mutant Blast\nNaive B\nNaive T\nNerve\nNeuroendocrine\nNeurons\nNeutrophil\nNeutrophils\nNeutrophils/Monocytes\nNon-Classical Monocyte\nOther\nOther Immune\nOthers\nP53\nPD1+ T helper\nPD1+ Tc\nPDL1+ Macrophage\nPDL1+ Tumor/Epithelial\nPDL1+ lymphocyte\nPDPN\nPaneth\nPericytes\nPlacental_Mac\nPlasma\nPlasma Cells\nPodoplanin\nSEC\nSMC_1\nSMC_2\nSPINK2+ HSPC\nSchwann Cells\nSecretory_epithelial\nSinusoidal cells\nSkeletal Myocytes\nSmooth muscle\nSmoothMuscle\nSquamous_epithelial\nStem\nStroma\nSuprabasal Keratinocytes\nT\nT helper\nT reg\nT-Helper\nT-Killer\nT-Reg\nTA\nTA1\nTA2\nTHY1+ MSC\nT_CD4+\nT_CD4+_TfH\nT_CD4+_TfH_GC\nT_CD4+_naive\nT_CD8+_CD161+\nT_CD8+_cytotoxic\nT_CD8+_naive\nT_TIM3+\nT_TfR\nT_Treg\nTc\nTc cell\nTh\nTissue T\nTreg\nTregs\nTuft\nTumor\nTumor/Epithelial\nUNK_1\nUNK_1_APC\nUNK_2\nUNK_3\nUNK_3_(col1a1-driven_cluster)\nUNK_4_(col1a1_driven_cluster)\nUNK_5_ambiguous\nUndetermined\nUnknown\nUnknown_lowcount\nVEC Progen\nVSMC\nVascular Endothelial Cells\nVillus Fibroblasts WNT5B+\nblood endothelial\ngd T Cells\nindistinct\nkeratinocytes\nlung Intersitial macrophage\nlymphatic Endothelium\nmacrophage\nmacrophage_2\nmacrophage_3\nmacrophage_CD1c+_myeloidDC\nmacrophage_p\nmegakaryocyte\nmuscle\nmyofibroblast\nneutrophil\nneutrophil_2\nother\npDC\nsmooth muscle 1\nsmooth muscle_2\nunknown\n\n\nTissue Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbonemarrow-codex-chop\n7127\n0\n0\n0\n0\n0\n0\n0\n0\n7967\n23798\n0\n28818\n40530\n0\n0\n0\n0\n0\n67639\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n387\n0\n0\n0\n0\n0\n40122\n0\n0\n0\n1476\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n35078\n0\n0\n0\n0\n0\n165\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n81582\n0\n0\n4026\n0\n0\n0\n0\n0\n0\n23866\n253710\n0\n0\n0\n3649\n2635\n0\n945\n1960\n0\n0\n0\n0\n0\n61\n5130\n0\n0\n0\n0\n0\n11874\n0\n110357\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n558\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n27731\n0\n0\n0\n0\n0\n245083\n0\n0\n0\n0\n46785\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n39861\n0\n0\n0\n0\n0\n0\n0\n0\n6218\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n38853\n0\n24640\n0\n0\n2250\n52\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4846\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12570\n0\n0\n0\n2939\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8800\n0\n0\n0\n\n\ncolon-cycif-sorgerlab\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n513904\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n46504\n0\n204156\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n870316\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n391199\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n864987\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n125601\n43643\n398528\n192296\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1517623\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n644325\n0\n0\n0\n162434\n52444\n128716\n80686\n31568\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n457493\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1105099\n0\n0\n427925\n0\n0\n0\n4498694\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\ncolon-xenium-stanford\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n19998\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48830\n0\n0\n0\n0\n0\n0\n0\n55167\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n135197\n0\n0\n0\n0\n0\n0\n0\n0\n0\n174781\n11540\n1989\n17393\n21553\n0\n150379\n280\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n100459\n0\n38052\n23276\n8859\n0\n0\n0\n0\n0\n0\n0\n0\n23588\n0\n0\n0\n0\n23129\n0\n48925\n0\n0\n0\n0\n21\n84378\n688263\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1678\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n79329\n0\n0\n57344\n0\n0\n0\n0\n6071\n0\n0\n0\n0\n0\n0\n0\n0\n0\n102913\n5611\n39474\n0\n0\n0\n0\n0\n0\n0\n0\n18682\n6920\n0\n0\n1632\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n82636\n0\n43345\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n136725\n0\n0\n0\n0\n0\n0\n0\n0\n0\n67076\n200244\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3800\n15315\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n59\n86517\n0\n0\n0\n7787\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nesophagus-codex-stanford\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6181\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14690\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4282\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2047\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n914\n275\n0\n0\n1177\n0\n0\n0\n0\n0\n0\n0\n658\n0\n0\n0\n9023\n1077\n0\n4218\n0\n1416\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nintestine-codex-stanford\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n35506\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n117028\n0\n0\n0\n0\n0\n0\n0\n1895\n49441\n0\n7174\n0\n0\n0\n0\n0\n200401\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n82849\n0\n32002\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n180762\n484864\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n163170\n0\n0\n33832\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n64498\n0\n0\n0\n0\n0\n21825\n112478\n0\n17869\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5027\n0\n0\n0\n0\n0\n0\n0\n0\n0\n76903\n14970\n0\n14657\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n21381\n0\n0\n128320\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n375143\n0\n0\n0\n212937\n0\n0\n0\n0\n0\n0\n0\n57253\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nlung-codex-urmc\n0\n14727\n29455\n97933\n50215\n19747\n17355\n0\n0\n0\n0\n0\n0\n0\n0\n0\n630\n0\n0\n0\n0\n0\n0\n0\n0\n0\n684\n10\n0\n0\n0\n0\n0\n0\n0\n46307\n0\n0\n0\n0\n0\n0\n20116\n0\n49109\n10587\n84\n0\n0\n48987\n0\n0\n0\n0\n16560\n0\n0\n0\n0\n0\n9200\n0\n31918\n17167\n1154\n7623\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n97414\n17063\n40536\n0\n0\n0\n0\n0\n47393\n19604\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12297\n60111\n2135\n2432\n36072\n0\n0\n0\n0\n3\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7495\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n30969\n13015\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n34240\n29\n25499\n58\n6\n2\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n229\n17250\n83865\n42038\n12137\n15451\n9513\n5595\n0\n0\n44462\n2098\n0\n0\n29910\n10818\n0\n\n\nlymphnode-codex-yale\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n511309\n140072\n367288\n13922\n4815\n126134\n0\n0\n1842344\n673104\n417145\n25059\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7842\n31899\n45018\n195456\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n303403\n0\n0\n0\n0\n0\n0\n0\n26871\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n267761\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n28091\n122580\n39333\n0\n0\n0\n0\n0\n0\n0\n263671\n0\n0\n0\n0\n0\n0\n0\n0\n0\n390251\n0\n0\n0\n0\n0\n56189\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n256204\n503187\n309034\n731555\n77613\n644958\n66230\n20974\n55648\n321730\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n32155\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nmaternalfetalinterface-mibitof-stanford\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1922\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5962\n0\n0\n0\n0\n0\n0\n0\n0\n1831\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n21598\n18199\n3203\n2044\n0\n0\n0\n0\n19045\n0\n0\n0\n0\n0\n0\n0\n0\n153458\n0\n0\n0\n0\n0\n0\n18065\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5857\n9507\n42881\n1765\n6739\n0\n0\n0\n0\n0\n0\n0\n0\n678\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n62218\n0\n0\n0\n0\n0\n35711\n15426\n6714\n1929\n3236\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n85\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3084\n0\n0\n0\n36589\n0\n0\n0\n0\n\n\noralcavity-codex-czi\n0\n0\n0\n0\n0\n0\n0\n173438\n63090\n0\n0\n1357\n0\n0\n0\n13227\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4195\n0\n0\n0\n0\n0\n0\n0\n1824\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5445\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6764\n0\n17028\n0\n47549\n0\n68974\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n56696\n0\n0\n0\n272689\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2525\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1099\n0\n10054\n0\n0\n0\n1421\n0\n0\n0\n0\n0\n0\n12763\n57\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n46804\n0\n0\n0\n0\n0\n0\n0\n0\n576\n0\n0\n1815\n0\n1773\n2580\n0\n6807\n0\n0\n0\n102636\n0\n0\n0\n0\n0\n6936\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n45147\n0\n0\n0\n0\n296386\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6376\n0\n0\n0\n0\n0\n0\n0\n0\n490\n0\n0\n0\n0\n0\n6556\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10067\n0\n7032\n0\n14360\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9977\n0\n56992\n0\n0\n2209\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n26475\n0\n0\n0\n0\n0\n0\n0\n\n\npancreas-geomx-ufl\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n124066\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3339841\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3280557\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8147411\n\n\nskin-celldive-ge\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1133\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4126\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n22427\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6834\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1447\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10945\n337\n1074\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nskin-confocal-sorgerlab\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n257\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n751\n0\n0\n8176\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n515\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5985\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2042\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n13\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2154\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n390\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1103\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1227\n0\n0\n0\n23908\n0\n0\n0\n0\n0\n0\n0\n0\n0\n7768\n0\n0\n0\n0\n0\n0\n0\n0\n948\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nspleen-codex-ufl\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n56246\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n53983\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n91948\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n98430\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n44566\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n103112\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n72380\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n159397\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11069\n0\n0\n0\n0\n0\n0\n191107\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n48199\n0\n61961\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\ntonsil-codex-stanford\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n31867\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3295\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n61932\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n281\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11561\n0\n0\n0\n2243\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n152\n5013\n0\n8946\n0\n48678\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nheatmap_df_l3 = df_all_data.groupby(['Tissue Type', 'Level Three Cell Type']).size().unstack(fill_value=0)\n# Create a heatmap of the summary DataFrame\ncreate_heatmap(heatmap_df_l3, normalize_method='percent', cell_type_level='Level Three Cell Type')\nheatmap_df_l3\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nacinar cell of salivary gland\nadipocyte\nb cell\nb cell:activated\nb cell:follicular\nb cell:germinal center\nb cell:germinal center pre-plasmablast\nb cell:immature\nb cell:interferon\nb cell:memory\nb cell:naive\nb cell:pre-germinal center\nb cell:proliferating\nbeta cell:pancreatic\ncell:cd34+ cd61+\ncell:proliferating\ndendritic cell\ndendritic cell:cd11b+\ndendritic cell:conventional 1\ndendritic cell:conventional 2\ndendritic cell:follicular\ndendritic cell:migratory\ndendritic cell:plasmacytoid\nendosteal cell\nendothelial cell\nendothelial cell of artery\nendothelial cell of capillary\nendothelial cell of lymphatic vessel\nendothelial cell of sinusoid\nendothelial cell of vascular tree\nenterocyte\nenterocyte:cd57+\nenterocyte:cd66+\nenterocyte:immature\nenterocyte:muc1+\nenterocyte:progenitor\nenteroendocrine cell\nenteroycte:best4+\nepithelial cell\nepithelial cell:ductal\nepithelial cell:ki67+ proliferating tumor\nepithelial cell:pdl1+ tumor\nepithelial cell:secretory\nerythroblast\nerythroblast:basophilic\nerythroid lineage cell\nfibroblast\nfibroblast:cancer associated\nfibroblast:crypt 1\nfibroblast:crypt 2\nfibroblast:crypt 3\nfibroblast:crypt 4\nfibroblast:wnt5b+ villus\nglandular cell of esophagus\nglandular cell of placenta\nglial cell\nglial cell/neuron\ngoblet cell\ngoblet cell:immature\ngranulocyte monocyte progenitor cell\ngranulocyte monocyte progenitor cell/myeloblast\nhematopoietic stem and progenitor cell:spink2+\nhematopoietic stem cell\nhofbauer cell\nimmune cell\ninterstitial cell of cajal\nkeratinocyte\nkeratinocyte:ddb2+\nkeratinocyte:ki67+ proliferating\nkeratinocyte:p53+\nlangerhans cell\nleukocyte\nlymphocyte:cd7+\nlymphocyte:double-negative\nlymphocyte:double-positive alpha-beta\nlymphocyte:iii\nlymphocyte:pdl1+\nlymphoid cell:innate\nlymphoid progenitor cell:common\nmacrophage\nmacrophage:1a\nmacrophage:1b\nmacrophage:2a\nmacrophage:2b\nmacrophage:2c\nmacrophage:i\nmacrophage:ii\nmacrophage:iii\nmacrophage:inflammatory\nmacrophage:interstitial\nmacrophage:iv\nmacrophage:pdl1+\nmast cell\nmegakaryocyte\nmegakaryocyte:gata1+\nmegakaryocyte:gata1-\nmesenchymal stem cell of adipose tissue\nmesenchymal stem/stromal cell:thy1+\nmixed t cell/epithelial cell population\nmonocyte\nmonocyte:non-classical\nmural cell\nmuscle cell\nmuscle cell:skeletal\nmuscle cell:smooth\nmutant blast:npm1\nmyeloid cell\nmyeloid cell:intermediate\nmyeloid cell:mature\nmyeloid progenitor cell:common\nmyoepithelial cell\nmyofibroblast\nmyofibroblast cell:smooth muscle 1\nmyofibroblast cell:smooth muscle 2\nmyofibroblast cell:smooth muscle 3\nnatural killer cell\nneoplastic cell\nneuroendocrine cell\nneuron\nneutrophil\nneutrophil/monocyte\npaneth cell\npericyte\nplasma cell\npneumocyte:type 1\npneumocyte:type 2\nschwann cell\nsquamous epithelial cell\nstem cell\nstromal cell\nstromal cell:podoplanin+\nt cell\nt cell:cd4+\nt cell:cd4+ alpha-beta\nt cell:cd4+ alpha-beta effector\nt cell:cd4+ alpha-beta memory\nt cell:cd4+ alpha-beta naive thymus-derived\nt cell:cd4+ pdl1+\nt cell:cd8+\nt cell:cd8+ alpha-beta\nt cell:cd8+ alpha-beta effector memory\nt cell:cd8+ alpha-beta memory\nt cell:cd8+ alpha-beta regulatory\nt cell:cd8+ cd161+\nt cell:cd8+ pdl1+\nt cell:follicular helper\nt cell:mature natural killer\nt cell:memory\nt cell:naive\nt cell:regulatory\nt cell:tim3+\nthymocyte:cd4-intermediate cd8+ double-positive\ntransit amplifying cell\ntransit amplifying cell:proliferating\ntrophoblast:hla-g minus, cd57- ck7 low extravillous\ntrophoblast:hla-g+ cd56+ extravillous\ntrophoblast:hla-g+ ck7+ extravillous\ntrophoblast:hla-g+ ck7- extravillous\ntuft cell:intestinal\ntumor cell\nunknown cell\n\n\nTissue Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbonemarrow-codex-chop\n0\n23798\n67639\n0\n0\n0\n0\n11874\n0\n0\n0\n0\n0\n0\n387\n0\n0\n0\n0\n0\n0\n0\n8800\n4026\n0\n7127\n0\n0\n24640\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n23866\n558\n253710\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n945\n1960\n2250\n5191\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n165\n27731\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2635\n3649\n7967\n4846\n0\n46785\n6218\n0\n0\n0\n2939\n39861\n0\n110357\n245083\n81582\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n38853\n0\n0\n52\n0\n0\n0\n0\n0\n0\n40122\n0\n0\n0\n0\n0\n0\n0\n0\n35078\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n83394\n\n\ncolon-cycif-sorgerlab\n0\n0\n513904\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n870316\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n391199\n80686\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n46504\n204156\n864987\n31568\n0\n0\n0\n0\n0\n0\n0\n0\n125601\n43643\n398528\n0\n0\n192296\n128716\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1517623\n0\n0\n0\n0\n4498694\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n457493\n0\n0\n0\n0\n162434\n1105099\n0\n0\n0\n0\n0\n52444\n0\n0\n0\n0\n427925\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n644325\n\n\ncolon-xenium-stanford\n0\n19998\n0\n0\n0\n0\n0\n0\n0\n6071\n18682\n0\n0\n0\n0\n0\n280\n0\n0\n0\n0\n0\n0\n0\n100459\n0\n0\n1678\n0\n0\n23276\n0\n0\n84378\n0\n38052\n8859\n48830\n0\n0\n0\n0\n0\n0\n0\n0\n0\n174781\n11540\n1989\n17393\n21553\n7787\n0\n0\n23129\n0\n72513\n688263\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n21\n0\n79329\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n57344\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n102913\n5611\n39474\n0\n0\n0\n1632\n0\n0\n0\n82636\n43345\n0\n0\n0\n0\n136725\n0\n0\n0\n0\n55167\n0\n0\n0\n0\n0\n0\n135197\n0\n0\n0\n0\n0\n0\n0\n6920\n3800\n0\n0\n267320\n150379\n0\n0\n0\n0\n15315\n0\n86576\n\n\nesophagus-codex-stanford\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n6181\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n658\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14690\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4282\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n9023\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2047\n0\n0\n275\n0\n1177\n0\n0\n0\n1077\n0\n4218\n914\n1416\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nintestine-codex-stanford\n0\n0\n35506\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n32002\n0\n0\n0\n0\n0\n0\n0\n180762\n0\n0\n64498\n0\n0\n484864\n1895\n49441\n0\n17869\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n163170\n0\n0\n0\n0\n0\n0\n0\n33832\n0\n0\n0\n0\n0\n0\n7174\n0\n0\n0\n0\n0\n0\n112478\n0\n0\n0\n0\n0\n0\n0\n0\n21825\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n375143\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5027\n0\n14970\n76903\n14657\n0\n21381\n0\n128320\n0\n0\n0\n0\n0\n212937\n0\n0\n117028\n0\n0\n0\n0\n0\n0\n200401\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n57253\n82849\n0\n0\n0\n0\n0\n0\n0\n\n\nlung-codex-urmc\n0\n0\n1314\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n204947\n0\n46307\n17253\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n64678\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10\n0\n0\n0\n0\n0\n0\n12297\n0\n0\n0\n0\n0\n0\n0\n163004\n0\n0\n0\n0\n0\n0\n0\n0\n0\n229\n0\n0\n7495\n5595\n0\n0\n0\n0\n36072\n0\n0\n0\n0\n0\n84712\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n46560\n0\n0\n0\n0\n44182\n185250\n0\n0\n0\n0\n0\n7623\n0\n128883\n0\n0\n0\n0\n75999\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n76899\n\n\nlymphnode-codex-yale\n0\n0\n0\n126134\n0\n507360\n13922\n0\n4815\n1842344\n673104\n25059\n511309\n0\n0\n0\n0\n0\n31899\n45018\n26871\n7842\n195456\n0\n303403\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n267761\n0\n150671\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n39333\n0\n0\n0\n0\n0\n0\n263671\n0\n0\n0\n0\n32155\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n390251\n0\n0\n0\n0\n0\n0\n0\n417145\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n256204\n0\n731555\n0\n711188\n0\n0\n0\n0\n77613\n0\n812221\n56189\n0\n0\n377378\n20974\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nmaternalfetalinterface-mibitof-stanford\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1831\n0\n0\n0\n0\n0\n0\n0\n19045\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n153458\n0\n0\n0\n0\n0\n0\n0\n18065\n0\n0\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5857\n9507\n42881\n1765\n6739\n0\n0\n0\n0\n0\n0\n0\n678\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3084\n0\n0\n0\n0\n0\n0\n0\n0\n62218\n0\n0\n0\n59780\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1922\n0\n0\n0\n0\n0\n5962\n0\n0\n0\n0\n0\n0\n3236\n0\n0\n85\n0\n0\n0\n0\n2044\n3203\n21598\n18199\n0\n0\n36589\n\n\noralcavity-codex-czi\n236528\n1357\n13227\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n17028\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12820\n0\n66969\n0\n0\n0\n0\n0\n0\n0\n0\n61383\n116523\n0\n0\n0\n0\n0\n0\n272689\n0\n0\n0\n0\n0\n0\n0\n0\n0\n2525\n0\n0\n0\n0\n0\n0\n0\n0\n0\n20805\n0\n0\n0\n1421\n0\n0\n0\n0\n0\n0\n0\n0\n46804\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n576\n0\n0\n0\n0\n0\n0\n2580\n0\n6807\n0\n490\n0\n0\n0\n0\n0\n0\n102636\n26475\n0\n0\n0\n6936\n0\n0\n0\n45147\n0\n0\n0\n6376\n0\n0\n0\n0\n0\n0\n0\n2209\n8856\n0\n0\n0\n0\n0\n15512\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14360\n0\n6764\n0\n0\n0\n0\n0\n0\n0\n0\n296386\n\n\npancreas-geomx-ufl\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n124066\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3280557\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3339841\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8147411\n\n\nskin-celldive-ge\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n22427\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n4126\n6834\n1447\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1133\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n10945\n0\n0\n0\n0\n0\n337\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1074\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\nskin-confocal-sorgerlab\n0\n0\n257\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n5985\n751\n0\n0\n0\n0\n0\n0\n2042\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n948\n0\n0\n0\n13\n390\n0\n0\n0\n0\n0\n0\n0\n2154\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n515\n8176\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n1227\n0\n1103\n0\n0\n0\n0\n0\n0\n0\n0\n0\n23908\n7768\n\n\nspleen-codex-ufl\n0\n0\n56246\n0\n98430\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n44566\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11069\n191107\n48199\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n103112\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n72380\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n159397\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n53983\n0\n0\n0\n0\n0\n91948\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n61961\n\n\ntonsil-codex-stanford\n0\n0\n31867\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3295\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n61932\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n152\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n281\n0\n0\n0\n0\n2243\n0\n0\n0\n5013\n0\n8946\n11561\n48678\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nheatmap_df_l2 = df_all_data.groupby(['Tissue Type', 'Level Two Cell Type']).size().unstack(fill_value=0)\n# Create a heatmap of the summary DataFrame\ncreate_heatmap(heatmap_df_l2, normalize_method='percent', cell_type_level='Level Two Cell Type')\nheatmap_df_l2\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nabnormal cell\nadipocyte\nb cell\nbeta cell\ndendritic cell\nendocrine cell\nendothelial cell\nendothelial cell of artery\nendothelial cell of capillary\nendothelial cell of lymphatic vessel\nendothelial cell of sinusoid\nendothelial cell of vascular tree\nenterocyte\nepithelial cell\nerythroid precursor\nfibroblast\ngland epithelium cell\ngoblet cell\nhematopoietic stem and progenitor cell\nimmune cell\nkeratinocyte\nlangerhans cell\nleukocyte\nlymphoid cell\nmacrophage\nmast cell\nmegakaryocyte\nmesenchymal stem cell\nmesenchymal stem/stromal cell\nmixed t cell/epithelial cell population\nmonocyte\nmuscle cell\nmyeloid cell\nmyeloid precursor\nmyoepithelial cell\nnatural killer cell\nneurecto-epithelial cell\nneuroglial cell\nneuroglial cell/neuron\nneuron\nneutrophil\npaneth cell\npericyte\nperivascular cell\nprogenitor cell\nsecretory cell of esophagus\nskeletal stromal cell\nsquamous epithelial cell\nstem cell\nstromal cell\nt cell\ntransit amplifying cell\ntrophoblast\ntuft cell\ntype 1 pneumocyte\ntype 2 pneumocyte\nunknown cell\n\n\nTissue Type\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbonemarrow-codex-chop\n39861\n23798\n118366\n0\n8800\n0\n0\n7127\n0\n0\n24640\n0\n0\n0\n278134\n0\n0\n0\n2250\n0\n0\n0\n0\n0\n27731\n0\n6671\n7967\n4846\n0\n53003\n2939\n245083\n113262\n0\n0\n0\n52\n0\n0\n0\n0\n0\n0\n81747\n0\n4026\n0\n5191\n0\n75200\n0\n0\n0\n0\n0\n83394\n\n\ncolon-cycif-sorgerlab\n4970579\n0\n513904\n0\n0\n0\n870316\n0\n0\n0\n0\n0\n0\n0\n0\n1517623\n0\n0\n0\n0\n0\n0\n0\n0\n888784\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3352610\n0\n0\n0\n0\n0\n644325\n\n\ncolon-xenium-stanford\n0\n19998\n68098\n0\n280\n8859\n100459\n0\n0\n1678\n0\n0\n461856\n0\n0\n383041\n0\n760776\n0\n0\n0\n0\n0\n21\n79329\n57344\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n23129\n0\n1632\n0\n0\n82636\n0\n0\n0\n0\n0\n136725\n0\n201084\n150379\n0\n15315\n0\n0\n86576\n\n\nesophagus-codex-stanford\n0\n0\n1177\n0\n0\n0\n6181\n0\n0\n0\n0\n0\n0\n0\n0\n0\n14690\n0\n0\n0\n0\n0\n0\n4282\n0\n0\n0\n0\n0\n0\n0\n9023\n0\n0\n0\n0\n0\n0\n0\n2047\n0\n275\n0\n0\n0\n658\n0\n1077\n0\n5132\n1416\n0\n0\n0\n0\n0\n0\n\n\nintestine-codex-stanford\n0\n0\n163826\n0\n32002\n14970\n180762\n0\n0\n64498\n0\n0\n694171\n0\n0\n0\n0\n163170\n0\n0\n0\n0\n0\n7174\n134303\n0\n0\n0\n0\n0\n0\n375143\n0\n0\n0\n5027\n33832\n0\n0\n76903\n14657\n21381\n0\n0\n0\n0\n0\n0\n0\n212937\n317429\n0\n0\n0\n0\n0\n0\n\n\nlung-codex-urmc\n0\n0\n1314\n0\n0\n0\n204947\n0\n46307\n17253\n0\n0\n0\n64678\n0\n0\n0\n0\n0\n10\n0\n0\n12297\n0\n163233\n7495\n5595\n0\n0\n36072\n0\n84712\n0\n0\n0\n0\n0\n0\n0\n0\n46560\n0\n0\n0\n0\n0\n0\n0\n0\n0\n212505\n0\n0\n0\n44182\n185250\n76899\n\n\nlymphnode-codex-yale\n0\n0\n4121192\n0\n307086\n0\n303403\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n267761\n150671\n39333\n0\n0\n0\n0\n263671\n32155\n0\n0\n0\n390251\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3043322\n0\n0\n0\n0\n0\n0\n\n\nmaternalfetalinterface-mibitof-stanford\n0\n0\n0\n0\n1831\n0\n19045\n0\n0\n0\n0\n0\n0\n0\n0\n215676\n18065\n0\n0\n0\n0\n0\n0\n0\n66750\n678\n0\n0\n0\n0\n0\n3084\n0\n0\n0\n59780\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11205\n0\n45044\n0\n0\n0\n36589\n\n\noralcavity-codex-czi\n0\n1357\n19603\n0\n17028\n0\n0\n0\n0\n12820\n0\n66969\n0\n61383\n0\n299164\n353051\n0\n0\n0\n20805\n1421\n0\n0\n49384\n576\n0\n0\n0\n0\n0\n490\n0\n0\n102636\n6936\n0\n0\n2525\n0\n45147\n0\n0\n6807\n0\n0\n0\n0\n0\n0\n47701\n0\n0\n0\n0\n0\n296386\n\n\npancreas-geomx-ufl\n0\n0\n0\n124066\n0\n0\n3280557\n0\n0\n0\n0\n0\n0\n0\n0\n0\n3339841\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n8147411\n\n\nskin-celldive-ge\n0\n0\n0\n0\n0\n0\n22427\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12407\n0\n0\n0\n1133\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n12356\n0\n0\n0\n0\n0\n0\n\n\nskin-confocal-sorgerlab\n23908\n0\n257\n0\n6736\n0\n2042\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n948\n13\n390\n0\n2154\n0\n0\n0\n0\n0\n0\n0\n18\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n11021\n0\n0\n0\n0\n0\n7768\n\n\nspleen-codex-ufl\n0\n0\n154676\n0\n0\n0\n0\n0\n0\n11069\n191107\n48199\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n103112\n0\n0\n0\n0\n0\n0\n0\n72380\n0\n0\n0\n0\n0\n0\n0\n159397\n0\n0\n0\n0\n0\n0\n0\n0\n0\n145931\n0\n0\n0\n0\n0\n106527\n\n\ntonsil-codex-stanford\n0\n0\n34110\n0\n0\n0\n3295\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n61932\n0\n0\n0\n0\n0\n0\n0\n152\n0\n0\n0\n0\n0\n0\n0\n281\n0\n0\n0\n0\n0\n0\n0\n5013\n0\n20507\n48678\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\nheatmap_df_l1 = df_all_data.groupby(['Tissue Type', 'Level One Cell Type']).size().unstack(fill_value=0)\n# Create a heatmap of the summary DataFrame\ncreate_heatmap(heatmap_df_l1, normalize_method='percent', cell_type_level='Level One Cell Type')\nheatmap_df_l1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLevel One Cell Type\nendothelial cell\nepithelial cell\nhematopoietic precursor cell\nimmune cell\nmesenchymal cell\nmixed immune/epithelial cell population\nneural cell\nunknown cell\n\n\nTissue Type\n\n\n\n\n\n\n\n\n\n\n\n\nbonemarrow-codex-chop\n31767\n0\n531962\n528183\n38730\n0\n52\n83394\n\n\ncolon-cycif-sorgerlab\n870316\n4970579\n0\n4755298\n1517623\n0\n0\n644325\n\n\ncolon-xenium-stanford\n102137\n1383531\n0\n556535\n485675\n0\n24761\n86576\n\n\nesophagus-codex-stanford\n6181\n16700\n0\n6875\n14155\n0\n2047\n0\n\n\nintestine-codex-stanford\n245260\n893692\n0\n674418\n621912\n0\n76903\n0\n\n\nlung-codex-urmc\n268507\n294110\n5595\n443414\n84712\n36072\n0\n76899\n\n\nlymphnode-codex-yale\n303403\n0\n0\n8556416\n59026\n0\n0\n0\n\n\nmaternalfetalinterface-mibitof-stanford\n19045\n63109\n0\n140244\n218760\n0\n0\n36589\n\n\noralcavity-codex-czi\n79789\n537875\n0\n187796\n307818\n0\n2525\n296386\n\n\npancreas-geomx-ufl\n3280557\n3463907\n0\n0\n0\n0\n0\n8147411\n\n\nskin-celldive-ge\n22427\n12407\n0\n13489\n0\n0\n0\n0\n\n\nskin-confocal-sorgerlab\n2042\n948\n0\n20589\n0\n0\n0\n31676\n\n\nspleen-codex-ufl\n250375\n0\n0\n635496\n0\n0\n0\n106527\n\n\ntonsil-codex-stanford\n3295\n5013\n0\n144720\n20659\n0\n281\n0",
    "crumbs": [
      "Data Analysis: Call Distribution Across Datasets"
    ]
  },
  {
    "objectID": "data_analysis__cell_distribution_across_datasets.html#bar-distribution-of-cell-types-across-datasets",
    "href": "data_analysis__cell_distribution_across_datasets.html#bar-distribution-of-cell-types-across-datasets",
    "title": "Data Analysis: Call Distribution Across Datasets",
    "section": "Bar Distribution of cell types across datasets",
    "text": "Bar Distribution of cell types across datasets\n\ndef create_bar_distribution_plot (df, cell_type_level='Original Cell Type', log_scale=True):\n    # Count the occurrences of each cell type\n    cell_type_counts = df[cell_type_level].value_counts()\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    # Create a bar plot using plotly\n    fig = px.bar(x=cell_type_counts.index, \n                y=cell_type_counts.values,\n                log_y=log_scale,  # Use log scale for y-axis\n                # color=cell_type_counts.values,\n                color_continuous_scale='golden',\n                color_discrete_sequence=['#D5A023'], \n                title='Distribution of Cell Types Across All Datasets',\n                labels={'x': 'Cell Type', 'y': 'Count'},\n                template='plotly_white')\n\n    y_axis_title = 'Count (log scale)' if log_scale else 'Count'\n\n    # Update layout\n    fig.update_layout(\n        showlegend=False,\n        xaxis_tickangle=270,\n        height=600,\n        width=1200,\n        margin=dict(b=150),  # Increase bottom margin for long labels\n        xaxis_title=cell_type_level,\n        yaxis_title=y_axis_title,\n        title_x=0.5,  # Center the title\n        # yaxis=dict(type='log')  # Use log scale for better visualization\n    )\n    \n    # Adjust layout with specific margins\n    plt.tight_layout(pad=1.5)\n\n    \n    # Save figure with high quality\n    plt.savefig(f'{os.path.join(basepath, figures_output_dir)}/cell_type_distribution_bar_plot_{cell_type_level}.png',\n                dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5,\n                # facecolor=bg_color\n                )\n    \n    # Save fig as svg\n    plt.savefig(f'{os.path.join(basepath, figures_output_dir)}/cell_type_distribution_bar_plot_{cell_type_level}.svg',\n                dpi=600,\n                bbox_inches='tight',\n                pad_inches=0.5,\n                # facecolor=bg_color\n                )\n\n    fig.show()\n\n\ncreate_bar_distribution_plot(df_all_data, cell_type_level='Original Cell Type', log_scale=True)\n\n                            \n                                            \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\ncreate_bar_distribution_plot(df_all_data, cell_type_level='Level Three Cell Type', log_scale=True)\n\n                            \n                                            \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\ncreate_bar_distribution_plot(df_all_data, cell_type_level='Level Two Cell Type', log_scale=True)\n\n                            \n                                            \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\ncreate_bar_distribution_plot(df_all_data, cell_type_level='Level One Cell Type', log_scale=True)\n\n                            \n                                            \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;\n\n\n\ncreate_bar_distribution_plot(df_all_data, cell_type_level='Level One Cell Type', log_scale=False)\n\n                            \n                                            \n\n\n&lt;Figure size 640x480 with 0 Axes&gt;",
    "crumbs": [
      "Data Analysis: Call Distribution Across Datasets"
    ]
  },
  {
    "objectID": "data_analysis__cell_distribution_across_datasets.html#donut-chart-of-cell-type-distribution",
    "href": "data_analysis__cell_distribution_across_datasets.html#donut-chart-of-cell-type-distribution",
    "title": "Data Analysis: Call Distribution Across Datasets",
    "section": "Donut Chart of Cell Type Distribution",
    "text": "Donut Chart of Cell Type Distribution\n\ndef create_donut_chart_datasets_per_tissue(df):\n    \"\"\"\n    Create a donut chart showing the distribution of unique datasets per tissue type.\n    \"\"\"\n    # Get the data for the chart\n    datasets_per_tissue = df.groupby('Tissue Type')['Dataset'].nunique().sort_values(ascending=False)\n    \n    # Create the donut chart using plotly\n    fig = px.pie(\n        values=datasets_per_tissue.values,\n        names=datasets_per_tissue.index,\n        title='Distribution of Unique Datasets per Tissue Type',\n        hole=0.4,  # Creates the donut hole\n        color_discrete_sequence=px.colors.qualitative.Set3\n    )\n    \n    # Update layout for better appearance\n    fig.update_layout(\n        title_x=0.5,  # Center the title\n        font=dict(size=12),\n        showlegend=True,\n        legend=dict(\n            orientation=\"v\",\n            yanchor=\"middle\",\n            y=0.5,\n            xanchor=\"left\",\n            x=1.05\n        ),\n        width=800,\n        height=600,\n        template='plotly_white'\n    )\n    \n    # Update traces to show both percentage and count\n    fig.update_traces(\n        textposition='inside',\n        textinfo='label+percent+value',  # Show label, percentage, and count\n        textfont_size=9,  # Slightly smaller font to fit more text\n        texttemplate='%{label}&lt;br&gt;%{percent}&lt;br&gt;(%{value})',  # Custom format with count\n        marker=dict(line=dict(color='white', width=2))\n    )\n    \n    # Add annotation in the center of the donut\n    total_datasets = datasets_per_tissue.sum()\n    fig.add_annotation(\n        text=f\"Total&lt;br&gt;{total_datasets}&lt;br&gt;Datasets\",\n        x=0.5, y=0.5,\n        font_size=16,\n        font_color=\"black\",\n        showarrow=False\n    )\n    \n    # Save the figure\n    fig.write_image(f'{os.path.join(basepath, figures_output_dir)}/datasets_per_tissue_donut_chart.png',\n                    width=800, height=600, scale=2)\n    fig.write_image(f'{os.path.join(basepath, figures_output_dir)}/datasets_per_tissue_donut_chart.svg',\n                    width=800, height=600)\n    \n    # Show the chart\n    fig.show()\n    \n    # Also print the underlying data\n    print(\"Total number of unique datasets per each tissue type:\")\n    for tissue, count in datasets_per_tissue.items():\n        print(f\"{tissue}: {count}\")\n    print(f\"\\nTotal datasets across all tissues: {total_datasets}\")\n\n# Call the function\ncreate_donut_chart_datasets_per_tissue(df_all_data)\n\n                            \n                                            \n\n\nTotal number of unique datasets per each tissue type:\nmaternalfetalinterface-mibitof-stanford: 209\nintestine-codex-stanford: 64\ncolon-xenium-stanford: 29\ncolon-cycif-sorgerlab: 25\nbonemarrow-codex-chop: 20\noralcavity-codex-czi: 13\npancreas-geomx-ufl: 12\nskin-celldive-ge: 10\nspleen-codex-ufl: 6\nlymphnode-codex-yale: 5\nskin-confocal-sorgerlab: 2\nlung-codex-urmc: 2\nesophagus-codex-stanford: 1\ntonsil-codex-stanford: 1\n\nTotal datasets across all tissues: 399\n\n\n\ndef create_donut_chart_cells_per_tissue(df):\n    \"\"\"\n    Create a donut chart showing the distribution of total cells per tissue type.\n    \"\"\"\n    # Get the data for the chart\n    cells_per_tissue = df.groupby('Tissue Type')['Original Cell Type'].count().sort_values(ascending=False)\n    \n    # Create the donut chart using plotly\n    fig = px.pie(\n        values=cells_per_tissue.values,\n        names=cells_per_tissue.index,\n        title='Distribution of Total Cells per Tissue Type',\n        hole=0.4,  # Creates the donut hole\n        color_discrete_sequence=px.colors.qualitative.Set3\n    )\n    \n    # Update layout for better appearance\n    fig.update_layout(\n        title_x=0.5,  # Center the title\n        font=dict(size=12),\n        showlegend=True,\n        legend=dict(\n            orientation=\"v\",\n            yanchor=\"middle\",\n            y=0.5,\n            xanchor=\"left\",\n            x=1.05\n        ),\n        width=800,\n        height=600,\n        template='plotly_white'\n    )\n    \n    # Update traces to show both percentage and count\n    fig.update_traces(\n        textposition='inside',\n        textinfo='label+percent+value',  # Show label, percentage, and count\n        textfont_size=9,  # Slightly smaller font to fit more text\n        texttemplate='%{label}&lt;br&gt;%{percent}&lt;br&gt;(%{value:,})',  # Custom format with count\n        marker=dict(line=dict(color='white', width=2))\n    )\n    \n    # Add annotation in the center of the donut\n    total_cells = cells_per_tissue.sum()\n    fig.add_annotation(\n        text=f\"Total&lt;br&gt;{total_cells:,}&lt;br&gt;Cells\",\n        x=0.5, y=0.5,\n        font_size=16,\n        font_color=\"black\",\n        showarrow=False\n    )\n    \n    # Save the figure\n    fig.write_image(f'{os.path.join(basepath, figures_output_dir)}/cells_per_tissue_donut_chart.png',\n                    width=800, height=600, scale=2)\n    fig.write_image(f'{os.path.join(basepath, figures_output_dir)}/cells_per_tissue_donut_chart.svg',\n                    width=800, height=600)\n    \n    # Show the chart\n    fig.show()\n    \n    # Also print the underlying data\n    print(\"Total number of cells per tissue type:\")\n    for tissue, count in cells_per_tissue.items():\n        print(f\"{tissue}: {count:,}\")\n    print(f\"\\nTotal cells across all tissues: {total_cells:,}\")\n\n# Call the function\ncreate_donut_chart_cells_per_tissue(df_all_data)\n\n                            \n                                            \n\n\nTotal number of cells per tissue type:\npancreas-geomx-ufl: 14,891,875\ncolon-cycif-sorgerlab: 12,758,141\nlymphnode-codex-yale: 8,918,845\ncolon-xenium-stanford: 2,639,215\nintestine-codex-stanford: 2,512,185\noralcavity-codex-czi: 1,412,189\nbonemarrow-codex-chop: 1,214,088\nlung-codex-urmc: 1,209,309\nspleen-codex-ufl: 992,398\nmaternalfetalinterface-mibitof-stanford: 477,747\ntonsil-codex-stanford: 173,968\nskin-confocal-sorgerlab: 55,255\nskin-celldive-ge: 48,323\nesophagus-codex-stanford: 45,958\n\nTotal cells across all tissues: 47,349,496",
    "crumbs": [
      "Data Analysis: Call Distribution Across Datasets"
    ]
  },
  {
    "objectID": "distance_analysis__bonemarrow-codex-chop.html",
    "href": "distance_analysis__bonemarrow-codex-chop.html",
    "title": "Distance Analysis: bonemarrow-codex-chop",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"bonemarrow-codex-chop\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            dataset_name, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: bonemarrow-codex-chop"
    ]
  },
  {
    "objectID": "distance_analysis__bonemarrow-codex-chop.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__bonemarrow-codex-chop.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: bonemarrow-codex-chop",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n5776.546667\n4000.546667\nErythroid\nerythroid lineage cell\nerythroid lineage cell\nCL:0000764\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n1\n6406.298077\n4001.134615\nB-Cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n2\n6805.010526\n4000.701754\nErythroid\nerythroid lineage cell\nerythroid lineage cell\nCL:0000764\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n3\n6032.794326\n4002.039007\nAEC\nendothelial cell of artery\nendothelial cell of artery\nCL:1000413\nskos:exactMatch\nendothelial cell of artery\nendothelial cell of artery\nCL:1000413\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n4\n6159.116364\n4001.763636\nEarly Myeloid Progenitor\nmyeloid progenitor cell:common\ncommon myeloid progenitor\nCL:0000049\nskos:exactMatch\nprogenitor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n\n\n\n\n\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 37\nLevel Three Cell Type: 33\nLevel Two Cell Type: 22\nLevel One Cell Type: 6\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n\nLevel Three Cell Type:\n  - endothelial cell of artery\n  - endothelial cell of sinusoid\n\nLevel Two Cell Type:\n  - endothelial cell of artery\n  - endothelial cell of sinusoid\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell of sinusoid', # Picking sinusoid instead of artery because the cell count of sinusoid is higher than artery in the dataset.\n    'Level Two Cell Type': 'endothelial cell of sinusoid',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: bonemarrow-codex-chop"
    ]
  },
  {
    "objectID": "distance_analysis__bonemarrow-codex-chop.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__bonemarrow-codex-chop.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: bonemarrow-codex-chop",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# Print unique values in Dataset column as a list.\nprint(\"\\nUnique values in Dataset column:\")\nprint(df_all_edges['Dataset'].unique().tolist())\n\n\nUnique values in Dataset column:\n['SB67_NBM48_NSM1_1720', 'SB67_NBM49_NSM2_1086', 'SB67_NBM47_NSM3_1996', 'SB67_NBM51_AML1_183', 'SB67_NBM46_AML1_382', 'SB67_NBM44_AML2_191', 'SB67_NBM52_AML3_1329', 'SB67_NBM54_AML3_1443', 'SB67_NBM27_H10', 'SB67_NBM28_H14', 'SB67_NBM36_H26', 'SB67_NBM41_H27', 'SB67_NBM31_H32', 'SB67_NBM38_H33', 'SB67_NBM37_H35', 'SB67_NBM33_H36', 'SB67_NBM32_H37', 'SB67_NBM34_H38', 'SB67_NBM40_H39', 'SB67_NBM39_H41']\n\n\n\n# Create a dictionary to map bone marrow regions to correct region names (conditions).\n# AML = Acute Myeloid Leukemia\n# NSM = Negative lymphoma Staging bone Marrow biopsies\n# NBM = Normal Bone Marrow\nregion_map = {\n    'SB67_NBM48_NSM1_1720': 'NSM', \n    'SB67_NBM49_NSM2_1086': 'NSM', \n    'SB67_NBM47_NSM3_1996': 'NSM', \n    'SB67_NBM51_AML1_183': 'AML', \n    'SB67_NBM46_AML1_382': 'AML', \n    'SB67_NBM44_AML2_191': 'AML', \n    'SB67_NBM52_AML3_1329': 'AML', \n    'SB67_NBM54_AML3_1443': 'AML', \n    'SB67_NBM27_H10': 'NBM', \n    'SB67_NBM28_H14': 'NBM', \n    'SB67_NBM36_H26': 'NBM', \n    'SB67_NBM41_H27': 'NBM', \n    'SB67_NBM31_H32': 'NBM', \n    'SB67_NBM38_H33': 'NBM', \n    'SB67_NBM37_H35': 'NBM', \n    'SB67_NBM33_H36': 'NBM', \n    'SB67_NBM32_H37': 'NBM', \n    'SB67_NBM34_H38': 'NBM', \n    'SB67_NBM40_H39': 'NBM', \n    'SB67_NBM39_H41': 'NBM'\n}\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n5776.546667\n4000.546667\nErythroid\nerythroid lineage cell\nerythroid lineage cell\nCL:0000764\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n1\n6406.298077\n4001.134615\nB-Cells\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nb cell\nB cell\nCL:0000236\nskos:exactMatch\nimmune cell\nleukocyte\nCL:0000738\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n2\n6805.010526\n4000.701754\nErythroid\nerythroid lineage cell\nerythroid lineage cell\nCL:0000764\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n3\n6032.794326\n4002.039007\nAEC\nendothelial cell of artery\nendothelial cell of artery\nCL:1000413\nskos:exactMatch\nendothelial cell of artery\nendothelial cell of artery\nCL:1000413\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n4\n6159.116364\n4001.763636\nEarly Myeloid Progenitor\nmyeloid progenitor cell:common\ncommon myeloid progenitor\nCL:0000049\nskos:exactMatch\nprogenitor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nSB67_NBM48_NSM1_1720\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new column \"Unique Region\" based on the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nSB67_NBM48_NSM1_1720\nNSM\n\n\n1\nSB67_NBM48_NSM1_1720\nNSM\n\n\n2\nSB67_NBM48_NSM1_1720\nNSM\n\n\n3\nSB67_NBM48_NSM1_1720\nNSM\n\n\n4\nSB67_NBM48_NSM1_1720\nNSM\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_datasets = df_all_nodes[df_all_nodes['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['NSM' 'AML' 'NBM']\nTotal number of unique regions: 3\n\nNumber of unique datasets per unique region:\nNSM: 3\nAML: 5\nNBM: 12",
    "crumbs": [
      "Distance Analysis: bonemarrow-codex-chop"
    ]
  },
  {
    "objectID": "distance_analysis__bonemarrow-codex-chop.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__bonemarrow-codex-chop.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: bonemarrow-codex-chop",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n1117\n5746.650000\n4541.361111\n0\n5895.403361\n4573.613445\n0\n152.209644\nSB67_NBM48_NSM1_1720\nendothelial cell of artery\nLevel Three Cell Type\n\n\n1\n1145\n5734.788679\n4551.400000\n0\n5895.403361\n4573.613445\n0\n162.143496\nSB67_NBM48_NSM1_1720\nendothelial cell of artery\nLevel Three Cell Type\n\n\n2\n1151\n5756.300000\n4553.104348\n0\n5895.403361\n4573.613445\n0\n140.607141\nSB67_NBM48_NSM1_1720\nendothelial cell of artery\nLevel Three Cell Type\n\n\n3\n1185\n5746.238095\n4563.619048\n0\n5895.403361\n4573.613445\n0\n149.499714\nSB67_NBM48_NSM1_1720\nendothelial cell of artery\nLevel Three Cell Type\n\n\n4\n1268\n5624.227027\n4594.664865\n0\n5541.917031\n4700.170306\n0\n133.814549\nSB67_NBM48_NSM1_1720\nendothelial cell of artery\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nSB67_NBM48_NSM1_1720\nNSM\n\n\n1\nSB67_NBM48_NSM1_1720\nNSM\n\n\n2\nSB67_NBM48_NSM1_1720\nNSM\n\n\n3\nSB67_NBM48_NSM1_1720\nNSM\n\n\n4\nSB67_NBM48_NSM1_1720\nNSM\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print the total number of unique regions.\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique datasets per unique region.\nprint(\"\\nNumber of unique datasets per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_datasets = df_all_edges[df_all_edges['Unique Region'] == region]['Dataset'].nunique()\n    print(f\"{region}: {num_datasets}\")\n\n\nUnique Regions in the data:\n['NSM' 'AML' 'NBM']\nTotal number of unique regions: 3\n\nNumber of unique datasets per unique region:\nNSM: 3\nAML: 5\nNBM: 12\n\n\n\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nUnique Region\n\n\n\n\n0\nSB67_NBM48_NSM1_1720\nNSM\n\n\n1\nSB67_NBM48_NSM1_1720\nNSM\n\n\n2\nSB67_NBM48_NSM1_1720\nNSM\n\n\n3\nSB67_NBM48_NSM1_1720\nNSM\n\n\n4\nSB67_NBM48_NSM1_1720\nNSM\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nUnique Region\n\n\n\n\n0\n5776.546667\n4000.546667\nErythroid\nerythroid lineage cell\nerythroid lineage cell\nCL:0000764\nskos:exactMatch\nerythroid precursor\nerythroid progenitor cell\nCL:0000038\nskos:exactMatch\nhematopoietic precursor cell\nhematopoietic precursor cell\nCL:0008001\nskos:exactMatch\nSB67_NBM48_NSM1_1720\nNSM\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nUnique Region\n\n\n\n\n0\n1117\n5746.65\n4541.361111\n0\n5895.403361\n4573.613445\n0\n152.209644\nSB67_NBM48_NSM1_1720\nendothelial cell of artery\nLevel Three Cell Type\nNSM\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nUnique Region\n\n\n\n\n0\n1117\n5746.65\n4541.361111\n0\n5895.403361\n4573.613445\n0\n152.209644\nSB67_NBM48_NSM1_1720\nendothelial cell of artery\nLevel Three Cell Type\nerythroid lineage cell\nerythroid precursor\nhematopoietic precursor cell\nNSM",
    "crumbs": [
      "Distance Analysis: bonemarrow-codex-chop"
    ]
  },
  {
    "objectID": "distance_analysis__bonemarrow-codex-chop.html#node-analysis",
    "href": "distance_analysis__bonemarrow-codex-chop.html#node-analysis",
    "title": "Distance Analysis: bonemarrow-codex-chop",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(20, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region')\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: bonemarrow-codex-chop"
    ]
  },
  {
    "objectID": "distance_analysis__bonemarrow-codex-chop.html#distance-analysis",
    "href": "distance_analysis__bonemarrow-codex-chop.html#distance-analysis",
    "title": "Distance Analysis: bonemarrow-codex-chop",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nAML\nendothelial cell\nLevel One Cell Type\n74.382151\n66.806253\n6.056625\n199.988548\n\n\n1\nAML\nendothelial cell of artery\nLevel Three Cell Type\n111.758598\n112.688440\n8.275107\n199.997878\n\n\n2\nAML\nendothelial cell of artery\nLevel Two Cell Type\n111.758598\n112.688440\n8.275107\n199.997878\n\n\n3\nAML\nendothelial cell of sinusoid\nLevel Three Cell Type\n79.390329\n72.177834\n6.056625\n199.988548\n\n\n4\nAML\nendothelial cell of sinusoid\nLevel Two Cell Type\n79.390329\n72.177834\n6.056625\n199.988548\n\n\n5\nNBM\nendothelial cell\nLevel One Cell Type\n90.322695\n85.240398\n5.750231\n199.999142\n\n\n6\nNBM\nendothelial cell of artery\nLevel Three Cell Type\n115.284424\n119.163665\n5.750231\n199.999998\n\n\n7\nNBM\nendothelial cell of artery\nLevel Two Cell Type\n115.284424\n119.163665\n5.750231\n199.999998\n\n\n8\nNBM\nendothelial cell of sinusoid\nLevel Three Cell Type\n95.298876\n91.351118\n7.165130\n199.999142\n\n\n9\nNBM\nendothelial cell of sinusoid\nLevel Two Cell Type\n95.298876\n91.351118\n7.165130\n199.999142\n\n\n10\nNSM\nendothelial cell\nLevel One Cell Type\n93.842789\n87.951406\n7.675593\n199.997910\n\n\n11\nNSM\nendothelial cell of artery\nLevel Three Cell Type\n117.211880\n121.868198\n8.340683\n199.999051\n\n\n12\nNSM\nendothelial cell of artery\nLevel Two Cell Type\n117.211880\n121.868198\n8.340683\n199.999051\n\n\n13\nNSM\nendothelial cell of sinusoid\nLevel Three Cell Type\n95.636834\n90.176577\n7.675593\n199.997910\n\n\n14\nNSM\nendothelial cell of sinusoid\nLevel Two Cell Type\n95.636834\n90.176577\n7.675593\n199.997910\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nhematopoietic precursor cell\nAML\n75.807458\n68.350787\n6.056625\n199.982016\n\n\n1\nhematopoietic precursor cell\nNBM\n91.437465\n86.347062\n7.368943\n199.999142\n\n\n2\nhematopoietic precursor cell\nNSM\n95.233485\n89.641506\n8.036234\n199.985663\n\n\n3\nimmune cell\nAML\n72.244373\n64.713204\n8.247845\n199.988548\n\n\n4\nimmune cell\nNBM\n89.656605\n84.596595\n5.750231\n199.998770\n\n\n5\nimmune cell\nNSM\n93.334766\n87.175896\n7.675593\n199.997383\n\n\n6\nmesenchymal cell\nAML\n68.072424\n59.045392\n8.275107\n198.703670\n\n\n7\nmesenchymal cell\nNBM\n82.079626\n75.429180\n7.596170\n199.992343\n\n\n8\nmesenchymal cell\nNSM\n79.140648\n69.671854\n8.344688\n199.997910\n\n\n9\nneural cell\nAML\n79.843632\n79.843632\n61.290397\n98.396868\n\n\n10\nneural cell\nNBM\n57.869702\n49.944344\n9.815320\n187.956746\n\n\n11\nunknown cell\nNBM\n91.914579\n87.038869\n6.586107\n199.984000\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in NSM:\n            Level One Cell Type  mean_distance\n0  hematopoietic precursor cell      95.233485\n1                   immune cell      93.334766\n2              mesenchymal cell      79.140648\n\nBottom 5 cell types in NSM:\n            Level One Cell Type  mean_distance\n0  hematopoietic precursor cell      95.233485\n1                   immune cell      93.334766\n2              mesenchymal cell      79.140648\n\nTop 5 cell types in AML:\n            Level One Cell Type  mean_distance\n3                   neural cell      79.843632\n0  hematopoietic precursor cell      75.807458\n1                   immune cell      72.244373\n2              mesenchymal cell      68.072424\n\nBottom 5 cell types in AML:\n            Level One Cell Type  mean_distance\n3                   neural cell      79.843632\n0  hematopoietic precursor cell      75.807458\n1                   immune cell      72.244373\n2              mesenchymal cell      68.072424\n\nTop 5 cell types in NBM:\n            Level One Cell Type  mean_distance\n4                  unknown cell      91.914579\n0  hematopoietic precursor cell      91.437465\n1                   immune cell      89.656605\n2              mesenchymal cell      82.079626\n3                   neural cell      57.869702\n\nBottom 5 cell types in NBM:\n            Level One Cell Type  mean_distance\n4                  unknown cell      91.914579\n0  hematopoietic precursor cell      91.437465\n1                   immune cell      89.656605\n2              mesenchymal cell      82.079626\n3                   neural cell      57.869702\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in NSM:\n            Level One Cell Type  median_distance\n0  hematopoietic precursor cell        89.641506\n1                   immune cell        87.175896\n2              mesenchymal cell        69.671854\n\nBottom 5 cell types in NSM:\n            Level One Cell Type  median_distance\n0  hematopoietic precursor cell        89.641506\n1                   immune cell        87.175896\n2              mesenchymal cell        69.671854\n\nTop 5 cell types in AML:\n            Level One Cell Type  median_distance\n3                   neural cell        79.843632\n0  hematopoietic precursor cell        68.350787\n1                   immune cell        64.713204\n2              mesenchymal cell        59.045392\n\nBottom 5 cell types in AML:\n            Level One Cell Type  median_distance\n3                   neural cell        79.843632\n0  hematopoietic precursor cell        68.350787\n1                   immune cell        64.713204\n2              mesenchymal cell        59.045392\n\nTop 5 cell types in NBM:\n            Level One Cell Type  median_distance\n4                  unknown cell        87.038869\n0  hematopoietic precursor cell        86.347062\n1                   immune cell        84.596595\n2              mesenchymal cell        75.429180\n3                   neural cell        49.944344\n\nBottom 5 cell types in NBM:\n            Level One Cell Type  median_distance\n4                  unknown cell        87.038869\n0  hematopoietic precursor cell        86.347062\n1                   immune cell        84.596595\n2              mesenchymal cell        75.429180\n3                   neural cell        49.944344\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nAML            74.38  42.82    57.6\nNBM            90.32  48.07    53.2\nNSM            93.84  50.99    54.3\n\nCell Type Variability Analysis (sorted by CV):\n                               mean    std  CV (%)\nLevel One Cell Type                               \nneural cell                   58.71  38.97    66.4\nmesenchymal cell              79.84  49.34    61.8\nimmune cell                   88.12  48.41    54.9\nhematopoietic precursor cell  88.63  47.43    53.5\nunknown cell                  91.91  48.28    52.5\n\n\n\n# Define the standard region sequence for plots\nregions = ['NBM', 'AML', 'NSM']\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 6))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(16, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral') # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(15, 10))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(3, 1, figsize=(10, 15)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size, y=1)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        # axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        # only show xtick labels for the last subplot\n        if i &lt; len(regions) - 1:\n            axs[i].set_xticklabels([])\n        else:\n            axs[i].set_xticklabels(cell_types, fontsize=font_size, rotation=90, ha='right')\n        # axs[i].set_ylim(0, data_reg['Distance'].max() * 1.1)  # Set y-limits to be consistent across all plots\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nabnormal cell\nAML\n84.612826\n78.755366\n7.350124\n199.982016\n\n\n1\nadipocyte\nAML\n72.044065\n61.569803\n9.299294\n198.520789\n\n\n2\nadipocyte\nNBM\n92.656243\n88.435461\n8.040248\n199.992343\n\n\n3\nadipocyte\nNSM\n84.007363\n76.639037\n8.344688\n199.997910\n\n\n4\nb cell\nAML\n78.392682\n71.243188\n9.244128\n199.966621\n\n\n5\nb cell\nNBM\n97.615652\n95.012793\n8.025751\n199.996640\n\n\n6\nb cell\nNSM\n96.232882\n91.578635\n9.240345\n199.991504\n\n\n7\ndendritic cell\nAML\n79.071847\n72.219946\n9.452268\n199.541677\n\n\n8\ndendritic cell\nNBM\n94.921339\n90.375897\n8.032959\n199.978479\n\n\n9\ndendritic cell\nNSM\n96.121120\n90.482325\n10.456776\n199.356229\n\n\n10\nendothelial cell of artery\nAML\n66.552461\n57.188080\n9.598652\n197.775548\n\n\n11\nendothelial cell of artery\nNBM\n80.875474\n71.598061\n7.165130\n199.696671\n\n\n12\nendothelial cell of artery\nNSM\n65.333875\n55.348929\n8.340683\n199.496217\n\n\n13\nerythroid precursor\nAML\n75.974098\n67.872764\n7.687746\n199.911019\n\n\n14\nerythroid precursor\nNBM\n95.055450\n90.578380\n7.368943\n199.990928\n\n\n15\nerythroid precursor\nNSM\n97.332711\n92.296305\n8.124669\n199.985663\n\n\n16\nhematopoietic stem and progenitor cell\nAML\n54.563528\n37.139774\n9.123395\n189.847535\n\n\n17\nhematopoietic stem and progenitor cell\nNBM\n95.280715\n93.347852\n9.670863\n199.738928\n\n\n18\nhematopoietic stem and progenitor cell\nNSM\n104.959083\n98.965058\n13.524865\n196.588555\n\n\n19\nmacrophage\nAML\n73.826747\n67.164529\n9.347675\n198.307993\n\n\n20\nmacrophage\nNBM\n96.799495\n91.931956\n8.152219\n199.997797\n\n\n21\nmacrophage\nNSM\n90.324484\n82.094705\n9.073456\n199.512374\n\n\n22\nmegakaryocyte\nAML\n77.991861\n68.126728\n9.953335\n199.430617\n\n\n23\nmegakaryocyte\nNBM\n98.795997\n94.345559\n8.774989\n199.937106\n\n\n24\nmegakaryocyte\nNSM\n98.796581\n92.705512\n12.087462\n199.884221\n\n\n25\nmesenchymal stem cell\nAML\n78.724108\n71.696786\n8.585049\n198.703670\n\n\n26\nmesenchymal stem cell\nNBM\n91.666993\n87.259370\n9.507509\n199.986823\n\n\n27\nmesenchymal stem cell\nNSM\n87.206186\n83.498779\n9.652741\n199.570947\n\n\n28\nmesenchymal stem/stromal cell\nAML\n75.223250\n65.025012\n10.898685\n199.967713\n\n\n29\nmesenchymal stem/stromal cell\nNBM\n91.820716\n86.924087\n7.572935\n199.852192\n\n\n30\nmesenchymal stem/stromal cell\nNSM\n91.464706\n80.083330\n10.301344\n199.472893\n\n\n31\nmonocyte\nAML\n82.273906\n76.137286\n8.868460\n199.876784\n\n\n32\nmonocyte\nNBM\n91.519407\n86.756461\n7.351953\n199.985575\n\n\n33\nmonocyte\nNSM\n92.240440\n85.765454\n8.268363\n199.934336\n\n\n34\nmuscle cell\nAML\n69.735721\n59.183423\n10.271701\n194.082988\n\n\n35\nmuscle cell\nNBM\n94.216885\n87.575318\n9.427550\n199.834792\n\n\n36\nmuscle cell\nNSM\n55.313443\n46.465657\n10.248018\n198.935026\n\n\n37\nmyeloid cell\nAML\n76.635516\n68.660555\n8.373370\n199.748940\n\n\n38\nmyeloid cell\nNBM\n93.908272\n89.618397\n7.514845\n199.998770\n\n\n39\nmyeloid cell\nNSM\n95.283475\n89.390289\n7.675593\n199.984961\n\n\n40\nmyeloid precursor\nAML\n80.963771\n73.387438\n8.604672\n199.919874\n\n\n41\nmyeloid precursor\nNBM\n96.919348\n93.418496\n7.505009\n199.999142\n\n\n42\nmyeloid precursor\nNSM\n97.037575\n92.060765\n8.173025\n199.969054\n\n\n43\nneuroglial cell\nAML\n128.321993\n128.321993\n128.321993\n128.321993\n\n\n44\nneuroglial cell\nNBM\n86.411262\n78.933059\n17.934662\n175.871271\n\n\n45\nprogenitor cell\nAML\n78.395834\n70.509229\n6.056625\n199.797032\n\n\n46\nprogenitor cell\nNBM\n98.953368\n96.413601\n8.000469\n199.988637\n\n\n47\nprogenitor cell\nNSM\n97.117247\n92.464861\n9.423956\n199.969595\n\n\n48\nskeletal stromal cell\nAML\n78.238144\n65.728809\n13.246899\n195.060591\n\n\n49\nskeletal stromal cell\nNBM\n94.062042\n88.538574\n8.954561\n199.829571\n\n\n50\nskeletal stromal cell\nNSM\n89.169229\n77.967966\n11.309889\n198.710354\n\n\n51\nstem cell\nAML\n70.097786\n59.523007\n10.801688\n193.191236\n\n\n52\nstem cell\nNBM\n96.060575\n92.318654\n9.741716\n199.970348\n\n\n53\nstem cell\nNSM\n92.740997\n90.714633\n8.036234\n199.237795\n\n\n54\nt cell\nAML\n80.957774\n73.440678\n8.247845\n199.988548\n\n\n55\nt cell\nNBM\n94.412441\n90.318472\n8.190426\n199.995542\n\n\n56\nt cell\nNSM\n94.730211\n88.963905\n9.018322\n199.997383\n\n\n57\nunknown cell\nNBM\n96.310960\n92.693095\n8.043118\n199.984452\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in NSM:\n                       Level Two Cell Type  mean_distance\n5   hematopoietic stem and progenitor cell     104.959083\n7                            megakaryocyte      98.796581\n4                     erythroid precursor       97.332711\n14                         progenitor cell      97.117247\n13                       myeloid precursor      97.037575\n\nBottom 5 cell types in NSM:\n           Level Two Cell Type  mean_distance\n15       skeletal stromal cell      89.169229\n8        mesenchymal stem cell      87.206186\n0                    adipocyte      84.007363\n3   endothelial cell of artery      65.333875\n11                 muscle cell      55.313443\n\nTop 5 cell types in AML:\n   Level Two Cell Type  mean_distance\n15     neuroglial cell     128.321993\n0        abnormal cell      84.612826\n11            monocyte      82.273906\n14   myeloid precursor      80.963771\n19              t cell      80.957774\n\nBottom 5 cell types in AML:\n                       Level Two Cell Type  mean_distance\n1                                adipocyte      72.044065\n18                               stem cell      70.097786\n12                             muscle cell      69.735721\n4               endothelial cell of artery      66.552461\n6   hematopoietic stem and progenitor cell      54.563528\n\nTop 5 cell types in NBM:\n   Level Two Cell Type  mean_distance\n15     progenitor cell      98.953368\n7        megakaryocyte      98.795997\n1               b cell      97.615652\n13   myeloid precursor      96.919348\n6           macrophage      96.799495\n\nBottom 5 cell types in NBM:\n              Level Two Cell Type  mean_distance\n9   mesenchymal stem/stromal cell      91.820716\n8           mesenchymal stem cell      91.666993\n10                       monocyte      91.519407\n14                neuroglial cell      86.411262\n3      endothelial cell of artery      80.875474\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in NSM:\n                       Level Two Cell Type  median_distance\n5   hematopoietic stem and progenitor cell        98.965058\n7                            megakaryocyte        92.705512\n14                         progenitor cell        92.464861\n4                     erythroid precursor         92.296305\n13                       myeloid precursor        92.060765\n\nBottom 5 cell types in NSM:\n              Level Two Cell Type  median_distance\n9   mesenchymal stem/stromal cell        80.083330\n15          skeletal stromal cell        77.967966\n0                       adipocyte        76.639037\n3      endothelial cell of artery        55.348929\n11                    muscle cell        46.465657\n\nTop 5 cell types in AML:\n   Level Two Cell Type  median_distance\n15     neuroglial cell       128.321993\n0        abnormal cell        78.755366\n11            monocyte        76.137286\n19              t cell        73.440678\n14   myeloid precursor        73.387438\n\nBottom 5 cell types in AML:\n                       Level Two Cell Type  median_distance\n1                                adipocyte        61.569803\n18                               stem cell        59.523007\n12                             muscle cell        59.183423\n4               endothelial cell of artery        57.188080\n6   hematopoietic stem and progenitor cell        37.139774\n\nTop 5 cell types in NBM:\n                       Level Two Cell Type  median_distance\n15                         progenitor cell        96.413601\n1                                   b cell        95.012793\n7                            megakaryocyte        94.345559\n13                       myeloid precursor        93.418496\n5   hematopoietic stem and progenitor cell        93.347852\n\nBottom 5 cell types in NBM:\n              Level Two Cell Type  median_distance\n8           mesenchymal stem cell        87.259370\n9   mesenchymal stem/stromal cell        86.924087\n10                       monocyte        86.756461\n14                neuroglial cell        78.933059\n3      endothelial cell of artery        71.598061\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nAML            79.39  44.80    56.4\nNBM            95.30  48.83    51.2\nNSM            95.64  51.03    53.4\n\nCell Type Variability Analysis (sorted by CV):\n                                         mean    std  CV (%)\nLevel Two Cell Type                                         \nendothelial cell of artery              77.69  52.16    67.1\nmuscle cell                             87.24  50.87    58.3\nskeletal stromal cell                   92.68  52.72    56.9\nadipocyte                               89.36  50.19    56.2\nmonocyte                                89.60  49.68    55.4\nmesenchymal stem cell                   87.59  48.55    55.4\nmesenchymal stem/stromal cell           89.52  48.91    54.6\ndendritic cell                          89.61  48.91    54.6\nt cell                                  92.82  49.73    53.6\nhematopoietic stem and progenitor cell  93.87  49.72    53.0\nmyeloid cell                            93.01  49.27    53.0\nabnormal cell                           84.61  44.08    52.1\nerythroid precursor                     92.48  48.09    52.0\nmyeloid precursor                       94.87  49.06    51.7\nstem cell                               94.15  48.57    51.6\nmacrophage                              92.25  47.60    51.6\nb cell                                  94.91  48.86    51.5\nprogenitor cell                         95.58  49.02    51.3\nunknown cell                            96.31  48.92    50.8\nneuroglial cell                         87.43  43.59    49.9\nmegakaryocyte                           94.69  47.09    49.7\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nadipocyte\nAML\n72.044065\n61.569803\n9.299294\n198.520789\n\n\n1\nadipocyte\nNBM\n92.656243\n88.435461\n8.040248\n199.992343\n\n\n2\nadipocyte\nNSM\n84.007363\n76.639037\n8.344688\n199.997910\n\n\n3\nb cell\nAML\n76.143453\n68.752778\n9.244128\n199.966621\n\n\n4\nb cell\nNBM\n96.138631\n92.508923\n8.025751\n199.972480\n\n\n5\nb cell\nNSM\n94.707460\n89.148689\n9.240345\n199.991504\n\n\n6\nb cell:immature\nAML\n82.461384\n75.703532\n10.072227\n199.483659\n\n\n7\nb cell:immature\nNBM\n99.501175\n96.731118\n8.874948\n199.954603\n\n\n8\nb cell:immature\nNSM\n97.478212\n92.747527\n9.555029\n199.569086\n\n\n9\ncell:cd34+ cd61+\nAML\n74.287460\n57.285741\n11.620897\n170.297284\n\n\n10\ncell:cd34+ cd61+\nNBM\n97.082979\n99.005114\n9.337088\n198.401642\n\n\n11\ncell:cd34+ cd61+\nNSM\n54.635086\n52.248486\n48.701567\n67.252810\n\n\n12\ndendritic cell:plasmacytoid\nAML\n79.071847\n72.219946\n9.452268\n199.541677\n\n\n13\ndendritic cell:plasmacytoid\nNBM\n94.921339\n90.375897\n8.032959\n199.978479\n\n\n14\ndendritic cell:plasmacytoid\nNSM\n96.121120\n90.482325\n10.456776\n199.356229\n\n\n15\nendosteal cell\nAML\n78.238144\n65.728809\n13.246899\n195.060591\n\n\n16\nendosteal cell\nNBM\n94.062042\n88.538574\n8.954561\n199.829571\n\n\n17\nendosteal cell\nNSM\n89.169229\n77.967966\n11.309889\n198.710354\n\n\n18\nendothelial cell of artery\nAML\n66.552461\n57.188080\n9.598652\n197.775548\n\n\n19\nendothelial cell of artery\nNBM\n80.875474\n71.598061\n7.165130\n199.696671\n\n\n20\nendothelial cell of artery\nNSM\n65.333875\n55.348929\n8.340683\n199.496217\n\n\n21\nerythroblast\nAML\n74.204032\n67.595458\n9.345520\n199.710488\n\n\n22\nerythroblast\nNBM\n97.493233\n93.445013\n9.438919\n199.976653\n\n\n23\nerythroblast\nNSM\n99.975515\n94.923044\n10.526460\n199.917168\n\n\n24\nerythroblast:basophilic\nAML\n52.951975\n49.722590\n12.385871\n159.571485\n\n\n25\nerythroblast:basophilic\nNBM\n93.121025\n93.171093\n9.946056\n199.013021\n\n\n26\nerythroblast:basophilic\nNSM\n69.175800\n50.068324\n21.363562\n131.777261\n\n\n27\nerythroid lineage cell\nAML\n76.378711\n67.967844\n7.687746\n199.911019\n\n\n28\nerythroid lineage cell\nNBM\n94.931105\n90.427830\n7.368943\n199.990928\n\n\n29\nerythroid lineage cell\nNSM\n96.871888\n91.762574\n8.124669\n199.985663\n\n\n30\ngranulocyte monocyte progenitor cell\nAML\n70.212475\n62.399469\n8.821407\n193.766544\n\n\n31\ngranulocyte monocyte progenitor cell\nNBM\n99.994036\n96.974877\n10.086847\n199.377339\n\n\n32\ngranulocyte monocyte progenitor cell\nNSM\n113.471237\n118.935939\n24.621301\n195.612217\n\n\n33\ngranulocyte monocyte progenitor cell/myeloblast\nAML\n72.415964\n63.423578\n10.196329\n190.981269\n\n\n34\ngranulocyte monocyte progenitor cell/myeloblast\nNBM\n96.890873\n95.757879\n10.523154\n199.686919\n\n\n35\ngranulocyte monocyte progenitor cell/myeloblast\nNSM\n94.198042\n90.199936\n12.603882\n198.890799\n\n\n36\nhematopoietic stem and progenitor cell:spink2+\nAML\n54.563528\n37.139774\n9.123395\n189.847535\n\n\n37\nhematopoietic stem and progenitor cell:spink2+\nNBM\n95.280715\n93.347852\n9.670863\n199.738928\n\n\n38\nhematopoietic stem and progenitor cell:spink2+\nNSM\n104.959083\n98.965058\n13.524865\n196.588555\n\n\n39\nhematopoietic stem cell\nAML\n70.097786\n59.523007\n10.801688\n193.191236\n\n\n40\nhematopoietic stem cell\nNBM\n96.060575\n92.318654\n9.741716\n199.970348\n\n\n41\nhematopoietic stem cell\nNSM\n92.740997\n90.714633\n8.036234\n199.237795\n\n\n42\nlymphoid progenitor cell:common\nAML\n70.369095\n33.321110\n11.891835\n184.838570\n\n\n43\nlymphoid progenitor cell:common\nNBM\n101.297912\n103.775147\n8.703396\n198.679098\n\n\n44\nlymphoid progenitor cell:common\nNSM\n48.644547\n48.644547\n40.392837\n56.896257\n\n\n45\nmacrophage\nAML\n73.826747\n67.164529\n9.347675\n198.307993\n\n\n46\nmacrophage\nNBM\n96.799495\n91.931956\n8.152219\n199.997797\n\n\n47\nmacrophage\nNSM\n90.324484\n82.094705\n9.073456\n199.512374\n\n\n48\nmegakaryocyte:gata1+\nAML\n76.859027\n67.759673\n11.187479\n199.345585\n\n\n49\nmegakaryocyte:gata1+\nNBM\n96.565594\n89.912296\n15.171096\n199.835750\n\n\n50\nmegakaryocyte:gata1+\nNSM\n99.813171\n94.046165\n12.087462\n199.884221\n\n\n51\nmegakaryocyte:gata1-\nAML\n81.549157\n71.445335\n9.953335\n199.430617\n\n\n52\nmegakaryocyte:gata1-\nNBM\n99.683106\n95.220876\n8.774989\n199.937106\n\n\n53\nmegakaryocyte:gata1-\nNSM\n96.343558\n87.702763\n14.433768\n198.666219\n\n\n54\nmesenchymal stem cell of adipose tissue\nAML\n78.724108\n71.696786\n8.585049\n198.703670\n\n\n55\nmesenchymal stem cell of adipose tissue\nNBM\n91.666993\n87.259370\n9.507509\n199.986823\n\n\n56\nmesenchymal stem cell of adipose tissue\nNSM\n87.206186\n83.498779\n9.652741\n199.570947\n\n\n57\nmesenchymal stem/stromal cell:thy1+\nAML\n75.223250\n65.025012\n10.898685\n199.967713\n\n\n58\nmesenchymal stem/stromal cell:thy1+\nNBM\n91.820716\n86.924087\n7.572935\n199.852192\n\n\n59\nmesenchymal stem/stromal cell:thy1+\nNSM\n91.464706\n80.083330\n10.301344\n199.472893\n\n\n60\nmonocyte\nAML\n81.998821\n75.975206\n8.868460\n199.876784\n\n\n61\nmonocyte\nNBM\n91.803183\n87.198437\n7.351953\n199.985575\n\n\n62\nmonocyte\nNSM\n91.957353\n85.202021\n8.268363\n199.934336\n\n\n63\nmonocyte:non-classical\nAML\n84.404224\n77.154945\n10.042509\n199.557398\n\n\n64\nmonocyte:non-classical\nNBM\n89.394134\n83.017617\n8.634223\n199.962583\n\n\n65\nmonocyte:non-classical\nNSM\n94.928483\n89.610892\n10.244014\n199.859496\n\n\n66\nmuscle cell:smooth\nAML\n69.735721\n59.183423\n10.271701\n194.082988\n\n\n67\nmuscle cell:smooth\nNBM\n94.216885\n87.575318\n9.427550\n199.834792\n\n\n68\nmuscle cell:smooth\nNSM\n55.313443\n46.465657\n10.248018\n198.935026\n\n\n69\nmutant blast:npm1\nAML\n84.612826\n78.755366\n7.350124\n199.982016\n\n\n70\nmyeloid cell:intermediate\nAML\n81.373170\n73.925935\n8.604672\n199.919874\n\n\n71\nmyeloid cell:intermediate\nNBM\n96.900964\n93.360407\n7.505009\n199.999142\n\n\n72\nmyeloid cell:intermediate\nNSM\n97.020277\n92.018090\n8.173025\n199.969054\n\n\n73\nmyeloid cell:mature\nAML\n76.635516\n68.660555\n8.373370\n199.748940\n\n\n74\nmyeloid cell:mature\nNBM\n93.908272\n89.618397\n7.514845\n199.998770\n\n\n75\nmyeloid cell:mature\nNSM\n95.283475\n89.390289\n7.675593\n199.984961\n\n\n76\nmyeloid progenitor cell:common\nAML\n78.406261\n70.510293\n6.056625\n199.797032\n\n\n77\nmyeloid progenitor cell:common\nNBM\n98.947282\n96.400048\n8.000469\n199.988637\n\n\n78\nmyeloid progenitor cell:common\nNSM\n97.127281\n92.476823\n9.423956\n199.969595\n\n\n79\nplasma cell\nAML\n79.030258\n71.973497\n9.340869\n199.876610\n\n\n80\nplasma cell\nNBM\n100.456866\n99.888396\n8.273445\n199.996640\n\n\n81\nplasma cell\nNSM\n96.900720\n93.114820\n10.602960\n199.657054\n\n\n82\nschwann cell\nAML\n128.321993\n128.321993\n128.321993\n128.321993\n\n\n83\nschwann cell\nNBM\n86.411262\n78.933059\n17.934662\n175.871271\n\n\n84\nt cell:cd4+ alpha-beta\nAML\n82.044430\n74.457114\n8.247845\n199.988548\n\n\n85\nt cell:cd4+ alpha-beta\nNBM\n94.775404\n90.768274\n8.443550\n199.987582\n\n\n86\nt cell:cd4+ alpha-beta\nNSM\n92.912509\n87.549465\n9.815604\n199.997383\n\n\n87\nt cell:cd8+ alpha-beta regulatory\nAML\n78.082735\n70.753019\n10.387187\n199.927831\n\n\n88\nt cell:cd8+ alpha-beta regulatory\nNBM\n93.990508\n89.772743\n8.190426\n199.995542\n\n\n89\nt cell:cd8+ alpha-beta regulatory\nNSM\n95.344181\n89.646218\n9.018322\n199.899349\n\n\n90\nunknown cell\nNBM\n96.310960\n92.693095\n8.043118\n199.984452\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in NSM:\n                             Level Three Cell Type  mean_distance\n10            granulocyte monocyte progenitor cell     113.471237\n12  hematopoietic stem and progenitor cell:spink2+     104.959083\n7                                     erythroblast      99.975515\n16                            megakaryocyte:gata1+      99.813171\n2                                  b cell:immature      97.478212\n\nBottom 5 cell types in NSM:\n              Level Three Cell Type  mean_distance\n8           erythroblast:basophilic      69.175800\n6        endothelial cell of artery      65.333875\n22               muscle cell:smooth      55.313443\n3                  cell:cd34+ cd61+      54.635086\n14  lymphoid progenitor cell:common      48.644547\n\nTop 5 cell types in AML:\n     Level Three Cell Type  mean_distance\n28            schwann cell     128.321993\n23       mutant blast:npm1      84.612826\n21  monocyte:non-classical      84.404224\n2          b cell:immature      82.461384\n29  t cell:cd4+ alpha-beta      82.044430\n\nBottom 5 cell types in AML:\n                             Level Three Cell Type  mean_distance\n13                         hematopoietic stem cell      70.097786\n22                              muscle cell:smooth      69.735721\n6                       endothelial cell of artery      66.552461\n12  hematopoietic stem and progenitor cell:spink2+      54.563528\n8                          erythroblast:basophilic      52.951975\n\nTop 5 cell types in NBM:\n                   Level Three Cell Type  mean_distance\n14       lymphoid progenitor cell:common     101.297912\n26                           plasma cell     100.456866\n10  granulocyte monocyte progenitor cell      99.994036\n17                  megakaryocyte:gata1-      99.683106\n2                        b cell:immature      99.501175\n\nBottom 5 cell types in NBM:\n                      Level Three Cell Type  mean_distance\n20                                 monocyte      91.803183\n18  mesenchymal stem cell of adipose tissue      91.666993\n21                   monocyte:non-classical      89.394134\n27                             schwann cell      86.411262\n6                endothelial cell of artery      80.875474\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in NSM:\n                             Level Three Cell Type  median_distance\n10            granulocyte monocyte progenitor cell       118.935939\n12  hematopoietic stem and progenitor cell:spink2+        98.965058\n7                                     erythroblast        94.923044\n16                            megakaryocyte:gata1+        94.046165\n26                                     plasma cell        93.114820\n\nBottom 5 cell types in NSM:\n              Level Three Cell Type  median_distance\n6        endothelial cell of artery        55.348929\n3                  cell:cd34+ cd61+        52.248486\n8           erythroblast:basophilic        50.068324\n14  lymphoid progenitor cell:common        48.644547\n22               muscle cell:smooth        46.465657\n\nTop 5 cell types in AML:\n     Level Three Cell Type  median_distance\n28            schwann cell       128.321993\n23       mutant blast:npm1        78.755366\n21  monocyte:non-classical        77.154945\n20                monocyte        75.975206\n2          b cell:immature        75.703532\n\nBottom 5 cell types in AML:\n                             Level Three Cell Type  median_distance\n3                                 cell:cd34+ cd61+        57.285741\n6                       endothelial cell of artery        57.188080\n8                          erythroblast:basophilic        49.722590\n12  hematopoietic stem and progenitor cell:spink2+        37.139774\n14                 lymphoid progenitor cell:common        33.321110\n\nTop 5 cell types in NBM:\n                   Level Three Cell Type  median_distance\n14       lymphoid progenitor cell:common       103.775147\n26                           plasma cell        99.888396\n3                       cell:cd34+ cd61+        99.005114\n10  granulocyte monocyte progenitor cell        96.974877\n2                        b cell:immature        96.731118\n\nBottom 5 cell types in NBM:\n                  Level Three Cell Type  median_distance\n20                             monocyte        87.198437\n19  mesenchymal stem/stromal cell:thy1+        86.924087\n21               monocyte:non-classical        83.017617\n27                         schwann cell        78.933059\n6            endothelial cell of artery        71.598061\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nAML            79.39  44.80    56.4\nNBM            95.30  48.83    51.2\nNSM            95.64  51.03    53.4\n\nCell Type Variability Analysis (sorted by CV):\n                                                  mean    std  CV (%)\nLevel Three Cell Type                                                \nendothelial cell of artery                       77.69  52.16    67.1\nmuscle cell:smooth                               87.24  50.87    58.3\nendosteal cell                                   92.68  52.72    56.9\nmonocyte:non-classical                           88.77  50.37    56.7\nadipocyte                                        89.36  50.19    56.2\nmesenchymal stem cell of adipose tissue          87.59  48.55    55.4\nmonocyte                                         89.70  49.59    55.3\nlymphoid progenitor cell:common                  97.64  53.83    55.1\ndendritic cell:plasmacytoid                      89.61  48.91    54.6\nmesenchymal stem/stromal cell:thy1+              89.52  48.91    54.6\nerythroblast:basophilic                          92.10  49.70    54.0\nt cell:cd4+ alpha-beta                           92.64  49.75    53.7\ngranulocyte monocyte progenitor cell             87.89  47.14    53.6\nt cell:cd8+ alpha-beta regulatory                93.04  49.71    53.4\nmyeloid cell:mature                              93.01  49.27    53.0\nhematopoietic stem and progenitor cell:spink2+   93.87  49.72    53.0\ncell:cd34+ cd61+                                 95.01  49.89    52.5\nmutant blast:npm1                                84.61  44.08    52.1\nerythroblast                                     90.48  47.17    52.1\nerythroid lineage cell                           92.67  48.17    52.0\ngranulocyte monocyte progenitor cell/myeloblast  94.91  49.05    51.7\nmyeloid cell:intermediate                        94.93  49.07    51.7\nb cell:immature                                  96.95  50.01    51.6\nb cell                                           94.57  48.82    51.6\nmacrophage                                       92.25  47.60    51.6\nhematopoietic stem cell                          94.15  48.57    51.6\nmegakaryocyte:gata1+                             90.24  46.49    51.5\nmyeloid progenitor cell:common                   95.58  49.01    51.3\nplasma cell                                      94.90  48.57    51.2\nunknown cell                                     96.31  48.92    50.8\nschwann cell                                     87.43  43.59    49.9\nmegakaryocyte:gata1-                             97.85  46.95    48.0\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.",
    "crumbs": [
      "Distance Analysis: bonemarrow-codex-chop"
    ]
  },
  {
    "objectID": "data_processing__distance_computation_for_all_datasets.html",
    "href": "data_processing__distance_computation_for_all_datasets.html",
    "title": "Data Processing: Cell Distance Computation",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndata_filedir = \"data-processed-nodes-with-harmonized-cell-types\"\noutput_edge_dir = \"data-processed-edges\"\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename befrore the `-nodes.csv` suffix.\ndef read_all_datasets(basepath, data_filedir):\n    all_files = []\n    for file in os.listdir(os.path.join(basepath, data_filedir)):\n        if file.endswith(\"-nodes.csv\"):\n            file_path = os.path.join(basepath, data_filedir, file)\n            dataset_name = file.replace(\"-nodes.csv\", \"\")\n            df = load_data(file_path)\n            df['Dataset'] = dataset_name\n            all_files.append(df)\n\n    print(f\"Total number of files read: {len(all_files)}\")\n    merged = pd.concat(all_files, ignore_index=True)\n    print(f\"Total number of cells in merged DataFrame: {len(merged)}\")\n    return merged\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")\n# Create destination directory. Overwrite if it exists.\nif os.path.exists(os.path.join(basepath, output_edge_dir)):\n    shutil.rmtree(os.path.join(basepath, output_edge_dir))\n    print(f\"Directory '{output_edge_dir}' already exists and has been removed. New directory will be created.\")\nelse:\n    print(f\"Directory '{output_edge_dir}' does not exist and will be created.\")\nos.makedirs(os.path.join(basepath, output_edge_dir), exist_ok=False)\n\nDirectory 'data-processed-edges' already exists and has been removed. New directory will be created.\n# Function to compute edges from nodes.\ndef compute_edges_from_nodes(df, anchor_cell, threshold, type_field=\"Cell Type\", report_progress=False):\n    # Reformat nodes data.\n    nodes = df.to_dict(orient='records')\n    edges = calculate_nearest_endothelial_cell(nodes, type_field=type_field, target_type=anchor_cell, max_dist=threshold, report_progress=report_progress)\n    # Save edges as a csv with no headers.\n    edges_df = pd.DataFrame(edges)\n    return edges_df",
    "crumbs": [
      "Data Processing: Cell Distance Computation"
    ]
  },
  {
    "objectID": "data_processing__distance_computation_for_all_datasets.html#iterate-through-all-datasets-and-compute-edges.",
    "href": "data_processing__distance_computation_for_all_datasets.html#iterate-through-all-datasets-and-compute-edges.",
    "title": "Data Processing: Cell Distance Computation",
    "section": "Iterate through all datasets and compute edges.",
    "text": "Iterate through all datasets and compute edges.\n\n# Iterate through all directories in `data_filedir`.\nfor dataset_dir in os.listdir(os.path.join(basepath, data_filedir)):\n    dataset_path = os.path.join(basepath, data_filedir, dataset_dir)\n    output_edge_path = os.path.join(basepath, output_edge_dir, dataset_dir)\n    if not os.path.isdir(dataset_path):\n        continue\n    print(f\"Processing dataset: {dataset_dir}\")\n\n    # Create output directories even if they exist.\n    os.makedirs(output_edge_path, exist_ok=False)\n\n    # Read all datasets into a single DataFrame.\n    df_all_data = read_all_datasets(basepath, os.path.join(data_filedir, dataset_dir))\n\n    # Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\n    print(\"Total number of unique cell types per cell type annnotation level:\")\n    unique_cell_types = {\n        'Original Cell Type': df_all_data['Original Cell Type'].nunique(),\n        'Level Three Cell Type': df_all_data['Level Three Cell Type'].nunique(),\n        'Level Two Cell Type': df_all_data['Level Two Cell Type'].nunique(),\n        'Level One Cell Type': df_all_data['Level One Cell Type'].nunique()\n    }\n    for cell_type, count in unique_cell_types.items():\n        print(f\"{cell_type}: {count}\")\n\n    # Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\n    endothelial_cell_types = {\n        'Original Cell Type': df_all_data[df_all_data['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n        'Level Three Cell Type': df_all_data[df_all_data['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n        'Level Two Cell Type': df_all_data[df_all_data['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n        'Level One Cell Type': df_all_data[df_all_data['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n    }   \n\n    print(\"\\nEndothelial cell types per cell type annotation level:\")\n    for level, cell_types in endothelial_cell_types.items():\n        print(f\"\\n{level}:\")\n        for cell in cell_types:\n            print(f\"  - {cell}\")\n\n    nodes_dir = dataset_path\n    edges_dir = output_edge_path\n\n    type_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n    # Set parameters for edge computation.\n    threshold = 200\n    report_progress = False  # Set to True to see progress updates.\n\n    # For all files in the nodes_dir directory that end with -nodes.csv.\n    # For each cell type level, for each unique cell type, compute edges and save to a file. \n    # Skip if level is not in type_field_list.\n    for level, anchor_cell_types in endothelial_cell_types.items():\n        if level not in type_field_list:\n            print(f\"Skipping {level} as it is not in type_field_list.\")\n            continue\n        for anchor_cell_type in anchor_cell_types:\n            print(f\"Computing edges for {anchor_cell_type} at {level} level.\")\n            for filename in os.listdir(nodes_dir):\n                if filename.endswith('.csv'):\n                    nodes = pd.read_csv(f'{nodes_dir}/{filename}')\n                    edges = compute_edges_from_nodes(nodes, anchor_cell_type, threshold, type_field=level, report_progress=report_progress)\n                    # Replace -nodes.csv with -edges.csv in filename.\n                    filename = filename.replace('-nodes', f'-{level}-{anchor_cell_type}-edges')\n                    edges.to_csv(f'{edges_dir}/{filename}', index=False, header=False)\n\n    print(f\"Edges computed and saved to {edges_dir} for dataset {dataset_dir}.\\n\")\n\nProcessing dataset: intestine-codex-stanford\nTotal number of files read: 64\nTotal number of cells in merged DataFrame: 2512185\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 25\nLevel Three Cell Type: 25\nLevel Two Cell Type: 17\nLevel One Cell Type: 5\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell of lymphatic vessel\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell of lymphatic vessel\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell of lymphatic vessel at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Two Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford for dataset intestine-codex-stanford.\n\nProcessing dataset: tonsil-codex-stanford\nTotal number of files read: 1\nTotal number of cells in merged DataFrame: 173968\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 10\nLevel Three Cell Type: 10\nLevel Two Cell Type: 8\nLevel One Cell Type: 5\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/tonsil-codex-stanford for dataset tonsil-codex-stanford.\n\nProcessing dataset: esophagus-codex-stanford\nTotal number of files read: 1\nTotal number of cells in merged DataFrame: 45958\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 12\nLevel Three Cell Type: 12\nLevel Two Cell Type: 11\nLevel One Cell Type: 5\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/esophagus-codex-stanford for dataset esophagus-codex-stanford.\n\nProcessing dataset: colon-xenium-stanford\nTotal number of files read: 29\nTotal number of cells in merged DataFrame: 2639215\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 41\nLevel Three Cell Type: 38\nLevel Two Cell Type: 20\nLevel One Cell Type: 6\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n  - Lymphatic endothelial cells\n\nLevel Three Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n\nLevel Two Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford for dataset colon-xenium-stanford.\n\nProcessing dataset: lymphnode-codex-yale\nTotal number of files read: 5\nTotal number of cells in merged DataFrame: 8918845\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 34\nLevel Three Cell Type: 29\nLevel Two Cell Type: 10\nLevel One Cell Type: 3\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale for dataset lymphnode-codex-yale.\n\nProcessing dataset: maternalfetalinterface-mibitof-stanford\nTotal number of files read: 209\nTotal number of cells in merged DataFrame: 477747\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 26\nLevel Three Cell Type: 23\nLevel Two Cell Type: 11\nLevel One Cell Type: 5\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford for dataset maternalfetalinterface-mibitof-stanford.\n\nProcessing dataset: oralcavity-codex-czi\nTotal number of files read: 13\nTotal number of cells in merged DataFrame: 1412189\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 39\nLevel Three Cell Type: 28\nLevel Two Cell Type: 20\nLevel One Cell Type: 6\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Vascular Endothelial Cells\n  - Lymphatic Endothelial Cells\n\nLevel Three Cell Type:\n  - endothelial cell of vascular tree\n  - endothelial cell of lymphatic vessel\n\nLevel Two Cell Type:\n  - endothelial cell of vascular tree\n  - endothelial cell of lymphatic vessel\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell of vascular tree at Level Three Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Three Cell Type level.\nComputing edges for endothelial cell of vascular tree at Level Two Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi for dataset oralcavity-codex-czi.\n\nProcessing dataset: pancreas-geomx-ufl\nTotal number of files read: 12\nTotal number of cells in merged DataFrame: 14891875\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 4\nLevel Three Cell Type: 4\nLevel Two Cell Type: 4\nLevel One Cell Type: 3\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl for dataset pancreas-geomx-ufl.\n\nProcessing dataset: skin-celldive-ge\nTotal number of files read: 10\nTotal number of cells in merged DataFrame: 48323\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 8\nLevel Three Cell Type: 8\nLevel Two Cell Type: 4\nLevel One Cell Type: 3\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge for dataset skin-celldive-ge.\n\nProcessing dataset: skin-confocal-sorgerlab\nTotal number of files read: 2\nTotal number of cells in merged DataFrame: 55255\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 15\nLevel Three Cell Type: 15\nLevel Two Cell Type: 11\nLevel One Cell Type: 4\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-confocal-sorgerlab for dataset skin-confocal-sorgerlab.\n\nProcessing dataset: spleen-codex-ufl\nTotal number of files read: 6\nTotal number of cells in merged DataFrame: 992398\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 12\nLevel Three Cell Type: 12\nLevel Two Cell Type: 9\nLevel One Cell Type: 3\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - blood endothelial\n\nLevel Three Cell Type:\n  - endothelial cell of sinusoid\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of vascular tree\n\nLevel Two Cell Type:\n  - endothelial cell of sinusoid\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of vascular tree\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell of sinusoid at Level Three Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Three Cell Type level.\nComputing edges for endothelial cell of vascular tree at Level Three Cell Type level.\nComputing edges for endothelial cell of sinusoid at Level Two Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Two Cell Type level.\nComputing edges for endothelial cell of vascular tree at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl for dataset spleen-codex-ufl.\n\nProcessing dataset: lung-codex-urmc\nTotal number of files read: 2\nTotal number of cells in merged DataFrame: 1209309\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 54\nLevel Three Cell Type: 20\nLevel Two Cell Type: 17\nLevel One Cell Type: 7\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n\nLevel Three Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of capillary\n\nLevel Two Cell Type:\n  - endothelial cell\n  - endothelial cell of lymphatic vessel\n  - endothelial cell of capillary\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Three Cell Type level.\nComputing edges for endothelial cell of capillary at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell of lymphatic vessel at Level Two Cell Type level.\nComputing edges for endothelial cell of capillary at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc for dataset lung-codex-urmc.\n\nProcessing dataset: bonemarrow-codex-chop\nTotal number of files read: 20\nTotal number of cells in merged DataFrame: 1214088\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 37\nLevel Three Cell Type: 33\nLevel Two Cell Type: 22\nLevel One Cell Type: 6\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n\nLevel Three Cell Type:\n  - endothelial cell of artery\n  - endothelial cell of sinusoid\n\nLevel Two Cell Type:\n  - endothelial cell of artery\n  - endothelial cell of sinusoid\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell of artery at Level Three Cell Type level.\nComputing edges for endothelial cell of sinusoid at Level Three Cell Type level.\nComputing edges for endothelial cell of artery at Level Two Cell Type level.\nComputing edges for endothelial cell of sinusoid at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop for dataset bonemarrow-codex-chop.\n\nProcessing dataset: colon-cycif-sorgerlab\nTotal number of files read: 25\nTotal number of cells in merged DataFrame: 12758141\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 21\nLevel Three Cell Type: 21\nLevel Two Cell Type: 7\nLevel One Cell Type: 5\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\nSkipping Original Cell Type as it is not in type_field_list.\nComputing edges for endothelial cell at Level Three Cell Type level.\nComputing edges for endothelial cell at Level Two Cell Type level.\nComputing edges for endothelial cell at Level One Cell Type level.\nEdges computed and saved to /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab for dataset colon-cycif-sorgerlab.",
    "crumbs": [
      "Data Processing: Cell Distance Computation"
    ]
  },
  {
    "objectID": "data_processing__distance_computation_for_all_datasets.html#compute-distance-values-for-all-datasets.",
    "href": "data_processing__distance_computation_for_all_datasets.html#compute-distance-values-for-all-datasets.",
    "title": "Data Processing: Cell Distance Computation",
    "section": "Compute distance values for all datasets.",
    "text": "Compute distance values for all datasets.\n\ndef compute_euclidean_distance(x1, y1, z1, x2, y2, z2):\n    \"\"\"Compute Euclidean distance between two points in 3D space.\"\"\"\n    return np.sqrt((x1 - x2)**2 + (y1 - y2)**2 + (z1 - z2)**2)\n\ndef compute_and_write_distance_values_for_all_edges_in_a_dataset(basepath, output_edge_dataset_path):\n    file_count = 0\n    for file in os.listdir(os.path.join(basepath, output_edge_dataset_path)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dataset_path, file)\n            print(f\"Computing distances for file: {file_path}\")\n            df = load_data(file_path, edges=True)\n            df['distance'] = compute_euclidean_distance(df['x1'], df['y1'], df['z1'], df['x2'], df['y2'], df['z2'])\n            # Add column names to the DataFrame.\n            df.columns = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2', 'distance']\n            df.to_csv(f'{file_path}', index=False, header=True)\n            file_count += 1\n    print(f\"Total number of files processed for distance computation: {file_count}\")\n\n\nfor dataset_dir in os.listdir(os.path.join(basepath, output_edge_dir)):\n    # dataset_path = os.path.join(basepath, data_filedir, dataset_dir)\n    print(f\"Processing distance computation for dataset: {dataset_dir}\")\n    output_edge_dataset_path = os.path.join(output_edge_dir, dataset_dir)\n    compute_and_write_distance_values_for_all_edges_in_a_dataset(basepath, output_edge_dataset_path)\n\nProcessing distance computation for dataset: intestine-codex-stanford\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ascending-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ascending-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ascending-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Right-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Right-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Right-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Right-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Right-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Left-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Left-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Left-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Left-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Left-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Duodenum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Ileum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Mid_jejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Mid_jejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Mid_jejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Midjejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Midjejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Midjejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Midjejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Midjejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_ProximalJejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_ProximalJejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_ProximalJejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Proximaljejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Proximaljejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Proximaljejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Proximaljejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Proximaljejunum-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Trans-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Sigmoid-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Transverse-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Transverse-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Transverse-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Trans-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Trans-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Trans-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Trans-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ascending-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ascending-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ascending-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Right-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Right-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Right-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Right-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Right-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Left-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Left-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Left-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Left-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Left-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Duodenum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Ileum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Mid_jejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Mid_jejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Mid_jejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Midjejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Midjejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Midjejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Midjejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Midjejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_ProximalJejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_ProximalJejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_ProximalJejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Proximaljejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Proximaljejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Proximaljejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Proximaljejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Proximaljejunum-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Trans-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Sigmoid-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Transverse-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Transverse-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Transverse-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Trans-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Trans-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Trans-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Trans-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ascending-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ascending-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ascending-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Right-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Right-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Right-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Right-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Right-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ascending-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Left-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Left-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Left-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Left-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Left-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Duodenum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Ileum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Mid_jejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Mid_jejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Mid_jejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Midjejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Midjejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Midjejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Midjejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Midjejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_ProximalJejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_ProximalJejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_ProximalJejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Proximaljejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Proximaljejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Proximaljejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Proximaljejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Proximaljejunum-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Trans-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ascending-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Sigmoid-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Transverse-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Transverse-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Transverse-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Trans-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Trans-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Trans-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Trans-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ascending-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Right-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Right-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Right-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Right-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Right-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Left-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Left-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Left-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Left-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Left-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Duodenum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Ileum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Mid_jejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Mid_jejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Mid_jejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Midjejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Midjejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Midjejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Midjejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Midjejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_ProximalJejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_ProximalJejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_ProximalJejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Proximaljejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Proximaljejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Proximaljejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Proximaljejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Proximaljejunum-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Trans-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Sigmoid-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Transverse-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Transverse-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Transverse-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Trans-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Trans-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Trans-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Trans-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ascending-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ascending-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ascending-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Right-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Right-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Right-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Right-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Right-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Left-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Left-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Left-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Left-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Left-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Duodenum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Ileum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Mid_jejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Mid_jejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Mid_jejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Midjejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Midjejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Midjejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Midjejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Midjejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_ProximalJejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_ProximalJejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_ProximalJejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Proximaljejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Proximaljejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Proximaljejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Proximaljejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Proximaljejunum-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Descending_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Descending_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Trans-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Descending_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B009_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Sigmoid-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B004_Transverse-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B005_Transverse-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B006_Transverse-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B010_Trans-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B011_Trans-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B012_Trans-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/intestine-codex-stanford/B008_Trans-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 320\nProcessing distance computation for dataset: tonsil-codex-stanford\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/tonsil-codex-stanford/tonsil-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/tonsil-codex-stanford/tonsil-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/tonsil-codex-stanford/tonsil-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 3\nProcessing distance computation for dataset: esophagus-codex-stanford\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/esophagus-codex-stanford/esophagus-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/esophagus-codex-stanford/esophagus-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/esophagus-codex-stanford/esophagus-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 3\nProcessing distance computation for dataset: colon-xenium-stanford\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_16-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_17-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_18-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_19-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_20-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_21-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_22-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_23-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_24-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_25-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_26-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_27-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_28-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_29-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_30-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_31-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_3-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_4-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_5-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_6-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_7-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_8-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_9-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_10-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_11-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_12-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_13-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_14-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_15-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_16-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_17-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_18-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_19-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_20-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_21-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_22-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_23-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_24-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_25-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_26-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_27-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_28-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_29-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_30-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_31-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_16-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_17-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_18-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_19-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_20-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_21-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_22-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_23-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_24-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_25-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_26-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_27-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_28-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_29-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_30-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_31-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_3-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_4-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_5-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_6-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_7-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_8-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_9-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_10-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_11-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_12-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_13-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_14-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_15-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_16-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_17-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_18-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_19-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_20-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_21-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_22-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_23-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_24-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_25-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_26-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_27-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_28-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_29-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_30-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_31-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_16-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_17-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_18-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_19-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_20-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_21-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_22-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_23-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_24-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_25-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_26-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_27-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_28-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_29-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_30-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-xenium-stanford/layer_31-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 145\nProcessing distance computation for dataset: lymphnode-codex-yale\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN00560-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN00837-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN22921-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN24336-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN27766-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN00560-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN00837-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN22921-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN24336-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN27766-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN00560-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN00837-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN22921-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN24336-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lymphnode-codex-yale/LN27766-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 15\nProcessing distance computation for dataset: maternalfetalinterface-mibitof-stanford\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31742_1_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_14_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_17-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_15_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_18_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_19-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31738_6_17-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_16_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31744_1_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_17_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31763_20_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31759_20_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_3_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31797_6_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31771_14_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_6_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_20_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_15_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_8_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31741_1_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_20_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_16_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_19_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_14_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_20_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31756_20_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_17_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31792_18_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31759_16_18-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_3_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31790_18_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_3_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31755_18_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_20_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_15_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_20-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_16-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_4_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31757_20_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31782_5_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31748_1_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_22-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31779_5_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31743_16_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31788_5_17-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_1_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_15_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31743_16_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_23-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_1_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31749_1_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_1_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_3_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31788_5_18-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31797_13_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_14_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_14_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_14_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31769_18_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31751_1_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31782_5_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31775_5_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_17-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31760_16_19-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_4_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31749_16_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_16_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_16_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_18_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_15_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_4_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_18-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_16_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_16-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31795_13_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_16_17-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31771_4_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_20_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_5_20-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_14_16-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_4_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_6_18-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31784_14_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31780_5_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31786_14_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_5_19-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31761_20_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_11_18-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_15_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_14_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_8_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31798_13_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_13_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_16_21-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_9_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_3_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_16_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31776_14_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_9_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_13_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_6_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31747_1_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_9_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_6_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_6-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_18_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31776_5_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31795_6_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_6_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_15-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_5_16-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31790_13_14-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31761_16_20-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31769_3_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_11_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31766_3_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31742_1_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_14_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_17-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_15_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_18_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_19-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31738_6_17-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_16_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31744_1_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_17_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31763_20_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31759_20_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_3_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31797_6_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31771_14_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_6_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_20_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_15_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_8_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31741_1_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_20_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_16_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_19_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_14_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_20_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31756_20_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_17_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31792_18_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31759_16_18-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_3_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31790_18_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_3_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31755_18_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_20_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_15_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_20-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_16-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_4_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31757_20_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31782_5_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31748_1_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_22-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31779_5_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31743_16_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31788_5_17-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_1_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_15_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31743_16_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_23-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_1_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31749_1_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_1_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_3_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31788_5_18-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31797_13_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_14_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_14_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_14_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31769_18_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31751_1_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31782_5_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31775_5_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_17-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31760_16_19-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_4_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31749_16_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_16_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_16_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_18_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_15_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_4_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_18-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_16_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_16-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31795_13_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_16_17-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31771_4_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_20_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_5_20-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_14_16-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_4_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_6_18-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31784_14_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31780_5_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31786_14_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_5_19-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31761_20_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_11_18-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_15_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_14_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_8_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31798_13_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_13_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_16_21-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_9_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_3_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_16_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31776_14_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_9_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_13_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_6_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31747_1_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_9_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_6_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_6-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_18_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31776_5_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31795_6_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_6_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_15-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_5_16-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31790_13_14-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31761_16_20-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31769_3_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_11_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31766_3_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31742_1_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_14_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_17-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_15_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_18_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_19-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31738_6_17-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_16_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31744_1_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_17_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31763_20_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31759_20_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_3_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31797_6_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31771_14_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_6_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_20_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_15_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_8_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31741_1_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_20_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_16_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_19_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_14_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_20_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31756_20_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_17_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31792_18_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31759_16_18-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_3_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31790_18_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31767_3_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31755_18_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_20_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_15_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_20-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_16_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_16-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_4_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31757_20_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31782_5_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31748_1_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_22-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31779_5_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31743_16_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31788_5_17-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_1_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_15_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31743_16_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_12_23-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_1_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31749_1_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_1_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_3_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31788_5_18-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31797_13_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_14_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_14_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_14_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31769_18_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31751_1_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31782_5_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31775_5_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_17-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31739_6_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31760_16_19-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_4_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31773_4_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31749_16_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_10_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_16_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31750_16_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_18_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_15_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_4_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_18-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_16_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31736_12_16-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31795_13_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31758_16_17-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31727_8_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31771_4_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31765_20_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_5_20-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31770_14_16-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31774_4_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31737_6_18-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31784_14_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31780_5_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31791_13_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31786_14_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_14_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_5_19-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31761_20_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_11_18-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_13_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_15_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31783_5_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_15_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_15_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31733_11_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_10_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31793_6_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31726_8_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31734_12_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31789_14_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31772_4_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31725_8_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31731_11_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31798_13_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_13_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31762_16_21-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_9_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31768_3_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_16_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31776_14_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31728_9_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_13_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31794_6_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31747_1_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31729_9_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_6_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_6-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_18_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31776_5_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31795_6_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31740_6_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31732_11_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/18_31785_5_13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/10_31745_1_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/12_31754_16_15-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31787_5_16-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/20_31790_13_14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/8_31735_12_9-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/14_31761_16_20-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31769_3_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/6_31730_11_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/maternalfetalinterface-mibitof-stanford/16_31766_3_2-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 627\nProcessing distance computation for dataset: oralcavity-codex-czi\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_1-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_2-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID1_shiny-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID5_shiny-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_1-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_2-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_3-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_4-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_1-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_2-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue_3-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__1-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__2-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_1-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_2-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID1_shiny-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID5_shiny-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_1-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_2-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_3-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_4-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_1-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_2-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue_3-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__1-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__2-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_1-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_2-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID1_shiny-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID5_shiny-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_1-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_2-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_3-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_4-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_1-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_2-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue_3-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__1-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__2-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_1-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_2-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID1_shiny-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID5_shiny-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_1-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_2-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_3-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_4-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_1-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_2-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue_3-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__1-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__2-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Buccal_Mucosa_And_Minor_Salivary_Glands_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID1_shiny-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Gingiva_ID5_shiny-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Parotid_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Submandibular_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/oralcavity-codex-czi/Tongue__2-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 65\nProcessing distance computation for dataset: pancreas-geomx-ufl\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-13-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-19-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-4AD-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-7A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-13A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-3A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-7A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-9A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-12A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-22-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-3A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-6A-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-13-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-19-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-4AD-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-7A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-13A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-3A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-7A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-9A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-12A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-22-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-3A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-6A-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-13-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-19-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-4AD-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P2-7A-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-13A-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-3A-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-7A-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P3-9A-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-12A-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-22-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-3A-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/pancreas-geomx-ufl/P4-6A-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 36\nProcessing distance computation for dataset: skin-celldive-ge\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_1-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_10-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_11-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_2-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_3-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_4-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_5-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_7-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_8-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_9-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_1-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_10-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_11-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_2-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_3-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_4-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_5-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_7-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_8-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_9-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_1-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_11-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_2-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_3-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_4-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_5-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_7-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_8-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-celldive-ge/region_9-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 30\nProcessing distance computation for dataset: skin-confocal-sorgerlab\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-confocal-sorgerlab/phenotypes_invasive_margin-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-confocal-sorgerlab/phenotypes_melanoma_in_situ-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-confocal-sorgerlab/phenotypes_invasive_margin-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-confocal-sorgerlab/phenotypes_melanoma_in_situ-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-confocal-sorgerlab/phenotypes_invasive_margin-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/skin-confocal-sorgerlab/phenotypes_melanoma_in_situ-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 6\nProcessing distance computation for dataset: spleen-codex-ufl\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/FSLD-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/KSFB-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/NGPL-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PBVN-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PKHL-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/XXCD-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/FSLD-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/KSFB-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/NGPL-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PBVN-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PKHL-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/XXCD-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/FSLD-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/KSFB-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/NGPL-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PBVN-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PKHL-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/XXCD-Level Three Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/FSLD-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/KSFB-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/NGPL-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PBVN-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PKHL-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/XXCD-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/FSLD-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/KSFB-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/NGPL-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PBVN-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PKHL-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/XXCD-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/FSLD-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/KSFB-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/NGPL-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PBVN-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PKHL-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/XXCD-Level Two Cell Type-endothelial cell of vascular tree-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/FSLD-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/KSFB-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/NGPL-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PBVN-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/PKHL-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/spleen-codex-ufl/XXCD-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 42\nProcessing distance computation for dataset: lung-codex-urmc\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D265-LLL-7A7-12-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D115-RLL-10A3-40-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D265-LLL-7A7-12-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D115-RLL-10A3-40-Level Three Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D265-LLL-7A7-12-Level Three Cell Type-endothelial cell of capillary-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D115-RLL-10A3-40-Level Three Cell Type-endothelial cell of capillary-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D265-LLL-7A7-12-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D115-RLL-10A3-40-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D265-LLL-7A7-12-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D115-RLL-10A3-40-Level Two Cell Type-endothelial cell of lymphatic vessel-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D265-LLL-7A7-12-Level Two Cell Type-endothelial cell of capillary-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D115-RLL-10A3-40-Level Two Cell Type-endothelial cell of capillary-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D265-LLL-7A7-12-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/lung-codex-urmc/D115-RLL-10A3-40-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 14\nProcessing distance computation for dataset: bonemarrow-codex-chop\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM48_NSM1_1720-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM49_NSM2_1086-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM47_NSM3_1996-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM51_AML1_183-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM46_AML1_382-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM44_AML2_191-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM52_AML3_1329-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM54_AML3_1443-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM27_H10-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM28_H14-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM36_H26-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM41_H27-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM31_H32-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM38_H33-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM37_H35-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM33_H36-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM32_H37-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM34_H38-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM40_H39-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM39_H41-Level Three Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM48_NSM1_1720-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM49_NSM2_1086-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM47_NSM3_1996-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM51_AML1_183-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM46_AML1_382-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM44_AML2_191-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM52_AML3_1329-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM54_AML3_1443-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM27_H10-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM28_H14-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM36_H26-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM41_H27-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM31_H32-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM38_H33-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM37_H35-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM33_H36-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM32_H37-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM34_H38-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM40_H39-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM39_H41-Level Three Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM48_NSM1_1720-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM49_NSM2_1086-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM47_NSM3_1996-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM51_AML1_183-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM46_AML1_382-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM44_AML2_191-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM52_AML3_1329-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM54_AML3_1443-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM27_H10-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM28_H14-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM36_H26-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM41_H27-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM31_H32-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM38_H33-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM37_H35-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM33_H36-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM32_H37-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM34_H38-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM40_H39-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM39_H41-Level Two Cell Type-endothelial cell of artery-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM48_NSM1_1720-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM49_NSM2_1086-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM47_NSM3_1996-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM51_AML1_183-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM46_AML1_382-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM44_AML2_191-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM52_AML3_1329-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM54_AML3_1443-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM27_H10-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM28_H14-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM36_H26-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM41_H27-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM31_H32-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM38_H33-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM37_H35-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM33_H36-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM32_H37-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM34_H38-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM40_H39-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM39_H41-Level Two Cell Type-endothelial cell of sinusoid-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM48_NSM1_1720-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM49_NSM2_1086-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM47_NSM3_1996-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM51_AML1_183-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM46_AML1_382-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM44_AML2_191-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM52_AML3_1329-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM54_AML3_1443-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM27_H10-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM28_H14-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM36_H26-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM41_H27-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM31_H32-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM38_H33-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM37_H35-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM33_H36-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM32_H37-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM34_H38-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM40_H39-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/bonemarrow-codex-chop/SB67_NBM39_H41-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 100\nProcessing distance computation for dataset: colon-cycif-sorgerlab\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01002-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01007-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01014-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01020-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01025-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01029-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01034-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01039-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01044-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01049-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01050-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01051-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01052-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01054-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01059-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01064-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01069-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01074-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01078-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01084-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01086-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01091-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01097-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01102-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01106-Level Three Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01002-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01007-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01014-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01020-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01025-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01029-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01034-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01039-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01044-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01049-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01050-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01051-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01052-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01054-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01059-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01064-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01069-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01074-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01078-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01084-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01086-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01091-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01097-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01102-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01106-Level Two Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01002-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01007-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01014-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01020-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01025-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01029-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01034-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01039-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01044-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01049-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01050-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01051-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01052-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01054-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01059-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01064-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01069-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01074-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01078-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01084-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01086-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01091-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01097-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01102-Level One Cell Type-endothelial cell-edges.csv\nComputing distances for file: /u/yashjain/hra-cell-distance-analysis/data/data-processed-edges/colon-cycif-sorgerlab/CRC01106-Level One Cell Type-endothelial cell-edges.csv\nTotal number of files processed for distance computation: 75",
    "crumbs": [
      "Data Processing: Cell Distance Computation"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Cell Distance Analysis for Spatial Omics Datasets",
    "section": "",
    "text": "The notebooks are designed to process and analyze the distances between cells in spatial omics datasets, with a particular focus on endothelial cells. They calculate the distances between all pairs of cells and visualize the distribution of these distances. The notebooks also include functionality to filter the data based on specific cell types and to visualize the results using histograms, violin plots, and other visualizations.",
    "crumbs": [
      "Cell Distance Analysis for Spatial Omics Datasets"
    ]
  },
  {
    "objectID": "index.html#preprint",
    "href": "index.html#preprint",
    "title": "Cell Distance Analysis for Spatial Omics Datasets",
    "section": "Preprint",
    "text": "Preprint\nPreprint of the paper describing the work is available on bioRxiv (https://www.biorxiv.org/content/10.1101/2025.09.23.678129v1).",
    "crumbs": [
      "Cell Distance Analysis for Spatial Omics Datasets"
    ]
  },
  {
    "objectID": "index.html#data-availability",
    "href": "index.html#data-availability",
    "title": "Cell Distance Analysis for Spatial Omics Datasets",
    "section": "Data Availability",
    "text": "Data Availability\nAll datasets (cell coordinates and cell types) used in the paper, original and processed (including harmonized cell type labels), are made publicly available (https://drive.google.com/drive/folders/1VYhnCay3j4Oe1BMidTvKOxSGz9nrcJyc?usp=sharing).\nFor more information and original imaging datasets for individual studies used in this paper, see relevant citations in the Methods section in the paper.\nPancreas dataset (GeoMX) is available on Figshare (https://figshare.com/projects/HuBMAP_TMC_-_Pacific_Northwest_National_Laboratory_GeoMX_DSP_Images/256367).",
    "crumbs": [
      "Cell Distance Analysis for Spatial Omics Datasets"
    ]
  },
  {
    "objectID": "index.html#code-availability",
    "href": "index.html#code-availability",
    "title": "Cell Distance Analysis for Spatial Omics Datasets",
    "section": "Code Availability",
    "text": "Code Availability\nAll code for data processing and analysis for distance analysis is available on GitHub (https://github.com/cns-iu/hra-cell-distance-analysis).\nRendered Jupyter notebooks for the entire workflow are also available on GitHub Pages (https://cns-iu.github.io/hra-cell-distance-analysis).\nThe file containing all cell types, original and 3-level typology, mapped to Cell Ontology, is available as a CSV file on GitHub (https://github.com/cns-iu/hra-cell-distance-analysis/blob/main/data/mapping_files/generated_cell_type_complete_crosswalk.csv).\nCode for hierarchical neighborhood analysis is available on GitHub (https://github.com/HickeyLab/Vasculature_neighborhoods).\nThe Cell Distance Explorer application is available on the Human Reference Atlas website (https://apps.humanatlas.io/cde).\nMore information, including usage tutorial, about the CDE can be found at (https://humanatlas.io/user-story/5).\nThe python package for CDE can be found as part of HRA Jupyter Widgets (https://github.com/x-atlas-consortia/hra-jupyter-widgets/).\nDocumentation to embed the CDE in webpages as a lightweight component is available at (https://github.com/hubmapconsortium/hra-ui/blob/main/apps/cde-visualization-wc/EMBEDDING.md).",
    "crumbs": [
      "Cell Distance Analysis for Spatial Omics Datasets"
    ]
  },
  {
    "objectID": "index.html#for-developers",
    "href": "index.html#for-developers",
    "title": "Cell Distance Analysis for Spatial Omics Datasets",
    "section": "For Developers",
    "text": "For Developers\nThe repository uses quarto for documentation and nbdev for notebook processing.\nTo update the README file from the nbs/index.ipynb notebook, run the following command in the root directory of the repository:\nnbdev_readme\nThen, to save the notebooks and render them using the nbdev library, you can run the following command in the root directory of the repository:\nrm -rf _proc && nbdev_proc_nbs && cd _proc && quarto publish gh-pages --no-prompt\nThen, push to GitHub:\ngit add .\ngit commit -m 'Updated repo' # Update this text with your own message\ngit push\nThe rendered and deployed notebooks will be available via GitHub Pages at the following URL:\nhttps://cns-iu.github.io/hra-cell-distance-analysis",
    "crumbs": [
      "Cell Distance Analysis for Spatial Omics Datasets"
    ]
  },
  {
    "objectID": "distance_analysis__pancreas-geomx-ufl.html",
    "href": "distance_analysis__pancreas-geomx-ufl.html",
    "title": "Distance Analysis: pancreas-geomx-ufl",
    "section": "",
    "text": "import numpy as np\nimport pandas as pd\nimport os\nimport json\nimport requests\nimport shutil\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nfrom sklearn.preprocessing import normalize\nimport plotly.express as px\n\nfrom _cde_compute_edges_from_nodes import *\n\npd.set_option('display.max_columns', None)\npd.set_option('display.max_rows', None)\n\n# suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\nbasepath = \"/u/yashjain/hra-cell-distance-analysis/data\"\ndataset_dir = \"pancreas-geomx-ufl\"\ndata_filedir = os.path.join(\"data-processed-nodes-with-harmonized-cell-types\", dataset_dir)\noutput_edge_dir = os.path.join(\"data-processed-edges\", dataset_dir)\nfigures_output_dir = \"generated-figures\"\n# Function to load your data\ndef load_data(path, edges=False):\n    if edges:\n        column_names = ['cell_id', 'x1', 'y1', 'z1', 'x2', 'y2', 'z2']\n        data = pd.read_csv(path, header=None, names=column_names)\n    else:\n        data = pd.read_csv(path)\n    return data\n# Function to read all files ending with \"-nodes.csv\" in the `data_filedir` directory into a single DataFrame. \n# Another additional column `Dataset` is added to identify the dataset name which comes from the filename before the `-nodes.csv` suffix.\n\n# Additionally, function reads all files ending with \"-edges.csv\" in the `output_edge_dir` directory into a single DataFrame. \n# Three additional columns are added \"Dataset\", \"Anchor Cell Type\", and \"Anchor Cell Type Level\" to identify the dataset name, anchor cell type, and anchor cell type level respectively which come from the filename before the `.csv` suffix.\n# The three additional columns are created by splitting the filename on the `-` character, and extracting the relevant parts.\n# On splitting, the first part is the dataset name, second part is the anchor cell type level, and third part is the anchor cell type, and last part is the `edges` suffix.\n# When reading files, check if the file has the correct format (i.e., ends with `-edges.csv`).\n\n# Additionally, the function merges the edges DataFrame with the nodes DataFrame to get the cell type information for the anchor cells.\n# This is done by reading the corresponding nodes file from the `data_filedir` directory for each edges file, and merging it with the edges DataFrame on the `cell_id` column.\n# The merged DataFrame contains the edges with additional columns for the cell type information.\n\n# The function returns three DataFrames:\n# 1. `merged_nodes`: DataFrame containing all nodes with an additional column `Dataset`.\n# 2. `merged_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, and `Anchor Cell Type Level`.\n# 3. `merged_nodes_for_all_edges`: DataFrame containing all edges with additional columns `Dataset`, `Anchor Cell Type`, `Anchor Cell Type Level`, and the cell type information for cells.\ndef read_all_edge_datasets(basepath, data_filedir, output_edge_dir):\n    all_nodes_files = []\n    all_edges_files = []\n    all_nodes_edges_files = []\n    for file in os.listdir(os.path.join(basepath, output_edge_dir)):\n        if file.endswith(\"-edges.csv\"):\n            file_path = os.path.join(basepath, output_edge_dir, file)\n            donor_name, dataset_id, anchor_cell_type_level, anchor_cell_type = file.replace(\"-edges.csv\", \"\").split('-')\n            dataset_name = f\"{donor_name}-{dataset_id}\" # Considering the dataset name as the combination of donor name and dataset id for pancreas-geomx-ufl dataset.\n            edges_df = load_data(file_path, edges=False)\n            edges_df['Dataset'] = dataset_name\n            edges_df['Anchor Cell Type'] = anchor_cell_type\n            edges_df['Anchor Cell Type Level'] = anchor_cell_type_level\n            edges_df.rename(columns={\"distance\": \"Distance\"}, inplace=True) # Rename column \"distance\" to \"Distance\".\n            all_edges_files.append(edges_df)\n\n            # Read the corresponding nodes file from data_filedir to get the cell type information\n            nodes_file_path = os.path.join(basepath, data_filedir, f\"{dataset_name}-nodes.csv\")\n            nodes_df = load_data(nodes_file_path)\n            nodes_df['Dataset'] = dataset_name\n            all_nodes_files.append(nodes_df)\n\n            # Add a new 'cell_id' column to nodes_df\n            nodes_df['cell_id'] = range(len(nodes_df))\n            # Set 'cell_id' column as index for nodes_df\n            nodes_df.set_index('cell_id', inplace=True)\n            # Merge edges_df with nodes_df to get the cell type information for the anchor cells\n            edges_nodes_df = pd.merge(edges_df, nodes_df[['Level Three Cell Type', 'Level Two Cell Type', 'Level One Cell Type']], how='left', left_on='cell_id', right_index=True)\n            all_nodes_edges_files.append(edges_nodes_df)\n\n    \n    merged_edges = pd.concat(all_edges_files, ignore_index=True)\n    merged_nodes = pd.concat(all_nodes_files, ignore_index=True)\n    merged_nodes_for_all_edges = pd.concat(all_nodes_edges_files, ignore_index=True) \n\n    return merged_nodes, merged_edges, merged_nodes_for_all_edges\ndef create_directory(directory):\n    if not os.path.exists(directory):\n        os.makedirs(directory)\n        print(f\"Directory '{directory}' created successfully.\")\n    else:\n        print(f\"Directory '{directory}' already exists.\")",
    "crumbs": [
      "Distance Analysis: pancreas-geomx-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__pancreas-geomx-ufl.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "href": "distance_analysis__pancreas-geomx-ufl.html#get-initial-statistics-and-identify-endothelial-cell-categories-for-dataset.",
    "title": "Distance Analysis: pancreas-geomx-ufl",
    "section": "Get initial statistics and identify endothelial cell categories for dataset.",
    "text": "Get initial statistics and identify endothelial cell categories for dataset.\n\ndf_all_nodes, df_all_edges, df_all_edges_with_cell_types = read_all_edge_datasets(basepath, data_filedir, output_edge_dir)\n\n\ndf_all_nodes.head(5)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n10774.2\n7856.6\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nP2-13\n\n\n1\n10790.9\n7852.3\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nP2-13\n\n\n2\n10805.0\n7859.6\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nP2-13\n\n\n3\n10858.9\n7861.8\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nP2-13\n\n\n4\n10758.2\n7862.8\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nP2-13\n\n\n\n\n\n\n\nFollowing aspiration of islet beta cells, duct cells, and endothelial cells, mainly acinar cells remain to be aspirated by DSP instrument. Hence, most unknown cells in pancreas-geomx-ufl dataset are likely to be acinar cells.\n\n# Print the total number of unique cell types per dataset. Compute separately for each cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type).\nprint(\"Total number of unique cell types per cell type annnotation level:\")\nunique_cell_types = {\n    'Original Cell Type': df_all_nodes['Original Cell Type'].nunique(),\n    'Level Three Cell Type': df_all_nodes['Level Three Cell Type'].nunique(),\n    'Level Two Cell Type': df_all_nodes['Level Two Cell Type'].nunique(),\n    'Level One Cell Type': df_all_nodes['Level One Cell Type'].nunique()\n}\nfor cell_type, count in unique_cell_types.items():\n    print(f\"{cell_type}: {count}\")\n\nTotal number of unique cell types per cell type annnotation level:\nOriginal Cell Type: 4\nLevel Three Cell Type: 4\nLevel Two Cell Type: 4\nLevel One Cell Type: 3\n\n\n\n# Save the unique cell types containing \"endothelial\" in name per cell type column (Level One Cell Type, Level Two Cell Type, Level Three Cell Type, Original Cell Type) to a dictionary where the key is the level and the value is a list of unique cell types.\nendothelial_cell_types = {\n    'Original Cell Type': df_all_nodes[df_all_nodes['Original Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Original Cell Type'].unique().tolist(),\n    'Level Three Cell Type': df_all_nodes[df_all_nodes['Level Three Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Three Cell Type'].unique().tolist(),\n    'Level Two Cell Type': df_all_nodes[df_all_nodes['Level Two Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level Two Cell Type'].unique().tolist(),\n    'Level One Cell Type': df_all_nodes[df_all_nodes['Level One Cell Type'].str.contains(\"endothelial\", case=False, na=False)]['Level One Cell Type'].unique().tolist()\n}\n\nprint(\"\\nEndothelial cell types per cell type annotation level:\")\nfor level, cell_types in endothelial_cell_types.items():\n    print(f\"\\n{level}:\")\n    for cell in cell_types:\n        print(f\"  - {cell}\")\n\n\nEndothelial cell types per cell type annotation level:\n\nOriginal Cell Type:\n  - Endothelial\n\nLevel Three Cell Type:\n  - endothelial cell\n\nLevel Two Cell Type:\n  - endothelial cell\n\nLevel One Cell Type:\n  - endothelial cell\n\n\n\ntype_field_list = [\"Level Three Cell Type\", \"Level Two Cell Type\", \"Level One Cell Type\"] # Skipping Original Cell Type as it is not a hierarchical level.\n\n# Define the anchor cell type (type of endothelial cell) for each level in type_field_list based on available categories in the previous cell. The distance analysis at all three levels will be limited to the specified anchor cell type.\nanchor_cell_type_dict = {\n    'Level Three Cell Type': 'endothelial cell',\n    'Level Two Cell Type': 'endothelial cell',\n    'Level One Cell Type': 'endothelial cell'\n}",
    "crumbs": [
      "Distance Analysis: pancreas-geomx-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__pancreas-geomx-ufl.html#process-datasets-to-add-region-information-to-nodes-files.",
    "href": "distance_analysis__pancreas-geomx-ufl.html#process-datasets-to-add-region-information-to-nodes-files.",
    "title": "Distance Analysis: pancreas-geomx-ufl",
    "section": "Process datasets to add region information to Nodes files.",
    "text": "Process datasets to add region information to Nodes files.\n\n# Create a dictionary to map pancreas regions to correct region names.\nregion_map = {\n    'P2-4AD': 'Head',\n    'P2-7A': 'Neck',\n    'P2-13': 'Body',\n    'P2-19': 'Tail',\n    'P3-3A': 'Head',\n    'P3-7A': 'Neck',\n    'P3-9A': 'Body',\n    'P3-13A': 'Tail',\n    'P4-3A': 'Head',\n    'P4-6A': 'Neck',\n    'P4-12A': 'Body',\n    'P4-22': 'Tail'\n}\n\n\ndf_all_nodes.head()\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\n\n\n\n\n0\n10774.2\n7856.6\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nP2-13\n\n\n1\n10790.9\n7852.3\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nP2-13\n\n\n2\n10805.0\n7859.6\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nP2-13\n\n\n3\n10858.9\n7861.8\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nP2-13\n\n\n4\n10758.2\n7862.8\nEndothelial\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nendothelial cell\nendothelial cell\nCL:0000115\nskos:exactMatch\nP2-13\n\n\n\n\n\n\n\n\n# Iterate through the df_all_data dataframe to create new columns \"Donor\" and \"Unique Region\" based on the \"Dataset\" column.\n# The \"Donor\" column is created by extracting the donor name from the \"Dataset\" column.\n# The \"Unique Region\" column is created by mapping the region names based on the full dataset name.\ndf_all_nodes['Donor'] = df_all_nodes['Dataset'].str.split('-').str[0]\ndf_all_nodes['Unique Region'] = df_all_nodes['Dataset'].map(region_map)\n# df_all_nodes['Unique Region'] = df_all_nodes['Dataset'].str.split('-').str[1].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_nodes[['Dataset', 'Donor', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nDonor\nUnique Region\n\n\n\n\n0\nP2-13\nP2\nBody\n\n\n1\nP2-13\nP2\nBody\n\n\n2\nP2-13\nP2\nBody\n\n\n3\nP2-13\nP2\nBody\n\n\n4\nP2-13\nP2\nBody\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_nodes['Unique Region'].unique())\n\n# Print all unique donors in the data.\nprint(\"\\nUnique Donors in the data:\")\nprint(df_all_nodes['Donor'].unique())\n\n# Print the total number of unique donors and unique regions.\nprint(f\"\\nTotal number of unique donors: {df_all_nodes['Donor'].nunique()}\")\nprint(f\"Total number of unique regions: {df_all_nodes['Unique Region'].nunique()}\")\n\n# Print number of unique donors per unique region.\nprint(\"\\nNumber of unique donors per unique region:\")\nfor region in df_all_nodes['Unique Region'].unique():\n    num_donors = df_all_nodes[df_all_nodes['Unique Region'] == region]['Donor'].nunique()\n    print(f\"{region}: {num_donors}\")\n\n\nUnique Regions in the data:\n['Body' 'Tail' 'Head' 'Neck']\n\nUnique Donors in the data:\n['P2' 'P3' 'P4']\n\nTotal number of unique donors: 3\nTotal number of unique regions: 4\n\nNumber of unique donors per unique region:\nBody: 3\nTail: 3\nHead: 3\nNeck: 3",
    "crumbs": [
      "Distance Analysis: pancreas-geomx-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__pancreas-geomx-ufl.html#process-datasets-to-add-region-information-to-edges-files.",
    "href": "distance_analysis__pancreas-geomx-ufl.html#process-datasets-to-add-region-information-to-edges-files.",
    "title": "Distance Analysis: pancreas-geomx-ufl",
    "section": "Process datasets to add region information to Edges files.",
    "text": "Process datasets to add region information to Edges files.\n\ndf_all_edges.head(5)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\n\n\n\n\n0\n0\n10774.2\n7856.6\n0\n10758.2\n7862.8\n0\n17.159254\nP2-13\nendothelial cell\nLevel Three Cell Type\n\n\n1\n1\n10790.9\n7852.3\n0\n10805.0\n7859.6\n0\n15.877657\nP2-13\nendothelial cell\nLevel Three Cell Type\n\n\n2\n5\n10788.8\n7867.4\n0\n10805.0\n7859.6\n0\n17.979989\nP2-13\nendothelial cell\nLevel Three Cell Type\n\n\n3\n6\n10778.4\n7872.1\n0\n10763.9\n7874.8\n0\n14.749237\nP2-13\nendothelial cell\nLevel Three Cell Type\n\n\n4\n7\n10683.4\n7871.0\n0\n10690.7\n7883.8\n0\n14.735332\nP2-13\nendothelial cell\nLevel Three Cell Type\n\n\n\n\n\n\n\n\n# Process the edge data to create new columns \"Donor\", \"Unique Region\" based on the \"Dataset\" column, similar to how it was done for the node data.\ndf_all_edges['Donor'] = df_all_edges['Dataset'].str.split('-').str[0]\ndf_all_edges['Unique Region'] = df_all_edges['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges[['Dataset', 'Donor', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nDonor\nUnique Region\n\n\n\n\n0\nP2-13\nP2\nBody\n\n\n1\nP2-13\nP2\nBody\n\n\n2\nP2-13\nP2\nBody\n\n\n3\nP2-13\nP2\nBody\n\n\n4\nP2-13\nP2\nBody\n\n\n\n\n\n\n\n\n# Print all unique regions in the data.\nprint(\"\\nUnique Regions in the data:\")\nprint(df_all_edges['Unique Region'].unique())\n\n# Print all unique donors in the data.\nprint(\"\\nUnique Donors in the data:\")\nprint(df_all_edges['Donor'].unique())\n\n# Print the total number of unique donors and unique regions.\nprint(f\"\\nTotal number of unique donors: {df_all_edges['Donor'].nunique()}\")\nprint(f\"Total number of unique regions: {df_all_edges['Unique Region'].nunique()}\")\n\n# Print number of unique donors per unique region.\nprint(\"\\nNumber of unique donors per unique region:\")\nfor region in df_all_edges['Unique Region'].unique():\n    num_donors = df_all_edges[df_all_edges['Unique Region'] == region]['Donor'].nunique()\n    print(f\"{region}: {num_donors}\")\n\n\nUnique Regions in the data:\n['Body' 'Tail' 'Head' 'Neck']\n\nUnique Donors in the data:\n['P2' 'P3' 'P4']\n\nTotal number of unique donors: 3\nTotal number of unique regions: 4\n\nNumber of unique donors per unique region:\nBody: 3\nTail: 3\nHead: 3\nNeck: 3\n\n\n\ndf_all_edges_with_cell_types['Donor'] = df_all_edges_with_cell_types['Dataset'].str.split('-').str[0]\ndf_all_edges_with_cell_types['Unique Region'] = df_all_edges_with_cell_types['Dataset'].map(region_map)\n\n# Check if the new columns are created correctly.\ndf_all_edges_with_cell_types[['Dataset', 'Donor', 'Unique Region']].head(5)\n\n\n\n\n\n\n\n\nDataset\nDonor\nUnique Region\n\n\n\n\n0\nP2-13\nP2\nBody\n\n\n1\nP2-13\nP2\nBody\n\n\n2\nP2-13\nP2\nBody\n\n\n3\nP2-13\nP2\nBody\n\n\n4\nP2-13\nP2\nBody\n\n\n\n\n\n\n\n\ndf_all_nodes.head(1)\n\n\n\n\n\n\n\n\nx\ny\nOriginal Cell Type\nLevel Three Cell Type\nLevel Three CL Label\nLevel Three CL ID\nCL_Match/3\nLevel Two Cell Type\nLevel Two CL Label\nLevel Two CL ID\nCL_Match/2\nLevel One Cell Type\nLevel One CL Label\nLevel One CL ID\nCL_Match/1\nDataset\nDonor\nUnique Region\n\n\n\n\n0\n10774.2\n7856.6\nunknown\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nunknown cell\ncell:unknown\nCL:0000000\nskos:narrowMatch\nP2-13\nP2\nBody\n\n\n\n\n\n\n\n\ndf_all_edges.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nDonor\nUnique Region\n\n\n\n\n0\n0\n10774.2\n7856.6\n0\n10758.2\n7862.8\n0\n17.159254\nP2-13\nendothelial cell\nLevel Three Cell Type\nP2\nBody\n\n\n\n\n\n\n\n\ndf_all_edges_with_cell_types.head(1)\n\n\n\n\n\n\n\n\ncell_id\nx1\ny1\nz1\nx2\ny2\nz2\nDistance\nDataset\nAnchor Cell Type\nAnchor Cell Type Level\nLevel Three Cell Type\nLevel Two Cell Type\nLevel One Cell Type\nDonor\nUnique Region\n\n\n\n\n0\n0\n10774.2\n7856.6\n0\n10758.2\n7862.8\n0\n17.159254\nP2-13\nendothelial cell\nLevel Three Cell Type\nunknown cell\nunknown cell\nunknown cell\nP2\nBody",
    "crumbs": [
      "Distance Analysis: pancreas-geomx-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__pancreas-geomx-ufl.html#node-analysis",
    "href": "distance_analysis__pancreas-geomx-ufl.html#node-analysis",
    "title": "Distance Analysis: pancreas-geomx-ufl",
    "section": "Node Analysis",
    "text": "Node Analysis\n\n# Plot number of cells per cell type in the same plot. Color by cell type and unique region. Output figure saved in existing `figures_output_dir`.\ndef plot_cells_per_celltype(df, type_field, output_dir):\n    plt.figure(figsize=(14, 8))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.countplot(data=df, x=type_field, palette='Spectral', hue='Unique Region', width=0.2)\n    plt.title(f'Number of Cells per {type_field} in `{dataset_dir}`')\n    plt.xticks(rotation=90)\n    plt.tight_layout()\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_cells_per_celltype_{type_field}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.legend(title='Unique Region', bbox_to_anchor=(0.85, 1), loc='upper left')\n    plt.xlabel(type_field)\n\n    # For numbers on y-axis, do not use scientific notation.\n    plt.ticklabel_format(style='plain', axis='y')\n    # Set y-axis label\n    plt.ylabel('Number of Cells')\n    plt.grid(axis='y', linestyle='--', alpha=0.7)\n    plt.tight_layout()\n    # Show the plot\n    plt.show()\n    plt.close()\nfor type_field in type_field_list:\n    plot_cells_per_celltype(df_all_nodes, type_field, os.path.join(basepath, figures_output_dir))",
    "crumbs": [
      "Distance Analysis: pancreas-geomx-ufl"
    ]
  },
  {
    "objectID": "distance_analysis__pancreas-geomx-ufl.html#distance-analysis",
    "href": "distance_analysis__pancreas-geomx-ufl.html#distance-analysis",
    "title": "Distance Analysis: pancreas-geomx-ufl",
    "section": "Distance Analysis",
    "text": "Distance Analysis\n\n# Get mean, median, minimum, maximum distance per unique region per anchor cell type.\ndf_distance_stats = df_all_edges_with_cell_types.groupby(['Unique Region', 'Anchor Cell Type', 'Anchor Cell Type Level']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\n# Print the first few rows of the distance statistics DataFrame.\ndf_distance_stats\n\n\n\n\n\n\n\n\nUnique Region\nAnchor Cell Type\nAnchor Cell Type Level\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nBody\nendothelial cell\nLevel One Cell Type\n18.319087\n14.700340\n4.031129\n199.990725\n\n\n1\nBody\nendothelial cell\nLevel Three Cell Type\n18.319087\n14.700340\n4.031129\n199.990725\n\n\n2\nBody\nendothelial cell\nLevel Two Cell Type\n18.319087\n14.700340\n4.031129\n199.990725\n\n\n3\nHead\nendothelial cell\nLevel One Cell Type\n16.526058\n14.060228\n3.721559\n199.841938\n\n\n4\nHead\nendothelial cell\nLevel Three Cell Type\n16.526058\n14.060228\n3.721559\n199.841938\n\n\n5\nHead\nendothelial cell\nLevel Two Cell Type\n16.526058\n14.060228\n3.721559\n199.841938\n\n\n6\nNeck\nendothelial cell\nLevel One Cell Type\n17.067487\n13.726616\n4.001250\n199.960921\n\n\n7\nNeck\nendothelial cell\nLevel Three Cell Type\n17.067487\n13.726616\n4.001250\n199.960921\n\n\n8\nNeck\nendothelial cell\nLevel Two Cell Type\n17.067487\n13.726616\n4.001250\n199.960921\n\n\n9\nTail\nendothelial cell\nLevel One Cell Type\n17.707408\n14.534442\n4.252058\n199.950819\n\n\n10\nTail\nendothelial cell\nLevel Three Cell Type\n17.707408\n14.534442\n4.252058\n199.950819\n\n\n11\nTail\nendothelial cell\nLevel Two Cell Type\n17.707408\n14.534442\n4.252058\n199.950819\n\n\n\n\n\n\n\n\nLevel One Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level One Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel One Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nepithelial cell\nBody\n18.965929\n16.368873\n4.310452\n199.981049\n\n\n1\nepithelial cell\nHead\n17.352177\n15.519343\n3.900000\n197.600860\n\n\n2\nepithelial cell\nNeck\n17.860771\n15.337862\n4.622770\n199.862203\n\n\n3\nepithelial cell\nTail\n18.714225\n16.245923\n4.386342\n199.910605\n\n\n4\nunknown cell\nBody\n18.036458\n13.952061\n4.031129\n199.990725\n\n\n5\nunknown cell\nHead\n16.176917\n13.418271\n3.721559\n199.841938\n\n\n6\nunknown cell\nNeck\n16.725727\n13.083195\n4.001250\n199.960921\n\n\n7\nunknown cell\nTail\n17.291476\n13.764447\n4.252058\n199.950819\n\n\n\n\n\n\n\n\n# Get top five and bottom five cell types with respect to mean distance in each unique region separately.\ndef get_top_bottom_cell_types_by_mean(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate mean distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(mean_distance=('Distance', 'mean')).reset_index()\n    \n    # Sort by mean distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='mean_distance', ascending=False)\n    \n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Body:\n  Level One Cell Type  mean_distance\n0     epithelial cell      18.965929\n1        unknown cell      18.036458\n\nBottom 5 cell types in Body:\n  Level One Cell Type  mean_distance\n0     epithelial cell      18.965929\n1        unknown cell      18.036458\n\nTop 5 cell types in Tail:\n  Level One Cell Type  mean_distance\n0     epithelial cell      18.714225\n1        unknown cell      17.291476\n\nBottom 5 cell types in Tail:\n  Level One Cell Type  mean_distance\n0     epithelial cell      18.714225\n1        unknown cell      17.291476\n\nTop 5 cell types in Head:\n  Level One Cell Type  mean_distance\n0     epithelial cell      17.352177\n1        unknown cell      16.176917\n\nBottom 5 cell types in Head:\n  Level One Cell Type  mean_distance\n0     epithelial cell      17.352177\n1        unknown cell      16.176917\n\nTop 5 cell types in Neck:\n  Level One Cell Type  mean_distance\n0     epithelial cell      17.860771\n1        unknown cell      16.725727\n\nBottom 5 cell types in Neck:\n  Level One Cell Type  mean_distance\n0     epithelial cell      17.860771\n1        unknown cell      16.725727\n\n\n\n# Get top five and bottom five cell types with respect to median distance in each unique region separately.\ndef get_top_bottom_cell_types_by_median(df, cell_type_level, unique_region, top_n=5):\n    # Filter the DataFrame for the specified unique region and cell type level\n    df_filtered = df[df['Unique Region'] == unique_region]\n\n    # Group by the specified cell type level and calculate median distance\n    df_grouped = df_filtered.groupby(cell_type_level).agg(median_distance=('Distance', 'median')).reset_index()\n\n    # Sort by median distance to get top and bottom cell types\n    df_sorted = df_grouped.sort_values(by='median_distance', ascending=False)\n\n    # Get top N and bottom N cell types\n    top_cell_types = df_sorted.head(top_n)\n    bottom_cell_types = df_sorted.tail(top_n)\n    \n    return top_cell_types, bottom_cell_types\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Body:\n  Level One Cell Type  median_distance\n0     epithelial cell        16.368873\n1        unknown cell        13.952061\n\nBottom 5 cell types in Body:\n  Level One Cell Type  median_distance\n0     epithelial cell        16.368873\n1        unknown cell        13.952061\n\nTop 5 cell types in Tail:\n  Level One Cell Type  median_distance\n0     epithelial cell        16.245923\n1        unknown cell        13.764447\n\nBottom 5 cell types in Tail:\n  Level One Cell Type  median_distance\n0     epithelial cell        16.245923\n1        unknown cell        13.764447\n\nTop 5 cell types in Head:\n  Level One Cell Type  median_distance\n0     epithelial cell        15.519343\n1        unknown cell        13.418271\n\nBottom 5 cell types in Head:\n  Level One Cell Type  median_distance\n0     epithelial cell        15.519343\n1        unknown cell        13.418271\n\nTop 5 cell types in Neck:\n  Level One Cell Type  median_distance\n0     epithelial cell        15.337862\n1        unknown cell        13.083195\n\nBottom 5 cell types in Neck:\n  Level One Cell Type  median_distance\n0     epithelial cell        15.337862\n1        unknown cell        13.083195\n\n\n\n# Calculate regional variability\ndef calculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level):\n    \"\"\"    Calculate regional variability for distances in the given DataFrame.\n    \"\"\"\n    regional_variability = df_all_edges_with_cell_type_level.groupby('Unique Region')['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    regional_variability['CV (%)'] = (regional_variability['std'] / regional_variability['mean'] * 100).round(1)\n\n    print(\"\\nRegional Variability Analysis:\")\n    print(\"Mean: Average distance in each region\")\n    print(\"Std: Standard deviation of distances\")\n    print(\"CV: Coefficient of Variation (std/mean * 100%)\")\n    print(regional_variability)\n\n    # Calculate variability for each cell type\n    cell_type_variability = df_all_edges_with_cell_type_level.groupby(cell_type_level)['Distance'].agg([\n        ('mean', 'mean'),\n        ('std', 'std')\n    ]).round(2)\n\n    # Add CV as percentage\n    cell_type_variability['CV (%)'] = (cell_type_variability['std'] / cell_type_variability['mean'] * 100).round(1)\n\n    print(\"\\nCell Type Variability Analysis (sorted by CV):\")\n    print(cell_type_variability.sort_values('CV (%)', ascending=False))\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nBody           18.32  13.52    73.8\nHead           16.53   9.06    54.8\nNeck           17.07  12.05    70.6\nTail           17.71  11.43    64.5\n\nCell Type Variability Analysis (sorted by CV):\n                      mean    std  CV (%)\nLevel One Cell Type                      \nunknown cell         17.07  11.92    69.8\nepithelial cell      18.25  10.88    59.6\n\n\n\n# Define the standard region sequence for plots\nregions = ['Head', 'Neck', 'Body', 'Tail']\n\n\n# Generate Violin Plot\ndef plot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm='area'):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 2})\n    plt.figure(figsize=(10, 5))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    sns.violinplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette='Spectral', alpha=.9)\n\n    sns.set_theme(style=\"whitegrid\")\n    sns.set_context(\"paper\")\n\n\n    font_size = 10\n    plt.legend(fontsize=font_size)\n\n    plt.title(f'Violin Plot of distances by {cell_type_level} (Density Normalization: {density_norm})', fontsize=font_size)\n\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n\n    # Increase font size for all text in the figure\n    plt.xticks(fontsize=font_size)\n    plt.xticks(rotation=90)\n    plt.yticks(fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.png'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_cells_per_celltype_{cell_type_level}.svg'), dpi=300,\n                bbox_inches='tight',\n                pad_inches=0.5)\n    plt.show()\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    plt.figure(figsize=(10, 5))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    # Create categorical type with only the regions that exist in the data\n    available_regions = [r for r in regions if r in df_all_edges_with_cell_type_level['Unique Region'].unique()]\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(\n        df_all_edges_with_cell_type_level['Unique Region'],\n        categories=available_regions,\n        ordered=True\n    )\n\n    # Make box plot.\n    sns.boxplot(data=df_all_edges_with_cell_type_level, x=cell_type_level, y='Distance', hue='Unique Region', showfliers=False, palette='Spectral', width=0.2) # viridis or Spectral palette for better color distinction\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n    plt.title(f'Distribution of distances by {cell_type_level} and region', fontsize=font_size)\n    plt.xlabel(f'{cell_type_level}', fontsize=font_size)\n    plt.ylabel('Distance (\\u03bcm)', fontsize=font_size)\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_boxplots_by_region_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Boxplots of distribution of distances by cell type and region.\ndef plot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    pivot_data = df_all_edges_with_cell_type_level.pivot_table(\n    values='Distance',\n    index=cell_type_level,\n    columns='Unique Region',\n    aggfunc='median'\n    )\n\n    plt.figure(figsize=(5, 5))\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    sns.heatmap(pivot_data, annot=True, fmt='.1f', cmap='Spectral')\n    plt.title(f'Heatmap of median distances by {cell_type_level}', fontsize=12)\n\n    font_size = 10\n    plt.xticks(rotation=90, ha='right', fontsize=font_size)\n    plt.yticks(fontsize=font_size)\n\n    plt.xlabel('Unique Region', fontsize=font_size)\n    plt.ylabel(f'{cell_type_level}', fontsize=font_size)\n    \n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_distance_distribution_heatmap_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.show()\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\n# Generate Violin Plot per unique region in both small intestine and large intestine. Create for all 8 regions as 8 subplots.\ndef plot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, output_dir, density_norm=\"area\"):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n    font_size = 10\n    fig, axs = plt.subplots(1, 4, figsize=(15, 5)) # Adjusted figsize for horizontal layout\n    fig.suptitle(f'Distance distribution per {cell_type_level} in `{dataset_dir}` (density normalization = {density_norm})', fontsize=font_size)\n\n    # Keep the sequence of Cell Types consistent across plots.\n    cell_types = sorted(df_all_edges_with_cell_type_level[cell_type_level].unique())\n\n    # Create a color palette based on the number of unique classes\n    color_palette = sns.color_palette(\"Spectral\", n_colors=len(cell_types))\n\n    # Create a dictionary mapping class to color\n    class_color_dict = dict(zip(cell_types, color_palette))\n\n    for i, region in enumerate(regions):\n        data_reg = df_all_edges_with_cell_type_level[df_all_edges_with_cell_type_level['Unique Region'] == region]\n        sns.violinplot(data=data_reg, x=cell_type_level, y=\"Distance\", density_norm=density_norm, common_norm=True, cut=0, inner=\"box\", split=False, palette=class_color_dict, alpha=.9, ax=axs[i], hue=cell_type_level, legend=False, order=cell_types, fill=True)\n        axs[i].set_title(region, fontsize=font_size)\n        axs[i].set_xlabel('', fontsize=font_size)\n        axs[i].set_ylabel('Distance (\\u03bcm)', fontsize=font_size)\n        axs[i].tick_params(axis='x', labelrotation=90, labelsize=font_size)\n        axs[i].tick_params(axis='both', labelsize=font_size)\n\n    # Use fig.text for precise label positioning\n    fig.figure.text(0.5, -0.02, f'{cell_type_level}', ha='center', va='bottom', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_violin_plots_all_regions_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    \n    plt.show()\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # density_norm=\"count\" or \"area\" can be used based on preference.\n\n\n\n\n\n\n\n\n\n# Bar plot for median distances per cell type per unique region faceted by donor.\ndef plot_median_distance_barplot_by_donor(df_all_edges_with_cell_type_level, cell_type_level, output_dir):\n    sns.set_style(\"whitegrid\")\n    sns.set_context(\"notebook\", rc={\"grid.linewidth\": 1})\n    font_size = 10\n    plt.rcParams[\"svg.fonttype\"] = 'none'  # to store text as text, not as path\n\n    # Convert region to categorical with ordered sequence\n    df_all_edges_with_cell_type_level['Unique Region'] = pd.Categorical(df_all_edges_with_cell_type_level['Unique Region'], categories=regions, ordered=True)\n\n    # Create faceted plot\n    plt.figure(figsize=(20, 15))\n\n    g = sns.FacetGrid(df_all_edges_with_cell_type_level, col='Donor', col_wrap=3, height=4, aspect=1.2)\n    g.map_dataframe(sns.barplot, x='Unique Region', y='Distance', hue=cell_type_level,\n                estimator=np.median, palette='Spectral', errorbar=None,\n                order=regions)  # Specify the order for x-axis\n\n    \n    g.figure.suptitle(f'Median Distances per {cell_type_level} by Donor in `{dataset_dir}`', fontsize=font_size)\n\n    # Customize each facet\n    for ax in g.axes:\n        ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n        ax.set_xlabel('', fontsize=font_size)\n        ax.set_ylabel('Median Distance (μm)', fontsize=font_size)\n\n    # Use fig.text for precise label positioning\n    g.figure.text(0.5, -0.02, 'Unique Region', ha='center', va='bottom', fontsize=font_size)\n    \n    plt.legend(title=f'{cell_type_level}', bbox_to_anchor=(1.05, 1), loc='upper left', fontsize=font_size)\n\n    plt.tight_layout()\n\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_median_distance_barplot_by_donor_{cell_type_level}.png'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n    plt.savefig(os.path.join(output_dir, f'{dataset_dir}_median_distance_barplot_by_donor_{cell_type_level}.svg'), dpi=300,\n                    bbox_inches='tight',\n                    pad_inches=0.5)\n\n    plt.show()\n\nplot_median_distance_barplot_by_donor(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n&lt;Figure size 2000x1500 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\nLevel Two Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Two Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Two Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nbeta cell\nBody\n29.846050\n26.362284\n5.186521\n171.124545\n\n\n1\nbeta cell\nHead\n26.123536\n22.600111\n4.854894\n129.169230\n\n\n2\nbeta cell\nNeck\n30.119941\n26.340273\n5.458938\n196.232133\n\n\n3\nbeta cell\nTail\n26.932770\n23.086793\n4.838388\n196.558617\n\n\n4\ngland epithelium cell\nBody\n18.637023\n16.194135\n4.310452\n199.981049\n\n\n5\ngland epithelium cell\nHead\n17.119328\n15.395129\n3.900000\n197.600860\n\n\n6\ngland epithelium cell\nNeck\n17.379948\n15.100331\n4.622770\n199.862203\n\n\n7\ngland epithelium cell\nTail\n18.298722\n16.007811\n4.386342\n199.910605\n\n\n8\nunknown cell\nBody\n18.036458\n13.952061\n4.031129\n199.990725\n\n\n9\nunknown cell\nHead\n16.176917\n13.418271\n3.721559\n199.841938\n\n\n10\nunknown cell\nNeck\n16.725727\n13.083195\n4.001250\n199.960921\n\n\n11\nunknown cell\nTail\n17.291476\n13.764447\n4.252058\n199.950819\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Body:\n     Level Two Cell Type  mean_distance\n0              beta cell      29.846050\n1  gland epithelium cell      18.637023\n2           unknown cell      18.036458\n\nBottom 5 cell types in Body:\n     Level Two Cell Type  mean_distance\n0              beta cell      29.846050\n1  gland epithelium cell      18.637023\n2           unknown cell      18.036458\n\nTop 5 cell types in Tail:\n     Level Two Cell Type  mean_distance\n0              beta cell      26.932770\n1  gland epithelium cell      18.298722\n2           unknown cell      17.291476\n\nBottom 5 cell types in Tail:\n     Level Two Cell Type  mean_distance\n0              beta cell      26.932770\n1  gland epithelium cell      18.298722\n2           unknown cell      17.291476\n\nTop 5 cell types in Head:\n     Level Two Cell Type  mean_distance\n0              beta cell      26.123536\n1  gland epithelium cell      17.119328\n2           unknown cell      16.176917\n\nBottom 5 cell types in Head:\n     Level Two Cell Type  mean_distance\n0              beta cell      26.123536\n1  gland epithelium cell      17.119328\n2           unknown cell      16.176917\n\nTop 5 cell types in Neck:\n     Level Two Cell Type  mean_distance\n0              beta cell      30.119941\n1  gland epithelium cell      17.379948\n2           unknown cell      16.725727\n\nBottom 5 cell types in Neck:\n     Level Two Cell Type  mean_distance\n0              beta cell      30.119941\n1  gland epithelium cell      17.379948\n2           unknown cell      16.725727\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Body:\n     Level Two Cell Type  median_distance\n0              beta cell        26.362284\n1  gland epithelium cell        16.194135\n2           unknown cell        13.952061\n\nBottom 5 cell types in Body:\n     Level Two Cell Type  median_distance\n0              beta cell        26.362284\n1  gland epithelium cell        16.194135\n2           unknown cell        13.952061\n\nTop 5 cell types in Tail:\n     Level Two Cell Type  median_distance\n0              beta cell        23.086793\n1  gland epithelium cell        16.007811\n2           unknown cell        13.764447\n\nBottom 5 cell types in Tail:\n     Level Two Cell Type  median_distance\n0              beta cell        23.086793\n1  gland epithelium cell        16.007811\n2           unknown cell        13.764447\n\nTop 5 cell types in Head:\n     Level Two Cell Type  median_distance\n0              beta cell        22.600111\n1  gland epithelium cell        15.395129\n2           unknown cell        13.418271\n\nBottom 5 cell types in Head:\n     Level Two Cell Type  median_distance\n0              beta cell        22.600111\n1  gland epithelium cell        15.395129\n2           unknown cell        13.418271\n\nTop 5 cell types in Neck:\n     Level Two Cell Type  median_distance\n0              beta cell        26.340273\n1  gland epithelium cell        15.100331\n2           unknown cell        13.083195\n\nBottom 5 cell types in Neck:\n     Level Two Cell Type  median_distance\n0              beta cell        26.340273\n1  gland epithelium cell        15.100331\n2           unknown cell        13.083195\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nBody           18.32  13.52    73.8\nHead           16.53   9.06    54.8\nNeck           17.07  12.05    70.6\nTail           17.71  11.43    64.5\n\nCell Type Variability Analysis (sorted by CV):\n                        mean    std  CV (%)\nLevel Two Cell Type                        \nunknown cell           17.07  11.92    69.8\nbeta cell              28.16  16.82    59.7\ngland epithelium cell  17.88  10.41    58.2\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_median_distance_barplot_by_donor(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n&lt;Figure size 2000x1500 with 0 Axes&gt;\n\n\n\n\n\n\n\n\n\n\n\nLevel Three Cell Type Analysis\n\n# Get mean, median, minimum, maximum distance per cell type in all unique regions.\ncell_type_level = 'Level Three Cell Type'\ndf_all_edges_with_cell_type_level = df_all_edges_with_cell_types[(df_all_edges_with_cell_types['Anchor Cell Type Level'] == cell_type_level) & (df_all_edges_with_cell_types['Anchor Cell Type'] == anchor_cell_type_dict[cell_type_level])]\n\ndf_distance_stats_cell_type_level = df_all_edges_with_cell_type_level.groupby([cell_type_level, 'Unique Region']).agg(\n    mean_distance=('Distance', 'mean'),\n    median_distance=('Distance', 'median'),\n    min_distance=('Distance', 'min'),\n    max_distance=('Distance', 'max')\n).reset_index()\ndf_distance_stats_cell_type_level\n\n\n\n\n\n\n\n\nLevel Three Cell Type\nUnique Region\nmean_distance\nmedian_distance\nmin_distance\nmax_distance\n\n\n\n\n0\nbeta cell:pancreatic\nBody\n29.846050\n26.362284\n5.186521\n171.124545\n\n\n1\nbeta cell:pancreatic\nHead\n26.123536\n22.600111\n4.854894\n129.169230\n\n\n2\nbeta cell:pancreatic\nNeck\n30.119941\n26.340273\n5.458938\n196.232133\n\n\n3\nbeta cell:pancreatic\nTail\n26.932770\n23.086793\n4.838388\n196.558617\n\n\n4\nepithelial cell:ductal\nBody\n18.637023\n16.194135\n4.310452\n199.981049\n\n\n5\nepithelial cell:ductal\nHead\n17.119328\n15.395129\n3.900000\n197.600860\n\n\n6\nepithelial cell:ductal\nNeck\n17.379948\n15.100331\n4.622770\n199.862203\n\n\n7\nepithelial cell:ductal\nTail\n18.298722\n16.007811\n4.386342\n199.910605\n\n\n8\nunknown cell\nBody\n18.036458\n13.952061\n4.031129\n199.990725\n\n\n9\nunknown cell\nHead\n16.176917\n13.418271\n3.721559\n199.841938\n\n\n10\nunknown cell\nNeck\n16.725727\n13.083195\n4.001250\n199.960921\n\n\n11\nunknown cell\nTail\n17.291476\n13.764447\n4.252058\n199.950819\n\n\n\n\n\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_mean(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Body:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      29.846050\n1  epithelial cell:ductal       18.637023\n2             unknown cell      18.036458\n\nBottom 5 cell types in Body:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      29.846050\n1  epithelial cell:ductal       18.637023\n2             unknown cell      18.036458\n\nTop 5 cell types in Tail:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      26.932770\n1  epithelial cell:ductal       18.298722\n2             unknown cell      17.291476\n\nBottom 5 cell types in Tail:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      26.932770\n1  epithelial cell:ductal       18.298722\n2             unknown cell      17.291476\n\nTop 5 cell types in Head:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      26.123536\n1  epithelial cell:ductal       17.119328\n2             unknown cell      16.176917\n\nBottom 5 cell types in Head:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      26.123536\n1  epithelial cell:ductal       17.119328\n2             unknown cell      16.176917\n\nTop 5 cell types in Neck:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      30.119941\n1  epithelial cell:ductal       17.379948\n2             unknown cell      16.725727\n\nBottom 5 cell types in Neck:\n     Level Three Cell Type  mean_distance\n0     beta cell:pancreatic      30.119941\n1  epithelial cell:ductal       17.379948\n2             unknown cell      16.725727\n\n\n\n# Get top and bottom cell types for each unique region in the dataset.\nunique_regions = df_all_edges_with_cell_type_level['Unique Region'].unique()\nfor region in unique_regions:\n    top_bottom = get_top_bottom_cell_types_by_median(df_all_edges_with_cell_type_level, cell_type_level, region)\n    print(f\"\\nTop 5 cell types in {region}:\")\n    print(top_bottom[0])\n    print(f\"\\nBottom 5 cell types in {region}:\")\n    print(top_bottom[1])\n\n\nTop 5 cell types in Body:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        26.362284\n1  epithelial cell:ductal         16.194135\n2             unknown cell        13.952061\n\nBottom 5 cell types in Body:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        26.362284\n1  epithelial cell:ductal         16.194135\n2             unknown cell        13.952061\n\nTop 5 cell types in Tail:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        23.086793\n1  epithelial cell:ductal         16.007811\n2             unknown cell        13.764447\n\nBottom 5 cell types in Tail:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        23.086793\n1  epithelial cell:ductal         16.007811\n2             unknown cell        13.764447\n\nTop 5 cell types in Head:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        22.600111\n1  epithelial cell:ductal         15.395129\n2             unknown cell        13.418271\n\nBottom 5 cell types in Head:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        22.600111\n1  epithelial cell:ductal         15.395129\n2             unknown cell        13.418271\n\nTop 5 cell types in Neck:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        26.340273\n1  epithelial cell:ductal         15.100331\n2             unknown cell        13.083195\n\nBottom 5 cell types in Neck:\n     Level Three Cell Type  median_distance\n0     beta cell:pancreatic        26.340273\n1  epithelial cell:ductal         15.100331\n2             unknown cell        13.083195\n\n\n\ncalculate_regional_variability(df_all_edges_with_cell_type_level, cell_type_level)\n\n\nRegional Variability Analysis:\nMean: Average distance in each region\nStd: Standard deviation of distances\nCV: Coefficient of Variation (std/mean * 100%)\n                mean    std  CV (%)\nUnique Region                      \nBody           18.32  13.52    73.8\nHead           16.53   9.06    54.8\nNeck           17.07  12.05    70.6\nTail           17.71  11.43    64.5\n\nCell Type Variability Analysis (sorted by CV):\n                          mean    std  CV (%)\nLevel Three Cell Type                        \nunknown cell             17.07  11.92    69.8\nbeta cell:pancreatic     28.16  16.82    59.7\nepithelial cell:ductal   17.88  10.41    58.2\n\n\n\nplot_violin_cells_per_celltype(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm='area')\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_boxplots_by_region(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_distance_distribution_heatmap(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n\n\n\n\n\n\n\n\nplot_violin_plots_all_regions(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir), density_norm=\"count\") # Or, density_norm=\"count\" or \"area\" based on preference.\n\n\n\n\n\n\n\n\n\nplot_median_distance_barplot_by_donor(df_all_edges_with_cell_type_level, cell_type_level, os.path.join(basepath, figures_output_dir))\n\n&lt;Figure size 2000x1500 with 0 Axes&gt;",
    "crumbs": [
      "Distance Analysis: pancreas-geomx-ufl"
    ]
  }
]